<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2024-07-26T02:25:23.873177Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;人工智能解决国际数学奥林匹克银牌级别的问题&lt;/stitle>; &lt;id>;https://deepmind.google/discover/blog/ai-solves-imo-problems-at- silver-medal-level/&lt;/id>; &lt;更新>;2024-07-25T16:25:16.362585Z&lt;/更新>; &lt;link href=&quot;https://deepmind.google/discover/blog/ai-solves-imo- issues-at-silver-medal-level/&quot;/>; &lt;author>; &lt;name>;ocfnash&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ocfnash&lt;/uri>; &lt;/author>; &lt;内容类型=“html”>; &lt;img src =“https://lh3.googleusercontent.com/AdiABEMQViHaJJIcquROUJAEQXGtkk04SAamLoG0w06W2j5ZBEL-hGgRpwQVfmMnonQud_Ol6y0VTuQxdTScqiE8KrXdNtCalLiU7CJ6R093lRD5pQ=w1072- h603-n-nu&quot; style=&quot;宽度：220px; height: 124px;&quot; />;&lt;br />;基于强化学习的系统 AlphaProof 和改进的几何求解系统 AlphaGeometry 2 首次共同解决了国际数学奥林匹克 (IMO) 六道题中的四道，达到了与银牌获得者相同的水平。这些系统接受了数百万个问题的训练，并使用正式的数学语言来证明或反驳解决方案，... &lt;a href=&quot;https://hackernews.betacat.io/#ai-解决国际数学奥林匹克问题银牌级别问题&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id= 41069829&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot; text&quot;>;Jacek Karpinśki，共产党人无法忍受的计算机天才（2017）&lt;/stitle>; &lt;id>;https://culture.pl/en/article/jacek-karpinski-the-computer-genius-the-communists -couldnt-stand&lt;/id>; &lt;更新>;2024-07-25T19:25:16.364348Z&lt;/更新>; &lt;link href=&quot;https://culture.pl/en/article/jacek-karpinski-the-computer- Genius-the-communists-couldnt-stand&quot;/>; &lt;作者>; &lt;名称>;janisz&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=janisz&lt;/uri>; &lt;/作者>; &lt;内容类型=“html”>; &lt;img src =“https://api.culture.pl/sites/default/files/styles/1200_630/public/field/image/k-202_ulotka.jpg?itok=9nHxuir8”样式= “宽度：220px；高度：116px;&quot; />;&lt;br />;波兰工程师 Jacek Karpiński 发明了 K-202，这是一款革命性的计算机，可以装进公文包，每秒执行一百万次操作，但被共产主义政权阻止生产尽管取得了成就，卡尔宾斯基还是面临反对并最终被迫离开波兰，但他的技术在共产主义垮台后仍然存在于自由的波兰&lt;a href=&quot;https://hackernews.betacat.io/#jacek-卡宾斯基-the-computer-genius-the-communists-couldn-t-stand-2017&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=41072026&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;面向所有人的逆向工程&lt;/stitle>; &lt;id>;https://0xinfection.github.io/reversing/&lt;/id>; &lt;updated>;2024-07-25T15:25:16.364791Z&lt;/updated>; &lt; link href=&quot;https://0xinfection.github.io/reversing/&quot;/>; &lt;作者>; &lt;名称>;udev4096&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=udev4096&lt;/ uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://0xinfection.github.io/reversing/cover.png&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;逆向工程是解构人造物体以揭示其设计、架构或代码的过程，类似于科学研究。本教程集涵盖 x86、x64、32 位 ARM 和64 位架构，旨在使逆向工程变得简单且易于初学者和那些希望刷新知识的人使用。 _blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41069256&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/ Entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;展示 HN：Haystack – 用于在无限画布上探索和编辑代码的 IDE&lt;/ stitle>; &lt;id>;https://haystackeditor.com/&lt;/id>; &lt;更新>;2024-07-25T18:25:16.365226Z&lt;/更新>; &lt;link href=&quot;https://haystackeditor.com/&quot;/>; &lt;作者>; &lt;名称>;akshaysg&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=akshaysg&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot; https://framerusercontent.com/images/9bx5KI14yg2zRgbrESEvKFOdFM.png&quot; style=&quot;宽度：220px; height: 220px;&quot; />;&lt;br />;基于画布的 IDE，使导航和重构速度提高 10 倍&lt;a href=&quot;https://hackernews.betacat.io/#show-hn-haystack-an-ide-for -exploring-and-editing-code-on-an-infinite-canvas&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41068719 &quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text &quot;>;启动 HN: Undermind (YC S24) – 用于发现科学论文的人工智能代理&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=41069909&lt;/id>; &lt;更新>;2024-07- 25T16:25:16.365676Z&lt;/更新>; &lt;link href=&quot;https://news.ycombinator.com/item?id=41069909&quot;/>; &lt;作者>; &lt;名称>;jramette&lt;/名称>; &lt;uri>;https:// /news.ycombinator.com/user?id=jramette&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Undermind 正在构建一个针对复杂科学研究的搜索引擎，旨在帮助研究人员快速找到相关论文并避免浪费搜索系统使用模仿人类研究策略的管道，仔细搜索结果并提供报告，其目标是实现结果的高精度和详尽性。 &lt;a href=&quot;https://hackernews.betacat.io/#launch-hn-undermind-yc-s24-ai-agent-for-discovering-scientific-papers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=41069909&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Wat – Python 对象的深度检查&lt;/stitle>; &lt;id>;https://github.com/igrek51/ wat&lt;/id>; &lt;更新>;2024-07-25T17:25:16.366116Z&lt;/更新>; &lt;link href=&quot;https://github.com/igrek51/wat&quot;/>; &lt;作者>; &lt;名称>;igrek51&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=igrek51&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com /igrek51/wat/master/docs/img/wat-datetime.png&quot; style=&quot;宽度: 220px 高度: 171px;&quot; />;&lt;br />;WAT Inspector 是一个强大的工具，可以让您检查和探索 Python 中的未知对象，提供对象的类型、模块、父对象和方法等信息，使您更容易理解和使用对象。它可用于通过使用除法运算符快速检查对象，并且还提供诸如列出... &lt;a href=&quot;https://hackernews.betacat.io/# show-hn-wat-deep-inspection-of-python-objects&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41070428&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;使用 GPU 工作图进行实时程序生成 [pdf]&lt;/stitle>; &lt;id>;https://gpuopen.com/download/publications/Real-Time_Procedural_Generation_with_GPU_Work_Graphs-GPUOpen_preprint.pdf&lt;/id>; &lt;更新>;2024-07- 25T20：25：16.366572Z &lt;/更新>; &lt;link href =“https://gpuopen.com/download/publications/Real-Time_Procedural_Generation_with_GPU_Work_Graphs-GPUOpen_preprint.pdf”/>; &lt;作者>; &lt;名称>;ibobev &lt;/名称>; &lt;uri >;https://news.ycombinator.com/user?id=ibobev&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;用户的输入描述了一个仅使用 GPU 的工作图系统，该系统使用 37 个节点来增强实时现有场景，生成各种几何类型，包括常春藤、市场布局和地面杂波。该系统利用 GPU 工作图、光线追踪和网格着色器以程序方式生成几何体，并采用合并实例、BVH 标记和增长偏差等概念来... &lt;a href=&quot;https://hackernews.betacat.io /#real-time-procedural- Generation-with-gpu-work-graphs-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=41035084&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;用 Python 编写的 Deluxe Paint II 克隆&lt;/stitle>; &lt;id>;https://github.com/mriale/PyDPainter&lt;/id>; &lt;更新>;2024-07-25T21:25:16.367000Z&lt; /updated>; &lt;link href=&quot;https://github.com/mriale/PyDPainter&quot;/>; &lt;作者>; &lt;name>;luismedel&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id= luismedel&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/mriale/PyDPainter/master/pydpainter-screenshot.png&quot; style=&quot;width: 220px高度：152像素；” />;&lt;br />;PyDPainter 是一个基于 Python 的像素艺术程序，灵感来自 1985 年的 Deluxe Paint，旨在为现代像素艺术爱好者创建一个可用且增强的工具。该项目已获得 GPLv3 许可，旨在带回具有现代功能的可靠工具。 &lt;a href=&quot;https://hackernews.betacat.io/#a-clone-of-deluxe-paint-ii-writing-in-python&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=41073264&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;表格数据的应用机器学习&lt;/stitle>; &lt;id>;https://aml4td.org/&lt;/id>; &lt;更新>;2024-07 -25T20：25：16.367416Z &lt;/更新>; &lt;link href =“https://aml4td.org/”/>; &lt;作者>; &lt;名称>;sebg &lt;/名称>; &lt;uri>;https://news.ycombinator.com /user?id=sebg&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;该项目旨在创建一个实用指南，用于根据表格数据开发质量预测模型，重点关注特征工程和后期建模活动，以及已获得知识共享许可，可用于非商业用途。该指南面向数据分析师和专业人士，假设他们之前没有机器学习或统计方面的专业知识，并将提供有关...的应用知识&lt;a href=&quot;https://hackernews.betacat.io/#applied-machine-learning -for-tabular-data&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41072616&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我最喜欢的算法：线性时间中值查找（2018）&lt;/stitle>; &lt;id>;https://rcoh.me/posts/linear-time-median-finding/&lt;/id>; &lt;更新>;2024-07-25T09:25:16.368240Z&lt;/更新>; &lt; link href=&quot;https://rcoh.me/posts/linear-time-median-finding/&quot;/>; &lt;author>; &lt;name>;skanderbm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user ?id=skanderbm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://rcoh.me/images/medians-graph.png&quot; style=&quot;width: 220px; height: 124 像素；” />;&lt;br />;中位数中位数算法是一种确定性线性时间方法，用于查找列表的中位数，使用快速选择和主元选择算法来实现线性性能。该算法被证明是线性时间的，但其实现很复杂，并且由于计算时间慢而在实践中不常用。 &lt;a href=&quot;https://hackernews.betacat.io/#my-favorite-algorithm-linear-time-median-finding-2018&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=41066536&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;生成数独是为了乐趣而不盈利&lt;/stitle>; &lt;id>;https://tn1ck.com/blog/how-to-generate-sudokus&lt;/ id>; &lt;更新>;2024-07-25T11:25:16.368657Z&lt;/更新>; &lt;link href=&quot;https://tn1ck.com/blog/how-to-generate-sudokus&quot;/>; &lt;作者>; &lt;名称>; todsacerdoti&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=todsacerdoti&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://tn1ck. com/how-to-generate-sudokus/benchmark_bruteForceWithValidCheck.csv_correlation.png&quot; style=&quot;width: 220px; height: 275px;&quot; />;&lt;br />;作者创建了一个免费开源的数独应用程序，并通过使用各种算法生成数独并对其迭代次数进行基准测试来分析数独的难度。分析表明，迭代次数与难度级别密切相关，但作者指出，这可能并不是人类如何感知难度的完美指标。 &lt;a href=&quot;https://hackernews.betacat.io/#generating-sudokus-for-fun-and-no-profit&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41062072&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Lisp 宏的防御：以汽车领域为例&lt;/stitle>; &lt;id>;https://mihaiolteanu.me/defense-of-lisp-macros &lt;/id>; &lt;更新>;2024-07-25T11:25:16.369081Z&lt;/更新>; &lt;link href=&quot;https://mihaiolteanu.me/defense-of-lisp-macros&quot;/>; &lt;作者>; &lt;名称>; molteanu&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=molteanu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;汽车行业受到工具激增的困扰，语言和文件格式，导致碎片化并给开发人员和供应商带来额外的工作量。对一种强大的语言来征服软件领域的追求导致了工具开发的永无止境的循环，每个工具都引入了自己的语言、语法和文件格式，在系统和...之间造成了裂痕。 “https://hackernews.betacat.io/#defense-of-lisp-macros-the-automotive-field-as-a-case-in-point” target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=41066544&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;从 STM32 映射 FPGA 的内存&lt;/stitle>; &lt;id>;https://serd.es/2024/07/24/Memory -mapping-an-FPGA-from-a-STM32.html&lt;/id>; &lt;更新>;2024-07-25T14:25:16.369895Z&lt;/更新>; &lt;link href=&quot;https://serd.es/2024/ 07/24/Memory-mapping-an-FPGA-from-a-STM32.html&quot;/>; &lt;author>; &lt;name>;hasheddan&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id= hasheddan&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://serd.es/assets/fmc-test-800.jpg&quot; style=&quot;width: 220px; height: 164px ;” />;&lt;br />;作者描述了大规模嵌入式项目的自定义设置，使用 AMD Xilinx Kintex-7 或 Artix FPGA 与 STM32H735 MCU 配对，并在它们之间具有内存映射接口。该设置支持高速数据平面和控制平面，具有分散引脚排列、安全边界和灵活的内存控制器等功能。 &lt;a href=&quot;https://hackernews.betacat.io/#memory-mapping-an-fpga-from-an-stm32&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41068995&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Node.js 添加了对 TypeScript 的实验性支持&lt;/stitle>; &lt;id>;https://github.com/nodejs/node/pull/53725&lt;/id>; &lt;更新>;2024-07-25T03:25:16.370316Z&lt;/更新>; &lt;link href=&quot;https://github.com/nodejs/node/pull/53725&quot;/>; &lt;作者>; &lt;名称>;magnio &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=magnio&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/19f5ceaed7bfd96bbe1ff3ec94e0670c2a75f0f1ef358d41c5fb71258a8184eb /nodejs/node/pull/53725&quot; style=&quot;宽度: 220px; 高度: 110px;&quot; />;&lt;br />;TypeScript 文件可以通过设置实验标志 --experimental-strip-types 来执行，它将代码转换为 JavaScript，而无需类型检查或保留类型。使用 @swc/wasm-typescript 包是为了简单起见，因为它是一个小包，带有 wasm 和 js 文件来绑定它，并且经过了 Deno 的实际测试。 &lt;a href=&quot;https://hackernews.betacat.io/#node-js-adds-experimental-support-for-typescript&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41064351&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;映射黑客新闻以查找 HN 社区中的知名人士&lt;/stitle>; &lt;id>;https://blog.wilsonl.in/hackerverse-2/&lt;/ id>; &lt;更新>;2024-07-25T15:25:16.370865Z&lt;/更新>; &lt;link href=&quot;https://blog.wilsonl.in/hackerverse-2/&quot;/>; &lt;作者>; &lt;名称>;robg&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=robg&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://blog.wilsonl.in /hackerverse-2/screenshot.png&quot; style=&quot;宽度: 220px 高度: 161px;&quot; />;&lt;br />;作者和 Robert (robg) 探索了 Hacker News 的语义地图，发现了如何通过语言使用来组织用户、搜索知识以及基于关系绘制社区地图。他们的目标是优先考虑人员而不是页面，从而能够发现可信的声音和联系，并邀请其他人加入候补名单以进一步探索该项目。 &lt;a href=&quot;https://hackernews.betacat.io/#mapping-hacker-news-to-find-who-knows-what-in-the-hn-community&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41069527&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;五种小语言及其发展：HOPL 演讲 (1993)&lt;/stitle>; &lt;id>;https:// www.bell-labs.com/usr/dmr/www/hopl.html&lt;/id>; &lt;更新>;2024-07-25T14:25:16.371390Z&lt;/更新>; &lt;link href=&quot;https://www.bell -labs.com/usr/dmr/www/hopl.html&quot;/>; &lt;作者>; &lt;名称>;fanf2&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=fanf2&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.bell-labs.com/usr/dmr/www/hoplgifs/y.1.gif&quot; style=&quot;width: 220px;高度：170px；” />;&lt;br />;演讲者讨论了五种编程语言之间的异同：Bliss、Pascal、Algol 68、BCPL 和 C。他认为 C 的成功在于它能够连接和促进人们需要做的事情，及其在 Unix 系统上的实现。 &lt;a href=&quot;https://hackernews.betacat.io/# Five-little-languages-and-how-they-grew-talk-at-hopl-1993&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=41032097&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Tiny Moon – 计算月相的 Swift 库&lt;/stitle>; &lt;id>;https://github.com /mannylopez/TinyMoon&lt;/id>; &lt;更新>;2024-07-25T16:25:16.371807Z&lt;/更新>; &lt;link href=&quot;https://github.com/mannylopez/TinyMoon&quot;/>; &lt;作者>; &lt;名称>;曼尼洛佩兹&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mannylopez&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw. githubusercontent.com/mannylopez/TinyMoon/main/images/TinyMoonIcon_256x256.png&quot; style=&quot;宽度：220px 高度：220px；&quot; />;&lt;br />;TinyMoon 库计算任何给定日期和时间的月相，离线工作并与未来的更新兼容。它提供两种类型的计算：Moon（优先考虑主要相位）和 ExactMoon（返回特定日期和时间的精确值）。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-tiny-moon-swift-library-to-calculate-the-moon-phase&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=41069681&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Veles：用于二进制数据分析的开源工具&lt;/stitle>; &lt;id>;https://codisec.com/veles/ &lt;/id>; &lt;更新>;2024-07-25T11:25:16.372227Z&lt;/更新>; &lt;link href=&quot;https://codisec.com/veles/&quot;/>; &lt;作者>; &lt;名称>;LorenDB &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=LorenDB&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://codisec.com/wp-content /uploads/2016/12/binary_visualization.png&quot; style=&quot;宽度：220px；高度：126px；&quot; />;&lt;br />;Veles 是一种二进制数据分析工具，它将先进的十六进制探索和数据可视化功能与可扩展的分析框架相结合，支持逆向工程和隐写术等任务。该工具使用客户端-服务器架构并且是开源的，重点是通过夺旗竞赛进行社区驱动的开发和测试。 &lt;a href=&quot;https://hackernews.betacat.io/#veles-open-source-tool-for-binary-data-analysis&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=41026480&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;非常安全：为什么我们使用隔离虚拟机&lt;/stitle>; &lt;id>;https://blog.thinkst.com/2024/07/unfashionously-secure- Why-we-use-isolated-vms.html&lt;/id>; &lt;更新>;2024-07-25T17:25:16.372639Z&lt;/更新>; &lt;link href=&quot;https://blog.thinkst.com/2024/07 /unfashionically-secure-why-we-use-isolated-vms.html&quot;/>; &lt;author>; &lt;name>;mh_&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mh_&lt;/ uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://i0.wp.com/blog.thinkst.com/wp-content/uploads/2024/07/image-4.png ?resize=960%2C436&amp;ssl=1&quot; style=&quot;宽度：220px 高度：100px；&quot; />;&lt;br />;安全公司 Canary 选择使用独特的架构，在单独的虚拟机上运行每个客户的服务，提供完全的客户隔离和强大的安全边界，尽管这种架构不太时尚且价格更高。这种方法使 Canary 能够避免常见的安全漏洞，并在安全评估中被证明是有效的，提供了高水平的... &lt;a href=&quot;https://hackernews.betacat.io/#unfashionously-secure-why-we- use-isolated-vms&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41070870&quot; target=&quot;_blank&quot;>;[评论]&lt; /a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;化学家解释无咖啡因咖啡背后的化学成分&lt; /stitle>; &lt;id>;https://theconversation.com/retaining-flavor-while-removing-caffeine-a-chemist-explains-the-chemistry-behind-decaf-coffee-233196&lt;/id>; &lt;更新>;2024- 07-25T12:25:16.373448Z&lt;/更新>; &lt;link href=&quot;https://theconversation.com/retaining-flavor-while-removing-caffeine-a-chemist-explains-the-chemistry-behind-decaf-coffee -233196&quot;/>; &lt;作者>; &lt;名称>;BerislavLopac&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=BerislavLopac&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>; &lt;img src=&quot;https://images.theconversation.com/files/602926/original/file-20240625-17-dvtep.jpg?ixlib=rb-4.1.0&amp;rect=0%2C0%2C5243%2C3508&amp;q=20&amp;auto=format&amp;w =320&amp;fit=clip&amp;dpr=2&amp;usm=12&amp;cs=strip&quot; style=&quot;宽度：220px; height: 148px;&quot; />;&lt;br />;脱咖啡因方法，如二氧化碳、瑞士水和溶剂法，可以去除咖啡豆中的大部分咖啡因，同时保留风味和香气化合物。这些方法具有丰富的咖啡因含量历史上，使用高压二氧化碳、热水和有机溶剂等各种技术来提取咖啡因，其中一些方法能够将风味化合物重新引入咖啡豆中。 a-chemist-explains-the-chemistry-behind-decaf-coffee&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41067616&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >; constexpr 分配有什么难的？&lt;/stitle>; &lt;id>;https://brevzin.github.io/c++/2024/07/24/constexpr-alloc/&lt;/id>; &lt;updated>;2024-07-25T13： 25:16.373846Z&lt;/更新>; &lt;link href=&quot;https://brevzin.github.io/c++/2024/07/24/constexpr-alloc/&quot;/>; &lt;作者>; &lt;名称>;signa11&lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=signa11&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;作者讨论了在 C++20 中允许持久 constexpr 分配的挑战，包括需要确保分配在运行时不会发生变化，并且其内容可以用作常量表达式。作者提出了几种解决方案，包括引入新的 cv 限定符“propconst”和将分配标记为不可变的库函数，以及... &lt;a href=&quot;https://hackernews.betacat.io/#what- s-so-hard-about-constexpr-allocation&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41068294&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;询问 HN：和 10 岁的孩子一起学习机器人技术的最佳方式？&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=41070703&lt;/id>; &lt;updated>;2024-07-25T17:25:16.374248Z &lt;/更新>; &lt;link href=&quot;https://news.ycombinator.com/item?id=41070703&quot;/>; &lt;作者>; &lt;name>;hersko&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=hersko&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;您和您的儿子想从头开始构建一个小型战斗机器人，但缺乏电气工程和机器人技术知识。您正在寻找资源和书籍来共同学习基础知识，而不是购买预制的套件。 &lt;a href=&quot;https://hackernews.betacat.io/#ask-hn-best-way-to-learn-robotics-with-a-10-year-old&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41070703&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Cameo 一度估值为 10 亿美元&lt;/stitle>; &lt;id>;https://www.businessinsider.com/cameo -app-company-fine-settlement-ftc-violation-2024-7&lt;/id>; &lt;更新>;2024-07-25T22:25:16.374681Z&lt;/更新>; &lt;link href=&quot;https://www.businessinsider. com/cameo-app-company-fine-settlement-ftc-violation-2024-7&quot;/>; &lt;作者>; &lt;名称>;jaawns&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=下颚&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://i.insider.com/66a170142d66759f66fe0bc9?width=1200&amp;format=jpeg&quot; style=&quot;width: 220px; height: 110px ;” />;&lt;br />;Cameo 是一家允许人们向名人支付短视频信息的公司，该公司陷入财务困境，无法支付因违反联邦贸易委员会规定而被罚款 60 万美元的公司。相反，它将减少 10 万美元的罚款，并实施一些功能以确保未来遵守背书法规。 &lt;a href=&quot;https://hackernews.betacat.io/#cameo-was-once-valued-at-1b&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=41074022&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;当对象不够时（2021）&lt;/stitle>; &lt;id>;https://www.tonysm.com/when-objects-are-not-enough/&lt;/ id>; &lt;更新>;2024-07-25T10:25:16.375152Z&lt;/更新>; &lt;link href=&quot;https://www.tonysm.com/when-objects-are-not-enough/&quot;/>; &lt;作者>; &lt;name>;o2l&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=o2l&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// /www.tonysm.com/assets/images/oop/01-objects.png&quot; style=&quot;宽度：220px 高度：234px；&quot; />;&lt;br />;作者探讨了面向对象编程 (OOP) 的概念及其演变，强调了原始 Smalltalk 方法与现代实现之间的差异。作者讨论了将“消息”封装在类中、将方法提升为对象以及将操作用作类的重要性，同时还谈到了 OOP 的局限性以及对更多... &lt;a href=&quot;https:// hackernews.betacat.io/#when-objects-are-not-enough-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id =41039647&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type= “text&quot;>;调查损坏的 Winamp 皮肤&lt;/stitle>; &lt;id>;https://jordaneldredge.com/notes/corrupted-skins/&lt;/id>; &lt;updated>;2024-07-25T04:25:16.375709Z&lt;/updated>; &lt;link href=&quot;https://jordaneldredge.com/notes/corrupted-skins/&quot;/>; &lt;作者>; &lt;name>;treve&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=特里夫&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://jordaneldredge.com/notion-mirror/84ebb48c-616a-4f51-ae9a-991a4e0a7e9b/e94461bd-1f9c-4ef4- bbda-23acc32ef0df/EsErCPFVoAACjOn.jpeg&quot; style=&quot;宽度：220px；高度：241px；&quot; />;&lt;br />;用户探索了损坏的 Winamp 皮肤，找到了各种文件，包括 PDF、图像和加密的 zip 文件，这导致了一系列意外的发现。用户发现了敏感信息，例如电子邮件密码和传记，甚至发现了潜在的恶意可执行文件，但后来发现该文件是无害的。 &lt;a href=&quot;https://hackernews.betacat.io/#investigating-corrupt-winamp-skins&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=41064645&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;人类 1，黑猩猩 0：纠正记录&lt;/stitle>; &lt;id>;https://www.jasoncollins.blog/posts/ humans-1-chimps-0- Correcting-the-record &lt;/id>; &lt;更新>;2024-07-25T11:25:16.376131Z&lt;/更新>; &lt;link href=&quot;https://www.jasoncollins.blog/posts/ humans-1-chimps-0- Correcting-the-记录”/>; &lt;作者>; &lt;名称>;amadeuspagel&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=amadeuspagel&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt; img src=&quot;https://www.jasoncollins.blog/posts/img/ayumu.png&quot; style=&quot;宽度：220px；高度：150px；&quot; />;&lt;br />;黑猩猩 Ayumu 最初被认为拥有优于人类的工作记忆，但随后的研究表明，这一结论是基于有缺陷的方法论，人类可以通过适度的练习与 Ayumu 的表现相媲美。 &lt;a href=&quot;https://hackernews.betacat.io/# humans-1-chimps-0- Correcting-the-record&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41063258&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;使用 Postgres 进行版本化有限状态机 (2019)&lt;/stitle>; &lt;id>;https://raphael.medaer.me/2019/06/12/pgfsm。 html&lt;/id>; &lt;更新>;2024-07-25T09:25:16.376560Z&lt;/更新>; &lt;link href=&quot;https://raphael.medaer.me/2019/06/12/pgfsm.html&quot;/>; &lt;作者>; &lt;名称>;mirzap &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=mirzap&lt;/uri>; &lt;/作者>; &lt;content type =“html”>;&lt;img src =“https” ://raphael.medaer.me/assets/img/pgfsm-intro.jpg&quot; style=&quot;宽度：220px；高度：147px；&quot; />;&lt;br />;用户使用 PostgreSQL 实现了数据库有限状态机 (FSM)，通过使用状态和事件的枚举来改进 Felix Geisendorfer 的原始实现，并为转换创建映射表。用户还向 FSM 添加了版本控制，允许在不破坏现有数据的情况下更改转换函数和表，并引入了触发器来限制... &lt;a href=&quot;https://hackernews.betacat.io/#versioned-有限状态机-with-postgres-2019&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41066303&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;