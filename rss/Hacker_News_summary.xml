<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-06-24T13:57:05.471810Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;为什么 TypeScript 无法正确键入 Object.keys？&lt;/stitle>; &lt;id>;https://alexharri.com/blog/typescript-structural-typing&lt;/id>; &lt;更新>;2023-06-24T11:55:29.821649Z&lt;/更新>; &lt;link href=&quot;https://alexharri.com/blog/typescript-structural-typing&quot;/>; &lt;作者>; &lt;名称>;alexharri&lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=alexharri&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;此错误似乎毫无意义。我们使用选项键来访问选项。为什么 TypeScript 不解决这个问题？使该方法接受 T 的通用参数并返回 (keyof T)[] 非常容易。像这样定义 Object.keys 似乎是理所当然的事情，但 TypeScript 有充分的理由不这样做。原因与 TypeScript 的结构类型系统有关。这是结构类型系统中的预期行为。如果 A 是 B 的超集（即 A 包含 B 中的所有属性），则类型 A 可分配给 B。然而，如果 A 是 B 的真超集（即 A 比 B 具有更多的属性），那么关键的一点是，当我们有一个 T 类型的对象时，我们所知道的关于该对象的全部信息是它至少包含T。我们不知道我们是否有确切的 T，这就是为什么 Object.keys 是这样输入的。让我们举个例子。假设我们正在为创建新用户的 Web 服务创建端点。我们有一个现有的用户界面，如下所示： 在将用户保存到数据库之前，我们要确保用户对象有效。因此，我们创建一个验证器对象，其中包含 User 中每个属性的验证函数： 由于我们想要验证 user 中的每个属性，因此我们可以使用 Object.keys 迭代 user 中的属性： 这种方法的问题是 user 对象可能包含验证器中不存在的属性。即使用户没有指定电子邮件属性，这也不是类型错误，因为结构类型允许提供无关的属性。在运行时，email 属性将导致验证器未定义并在调用时抛出错误。对我们来说幸运的是，TypeScript 在这段代码有机会运行之前就发出了类型错误。 // &#39;string&#39; 类型的表达式不能用于索引类型 &#39;{ name: ...,password: ... }&#39;。现在我们已经知道为什么 Object.keys 是这样键入的了。它迫使我们承认对象可能包含类型系统不知道的属性。凭借我们对结构类型及其陷阱的新知识，让我们看看如何有效地使用结构类型来为我们带来好处。结构类型提供了很大的灵活性。它允许接口准确地声明它们需要的属性。我想通过一个例子来演示这一点。想象一下，我们编写了一个函数来解析 KeyboardEvent 并返回要触发的快捷方式。 // 输入 &#39;{ key: string;元键：真； }&#39; 缺少类型“KeyboardEvent”中的以下属性：altKey、charCode、code、ctrlKey 以及其他 37 个属性。啊。指定所有 37 个附加属性将会非常嘈杂，所以这是不可能的。相反，我们可以更新 getKeyboardShortcut 以仅从事件中声明它所需的属性。测试代码现在只需要满足这个更最小的接口，这使得它的噪音更少。我们的函数与全局 KeyboardEvent 类型的耦合也较少，并且可以在更多上下文中使用。现在更加灵活了。这是可能的，因为结构类型。 KeyboardEvent 可分配给 KeyboardShortcutEvent，因为它是超集，即使 KeyboardEvent 有 37 个不相关的属性。 Evan Martin 在这篇精彩的文章中探讨了这个想法：界面通常属于用户。我强烈建议您阅读一下！它改变了我编写和思考 TypeScript 代码的方式。 &lt;a href=&quot;https://hackernews.betacat.io/#why-doesn-t-typescript-properly-type-object-keys&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36457557&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;规则说，“公园内禁止车辆”&lt;/stitle>; &lt;id>;https://novehiclesinthepark.com/&lt;/id>; &lt;更新>; 2023-06-24T00:55:29.823641Z&lt;/updated>; &lt;link href=&quot;https://novehiclesinthepark.com/&quot;/>; &lt;author>; &lt;name>;luu&lt;/name>; &lt;uri>;https://news. ycombinator.com/user?id=luu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;这个游戏是关于语言和规则的。它由 27 个问题组成，但在前 7 个问题之后，您可以跳到最后。最后，我会告诉你你的结果与其他人的结果相比如何，并讨论我制作这款游戏​​的原因。 &lt;a href=&quot;https://hackernews.betacat.io/#the-rule-says-no-vehicles-in-the-park&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36453856&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;澳大利亚政府风格手册&lt;/stitle>; &lt;id>;https://www.stylemanual.gov.au/&lt;/id>; &lt;更新>;2023-06 -24T09:55:29.826083Z&lt;/updated>; &lt;link href=&quot;https://www.stylemanual.gov.au/&quot;/>; &lt;作者>; &lt;name>;kimburgess&lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=kimburgess&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;澳大利亚政府写作和编辑的标准。风格手册适用于所有撰写、编辑或批准澳大利亚政府内容的人。使用它来创建满足用户需求的清晰一致的内容。 &lt;a href=&quot;https://hackernews.betacat.io/#australian-government-style-manual&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=36457205&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;写作中的常见错误&lt;/stitle>; &lt;id>;https://www.cs.columbia.edu/~hgs/etc/writing-bugs.html&lt;/id>; &lt;updated>;2023 -06-24T09:55:29.826584Z&lt;/更新>; &lt;link href=&quot;https://www.cs.columbia.edu/~hgs/etc/writing-bugs.html&quot;/>; &lt;作者>; &lt;名称>;pablode &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=pablode&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;不要执着于你所写的文字；当你苦思冥想想弄清楚自己想说的内容时，准备好废弃你所写的内容，即使它是整篇论文。与几乎所有规则一样，在某些情况下，打破规则是个好主意，经验丰富的作家很可能会用“但是”来回应其中的一些规则。 &lt;a href=&quot;https://hackernews.betacat.io/#common-bugs-in-writing&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=36457051&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;佛伦吉采集规则&lt;/stitle>; &lt;id>;https://memory-alpha.fandom.com/wiki/Rules_of_Acquisition&lt;/id>; &lt;更新>;2023-06-24T10:55： 29.826988Z&lt;/updated>; &lt;link href=&quot;https://memory-alpha.fandom.com/wiki/Rules_of_Acquisition&quot;/>; &lt;author>; &lt;name>;_Microft&lt;/name>; &lt;uri>;https://news.ycombinator .com/user?id=_Microft&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.wikia.nocookie.net/memoryalpha/images/6/6f/Ferengi_Rules_of_Acquisition %2C_False_profits.jpg/revision/latest/scale-to-width-down/180?cb=20080315104638&amp;path-prefix=en&quot; style=&quot;宽度：220px；高度：186px；&quot; />;&lt;br />;获取规则是所有佛伦吉社会赖以生存的神圣戒律。它们最初是由第一位 Grand Nagus Gint 编写的。 &lt;a href=&quot;https://hackernews.betacat.io/#ferengi-rules-of-acquisition&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=36449957&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;终于得到了二进制补码&lt;/stitle>; &lt;id>;https://neugierig.org/software/blog/2023/06/twos-complement.html&lt;/id>; &lt;updated>;2023- 06-24T06:55:29.827377Z&lt;/更新>; &lt;link href=&quot;https://neugierig.org/software/blog/2023/06/twos-complement.html&quot;/>; &lt;作者>; &lt;名称>;thepbone&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=thepbone&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://neugierig.org/software /blog/2023/06/unsigned.png&quot; style=&quot;宽度：220px；高度：221px；&quot; />;&lt;br />;二进制补码是计算机表示负数的一种方式。选择它是为了让数学计算出来。即使跨越负/正边界，相同的旋转规则也适用。 &lt;a href=&quot;https://hackernews.betacat.io/#finally-getting-two-s-complement&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36451907&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Sturddlefish&lt;/stitle>; &lt;id>;https://en.wikipedia.org/wiki/Sturddlefish&lt;/id>; &lt;更新>;2023-06-24T07:55:29.828551Z&lt; /updated>; &lt;link href=&quot;https://en.wikipedia.org/wiki/Sturddlefish&quot;/>; &lt;作者>; &lt;name>;isp&lt;/name>; &lt;uri>;https://news.ycombinator.com/user? id=isp&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Sturddlefish.png/220px- Sturddlefish.png&quot; style=&quot;宽度：220px；高度：324px；&quot; />;&lt;br />;&amp;#34;俄罗斯鲟鱼 (Acipenser gueldenstaedtii, Brandt 和 Ratzeberg, 1833) 与美国白鲟 (Polyodon spathula, Walbaum 1792) 的杂交及其后代的评估&amp;#34; &lt;a href=&quot;https://hackernews.betacat.io/#sturddlefish&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id= 36445690&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot; text&quot;>;一个基于网络的开源抽认卡学习系统&lt;/stitle>; &lt;id>;https://github.com/hwgilbert16/scholarsome&lt;/id>; &lt;updated>;2023-06-24T02:55:29.828970Z&lt;/updated >; &lt;link href=&quot;https://github.com/hwgilbert16/scholarsome&quot;/>; &lt;作者>; &lt;name>;hwgilbert16&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=hwgilbert16&lt; /uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://camo.githubusercontent.com/7746423417e239bc27ee7a621ebe07cdde3faa2e2ecaa1ad9eed673b7bdfa53d/68747470733a2f2f692e696d6775722e6 36f6d2f4d7368544f614c2e706e67”样式=“宽度：220像素；高度：114像素；” />;&lt;br />;Scholarsome 是一个开源学习系统，旨在成为任何学习工作流程的直接替代品。它提供了核心功能，例如用于练习记忆术语和定义的抽认卡，并通过在本地保存用户数据来优先考虑数据安全。 &lt;a href=&quot;https://hackernews.betacat.io/#an-open-source-web-based-flashcard-stuying-system&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36454783&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;制作者的日程、管理者的日程（2009）&lt;/stitle>; &lt;id>;http://www.paulgraham.com/makersschedule.html&lt;/id>; &lt;更新>;2023-06-24T05:55:29.829382Z&lt;/更新>; &lt;link href=&quot;http://www.paulgraham.com/makersschedule.html&quot;/>; &lt;作者>; &lt;名称>;mad2021 &lt;/名称>; &lt;uri >;https://news.ycombinator.com/user?id=mad2021&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;程序员不喜欢开会，因为他们的日程安排与其他人不同。有两种类型的时间表：经理的时间表，分为一小时的间隔，以及制造商的时间表，更喜欢半天或更长的单位。会议会打乱创客的日程安排，并对生产力产生连锁反应。 &lt;a href=&quot;https://hackernews.betacat.io/#maker-s-schedule-manager-s-schedule-2009&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=36455843&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;蜜蜂大脑的进化&lt;/stitle>; &lt;id>;https://www.u-tokyo.ac.jp/focus/en/press/z0508_00289。 html&lt;/id>; &lt;更新>;2023-06-24T08:55:29.832145Z&lt;/更新>; &lt;link href=&quot;https://www.u-tokyo.ac.jp/focus/en/press/z0508_00289.html &quot;/>; &lt;author>; &lt;name>;rustoo&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=rustoo&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.u-tokyo.ac.jp/content/400214044.jpg&quot; style=&quot;宽度：220px；高度：147px；&quot; />;&lt;br />;研究人员提出了一种膜翅目昆虫高级大脑功能和行为进化的新模型。他们发现蜜蜂大脑中的三种不同的、专门的凯尼恩细胞亚型似乎是从单一的、多功能的凯尼恩细胞亚型祖先进化而来的。 &lt;a href=&quot;https://hackernews.betacat.io/#the-evolution-of-honey-bee-brains&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36451924&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;通过更好地使用数据缓存让您的程序运行得更快（2020）&lt;/stitle>; &lt;id>;https://johnnysswlab.com/make-your-programs-run-使用数据缓存更快更好&lt;/id>; &lt;更新>;2023-06-24T01:55:29.832755Z&lt;/更新>; &lt;link href=&quot;https://johnnysswlab.com/make- your-programs-run-faster-by-better-using-the-data-cache/&quot;/>; &lt;author>; &lt;name>;eatonphil&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id =eatonphil&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;开发人员经常尝试通过创建复杂性较低的新算法来提高程序性能。然而，当这不可能时，可以使用低级优化来挤出更多性能。其中一种优化是更好地利用数据高速缓冲存储器。 &lt;a href=&quot;https://hackernews.betacat.io/#make-your-programs-run-faster-by-better-using-the-data-cache-2020&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36453790&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;为什么成千上万的棋盘游戏被埋在曼凯托之下&lt;/stitle>; &lt;id>;https://www.startribune.com /anti-monopoly-mankato-landfill-board-game-history/600279625/&lt;/id>; &lt;更新>;2023-06-24T02:55:29.833280Z&lt;/更新>; &lt;link href=&quot;https://www.startribune .com/anti-monopoly-mankato-landfill-board-game-history/600279625/&quot;/>; &lt;作者>; &lt;名称>;PaulHoule&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id= PaulHoule&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://chorus.stimg.co/24698331/136_06042013_210001181a.jpg?fit=crop&amp;auto=format,compress&amp;cs=tinysrgb&amp;dpr=2&amp;crop= faces&amp;w=525&quot; style=&quot;宽度：220px；高度：250px；&quot; />;&lt;br />;在明尼苏达州南部的某个地方，埋藏着大约 40,000 种棋盘游戏的残余物，这些棋盘游戏曾经作为大卖大富翁的反体制替代品而被创造和销售。 《反垄断》游戏在曼凯托制作，在 20 世纪 70 年代中期美国通货膨胀猖獗和制度不信任的背景下取得了成功。 &lt;a href=&quot;https://hackernews.betacat.io/#why-thousands-of-board-games-are-buried-beneath-mankato&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36454824&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;历史就是一件又一件该死的事情&lt;/stitle>; &lt;id>;https://collabfund.com/blog/how-this-all-发生/&lt;/id>; &lt;更新>;2023-06-24T05:55:29.833839Z&lt;/更新>; &lt;link href=&quot;https://collabfund.com/blog/how-this-all-happened/&quot;/>; &lt;作者>; &lt;name>;prakhar897&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=prakhar897&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https ://collabfund.com/uploads/pasted%20image%200.png&quot; style=&quot;宽度：220px；高度：154px；&quot; />;&lt;br />;这是一个关于二战结束以来美国经济发生变化的短篇故事。事情非常不确定，然后非常好，然后很糟糕，然后非常好，然后非常糟糕，现在我们就到了这里。有一个叙述将所有这些事件联系在一起。 &lt;a href=&quot;https://hackernews.betacat.io/#history-is-just-one-damn-thing-after-another&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36455697&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;如何通过语义压缩轻松编写优秀的代码&lt;/stitle>; &lt;id>;https://caseymuratori.com/blog_0015&lt;/id>; &lt;updated>;2023 -06-24T05:55:29.834383Z&lt;/更新>; &lt;link href=&quot;https://caseymuratori.com/blog_0015&quot;/>; &lt;作者>; &lt;name>;noob_eng&lt;/​​name>; &lt;uri>;https://news. ycombinator.com/user?id=noob_eng&lt;/​​uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://caseymuratori.com/r/instagram_icon_a4a8fb92af3b8562.png&quot; style=&quot;width: 220px ；高度：220px；&quot; />;&lt;br />;我们都知道如何用 C++ 编程，不是吗？我的意思是，我们都读过由一群大胡子家伙编写的一系列精彩书籍，正是他们首先定义了该语言，因此我们都学会了编写 C++ 代码来解决实际问题的最佳方法。首先，你看看现实世界的问题 - 比如说，一个工资系统 - 你会发现它有一些复数名词：“员工”，“经理”等。所以你需要做的第一件事就是为以下对象创建课程这些名词中的每一个。至少应该有一个员工类和一个经理类。但实际上，这两个人都只是人。所以我们可能需要一个名为“person”的基类，这样我们程序中那些不关心你是员工还是经理的东西就可以把你当作一个人来对待。这非常人性化，让其他班级感觉不像公司机器上的齿轮！不过，有一点问题。经理不也是员工吗？所以经理可能应该从员工继承，然后员工可以从人员继承。现在我们真的有所进展了！当然，我们实际上还没有考虑过如何编写任何代码，但是我们正在对所涉及的对象进行建模，一旦我们有了这些可靠的对象，代码就会自行编写。等等，开枪——你知道吗？我刚刚意识到，如果我们有承包商怎么办？我们肯定需要承包商类，因为他们不是雇员。承包商类可以从人员类继承，因为所有承包商都是人（不是吗？）。那将是非常甜蜜的。那么manager类继承自什么呢？如果它继承自雇员类，那么我们就不能有按合同制工作的经理。如果它继承自承包商类，那么我们就不能有专职经理。事实证明这是一个非常困难的编程问题，就像单纯形算法之类的！好的，我们可以让 manager 继承这两个类，然后不使用其中之一。但这还不够类型安全。这不是一些草率的 JavaScript 程序！但你知道吗？嘭！我在这里找到了解决方案：我们将管理器类模板化。我们在其基类上模板化管理器类，然后与管理器类一起使用的所有内容也都在其基类上模板化！这将是有史以来最好的薪资系统！一旦我指定了所有这些类和模板，我就会启动我的编辑器并开始处理 UML 图。如果我刚刚写的一切都是闹剧，那就太好了，但可悲的是，世界上实际上有很多程序员有这样的想法。我不是在谈论“实习生鲍勃”——我是在谈论各种程序员，包括那些讲学和写书的著名程序员。我也很遗憾地说，在我的生活中，我也曾经有过这样的想法。我在 18 岁的时候接触到了“面向对象编程”，直到 24 岁左右我才意识到这完全是一派胡言（这种认识在很大程度上要归功于我在 RAD Game 的工作）值得庆幸的是，工具从未陷入整个 OOP 噩梦）。但是，尽管事实上许多程序员都经历过这样的糟糕阶段，并最终就如何有效地编写好代码得出了明智的结论，但教育材料的情况似乎仍然绝大多数陷入“客观上糟糕”的境地。类别。我怀疑这与这样一个事实有关：一旦你知道如何去做，好的编程看起来就非常简单，不像一种花哨的数学技术，它保留了它的性感，让你想花时间发布它。因此，尽管我没有任何数据来支持这一点，但我强烈怀疑经验丰富的程序员很少花时间发布有关他们如何编程的文章，因为他们只是认为这没什么特别的。但他们应该！它可能并不特别，但它是必要的，如果优秀的程序员不开始发布有关如何进行良好编程的文章，我们将永远无法摆脱这个令人讨厌的地方，每个人都必须经历六年编写可怕的面向对象的过程在他们意识到自己在浪费时间之前就开始计划。因此，我想在下一组见证人文章中花一些认真的字数来讨论将代码放入计算机的纯粹机械过程，我真诚地希望其他有经验的程序员能够花一些时间做同样的事情。就我个人而言，我很想了解更多有关优秀程序员在坐下来编码时实际使用的技术的信息。首先，我将详细介绍我在 The Witness 的编辑器代码上所做的一组简单的代码转换。在接下来的几周里，我将从这个例子转向一些更大的例子，在这些例子中我从头开始编写了更多的文章，但在整个时间里我将只关注代码及其结构。我要介绍的内容没有任何奇特的算法或数学或任何东西，这只是纯粹的管道。在《The Witness》的内置编辑器中，有一个名为“运动面板”的 UI。它是一个浮动窗口，上面有一些按钮，用于对实体执行“旋转90度”等操作。最初它非常小，只有几个按钮，但是当我开始使用编辑器时，我添加了一些需要进入运动面板的功能。这将大大扩展其内容，这意味着我必须学习如何向 UI 中添加元素，这是我以前从未做过的。我检查了现有的代码，如下所示： 我在这里注意到的第一件事是，原来的程序员乔恩（Jon）做了非常好的工作，为我即将要做的事情取得成功奠定了基础。很多时候，您为这样简单的事情打开一些代码，然后发现它只是一堆不必要的结构和间接性。相反，在这里，我们发现发生了一系列极其简单的事情，读起来就像指导人们绘制 UI 面板一样：“首先，弄清楚标题栏应该放在哪里。然后，绘制标题栏。现在，在其下方绘制“自动捕捉”按钮。如果按下，则执行自动捕捉...”这正是编程应该进行的方式。我怀疑大多数人都可以阅读这段代码并知道它在做什么，并且可能凭直觉知道如何添加更多按钮，而无需阅读除此摘录之外的任何内容。然而，尽管代码很好，但它显然不是为处理大量 UI 而设置的，因为所有布局工作仍然是手动在线完成的。这在上面的代码片段中有点不方便，但一旦考虑更复杂的布局，就会变得更加繁重，就像 UI 的这一部分有四个单独的按钮出现在同一行上：所以，在我开始添加大量新按钮之前，我我已经觉得我应该花一点时间研究底层代码，以便更轻松地添加新内容。为什么我会有这样的感觉？我怎么知道“更简单”在这种情况下意味着什么？我认为编程本质上有两个部分：弄清楚处理器实际上需要做什么才能完成某件事，然后找出用我正在使用的语言表达它的最有效方法。越来越多地，程序员实际花时间在后者上：将所有这些算法和所有数学整理成一个连贯的整体，而不会在自身重量下崩溃。因此，任何有经验的优秀程序员都必须想出某种方法（即使只是凭直觉）来思考高效编程意味着什么。 “高效”不仅仅意味着代码得到了优化。相反，它意味着代码的开发是优化的 - 代码的结构方式可以最大限度地减少键入代码、使其工作、修改它和调试它所需的人力量，以使其能够可发货。我喜欢尽可能全面地考虑效率。如果您从整体上看待一段代码的开发过程，您将不会忽视任何隐藏成本。考虑到代码使用场所所需的一定水平的性能和质量，从其开始到结束。 &lt;a href=&quot;https://hackernews.betacat.io/#how-to-write-good-code-easily-with-semantic-compression&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36455794&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;采用 Apache NuttX 实时操作系统的 64 位 RISC-V&lt;/stitle>; &lt;id>;https://lupyuen.codeberg.page/ articles/riscv.html&lt;/id>; &lt;更新>;2023-06-23T23:55:29.834940Z&lt;/更新>; &lt;link href=&quot;https://lupyuen.codeberg.page/articles/riscv.html&quot;/>; &lt;作者>; &lt;name>;lupyuen&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=lupyuen&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https ://lupyuen.codeberg.page/images/riscv-title.png&quot; style=&quot;宽度：220px；高度：202px；&quot; />;&lt;br />;Apache NuttX 是一个实时操作系统 (RTOS)，可以在从 8 位到 64 位的多种设备上运行。 NuttX 的工作方式就像 Linux 的微型版本，因此命令看起来很熟悉。 &lt;a href=&quot;https://hackernews.betacat.io/#64-bit-risc-v-with-apache-nuttx-real-time-operating-system&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=36453810&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;普京对历史的改写借鉴了苏联悠久的神话传统（2022）&lt;/stitle>; &lt;id>;https:// www.smithsonianmag.com/history/vladimir-putins-rewriting-of-history-draws-on-a-long-tradition-of-soviet-myth-making-180979724/&lt;/id>;&lt;更新>;2023-06-24T12 ：55：29.835456Z &lt;/更新>; &lt;link href =“https://www.smithsonianmag.com/history/vladimir-putins-rewriting-of-history-draws-on-a-long-tradition-of-soviet- Myth-making-180979724/&quot;/>; &lt;作者>; &lt;名称>;rntn&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=rntn&lt;/uri>; &lt;/作者>; &lt;内容类型= &quot;html&quot;>;&lt;img src=&quot;https://th-thumbnailer.cdn-si-edu.com/UPZe_fZJsXiJdVnOH5TMEsGPNXw=/fit-in/1072x0/filters:focal(512x695:513x696)/https://tf-cmsv2 -smithsonianmag-media.s3.amazonaws.com/filer_public/24/7a/247a4491-a3c0-441b-9d96-497b91f6c1db/vladimir_lenin.jpeg&quot; style=&quot;width: 220px; height: 299px;&quot; />;&lt;br />;历史总是容易出现不诚实和伪造的情况。从不可靠的目击者叙述到故意造假，历史的记录常常是不准确和有偏见的。列宁和斯大林领导下的苏联，因重写历史以适应自己的叙述而臭名昭著。&lt;a href=&quot;https://hackernews.betacat.io/#putins-rewriting-of-history-draws-on-a-long-soviet-myth-making-传统-2022&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36458211&quot; target=&quot;_blank&quot;>;[评论]&lt;/a >;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;弗吉尼亚·伍尔夫日记评论 – 一本为年龄&lt;/stitle>; &lt;id>;https://www.theguardian.com/books/2023/jun/22/the-diary-of-virginia-woolf-review-a-book-for-the-ages&lt;/id >; &lt;更新>;2023-06-24T05:55:29.835870Z&lt;/更新>; &lt;link href=&quot;https://www.theguardian.com/books/2023/jun/22/the-diary-of-virginia-woolf -review-a-book-for-the-ages&quot;/>; &lt;作者>; &lt;名称>;Caiero&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Caiero&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://i.guim.co.uk/img/media/d57493967f1695d4455dcc6a0f63298fb0063012/0_2091_3395_2036/master/3395.jpg?width=465&amp;quality=85&amp;dpr=1&amp;s=none “样式=”宽度：220px;高度：132px;&quot; />;&lt;br />;弗吉尼亚·伍尔夫的日记是她一生的非凡记录，充满了痛苦和欢乐。它是一个生动观察个体的画廊，是对生命、爱情和死亡的反思，也是有史以来最伟大的日记。这本日记涵盖了伍尔夫 42 年的生活，深入了解了她的创作过程和个人经历。&lt;a href=&quot;https://hackernews.betacat.io/#the-diary-of-virginia-woolf -review-a-book-for-the-ages&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36443020&quot; target=&quot; _blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;一大堆影响 Linux 上 Firefox 用户的崩溃高峰&lt;/stitle>; &lt;id>;https://fosstodon.org/@gabrielesvelto/110592904713090347&lt;/id>; &lt;updated>;2023-06-24T04:55:29.836279Z&lt;/updated>; &lt;link href =&quot;https://fosstodon.org/@gabrielesvelto/110592904713090347&quot;/>; &lt;作者>; &lt;name>;sohkamyung&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=sohkamyung&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;周一早上，我们 (Mozilla) 检测到一次非常大的崩溃高峰，影响了 Linux 上的 #Firefox 用户，特别是在基于 Debian 的旧版本发行版上。事实证明，这是一个涉及#Linux 内核和#Google JavaScript 代码的有趣错误，所以让我告诉您相关信息。一个线程 🧵 https://bugzilla.mozilla.org/show_bug.cgi?id=1839669 1/6 &lt;a href=&quot;https://hackernews.betacat.io/#a-large-crash-spike-affecting-firefox -users-on-linux&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36455627&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;反对旅行的案例&lt;/stitle>; &lt;id>;https://www.newyorker.com/culture/the-weekend-essay/the-case-against-travel&lt;/id>; &lt;更新>;2023-06-24T10:55:29.836699Z&lt;/更新>; &lt; link href=&quot;https://www.newyorker.com/culture/the-weekend-essay/the-case-against-travel&quot;/>; &lt;作者>; &lt;name>;tkgally&lt;/name>; &lt;uri>;https:// news.ycombinator.com/user?id=tkgally&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://media.newyorker.com/photos/6495d60f69af7f864913e415/master/w_2560% 2Cc_limit/Callard_final.jpg&quot; style=&quot;宽度：220px；高度：126px；&quot; />;&lt;br />;“我喜欢旅行”这句话没有提供任何信息，因为几乎每个人都喜欢旅行。旅行通常被视为一种成就和一种变得有趣的方式，但 GK 切斯特顿和费尔南多·佩索阿等哲学家认为，旅行会缩小我们的思维范围，使我们与人性分离。旨在体验变化的旅游业往往最终会在没有真正理解或重视变化的情况下给他人带来变化。游客受运动驱动，通常优先考虑游览旅游景点，而不是沉浸在文化中。 &lt;a href=&quot;https://hackernews.betacat.io/#the-case-against-travel&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=36457427&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;铁燃料展现了它的勇气&lt;/stitle>; &lt;id>;https://spectrum.ieee.org/iron-fuel&lt;/id>; &lt;updated>;2023-06-23T14:55:29.837120 Z&lt;/updated>; &lt;link href=&quot;https://spectrum.ieee.org/iron-fuel&quot;/>; &lt;作者>; &lt;name>;mfiguiere&lt;/name>; &lt;uri>;https://news.ycombinator.com/ user?id=mfiguiere&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://spectrum.ieee.org/media-library/a-photograph-of-a-large-金属结构与人站立.jpg？id=34143005&amp;width=1200&amp;height=900&quot; style=&quot;宽度：220px；高度：165px；&quot; />;&lt;br />;荷兰一座名为 IRON+ 的 1 兆瓦发电厂将燃烧铁燃料来产生用于酿造啤酒的热量。铁燃料是一种具有潜在吸引力的清洁能源，易于储存和运输。 &lt;a href=&quot;https://hackernews.betacat.io/#iron-fuel-shows-its-mettle&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36447566&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Go 1.21 will (probably) download newer toolchains on demand by default&lt;/stitle>; &lt;id>;https://utcc.utoronto.ca/~cks/space/blog/programming/ Go121ToolchainDownloads&lt;/id>; &lt;updated>;2023-06-24T02:55:29.837932Z&lt;/updated>; &lt;link href=&quot;https://utcc.utoronto.ca/~cks/space/blog/programming/Go121ToolchainDownloads&quot;/>; &lt;author>; &lt;name>;todsacerdoti&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=todsacerdoti&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Starting in Go 1.21, Go will refuse to be optimistic when an older version of Go tries to do something with a module that requires a newer version of Go. Go guarantees that a module will always be processed with at least its minimum version of Go, and if this isn&#39;t possible, Go will stop with a clear error message. &lt;a href=&quot;https://hackernews.betacat.io/#go-1-21-will-probably-download-newer-toolchains-on-demand-by-default&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36454895&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;PDF Subpage Navigation&lt;/stitle>; &lt;id>;https://nibblestew.blogspot.com/2023/06/pdf-subpage-navigation.html&lt;/id>; &lt;updated>;2023-06-24T01:55:29.838381Z&lt;/updated>; &lt;link href=&quot;https://nibblestew.blogspot.com/2023/06/pdf-subpage-navigation.html&quot;/>; &lt;author>; &lt;name>;ingve&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ingve&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiNX9aSbr81YEYnyTOan3LX-2Qz0M2bVybxtBMsPEv4jzqb5fYSSp5aSq2AZeQRoknWRa5YwgL9n7yUujUi8yAOjQPAccjj5KSijgxg_1OeeRosvl9T4KldOZ7cAfRnAk33bjppyRRoSzooOOg0yYF6ureUfqeubDg3ys7VB8tZWIYQcuiAGZRyinULDEo/s320/subnav.png&quot; style=&quot;width: 220px; height: 97px;&quot; />;&lt;br />;A common presentation requirement is to have bullet points appear one by one as you click forward. Most PDF presentations achieve this by having multiple pages, one for each state. However, the PDF specification has a feature called subpage navigation that allows for bullet points to appear on the same page. This feature is not widely used, and the PDF viewer that supports it is Acrobat Reader. &lt;a href=&quot;https://hackernews.betacat.io/#pdf-subpage-navigation&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36454556&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Wearable device that records your voice for legal defense&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=36457266&lt;/id>; &lt;updated>;2023-06-24T10:55:29.838799Z&lt;/updated>; &lt;link href=&quot;https://news.ycombinator.com/item?id=36457266&quot;/>; &lt;author>; &lt;name>;MrBigplan&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=MrBigplan&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;It is possible to record your own voice during a conversation without the other person&#39;s consent. This can be done using a wearable device that uses a contact microphone. The recorded voice can be stored alongside time information in an unalterable medium, such as a blockchain, to provide evidence for legal defense. &lt;a href=&quot;https://hackernews.betacat.io/#wearable-device-that-records-your-voice-for-legal-defense&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36457266&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;An interactive guide to color and contrast&lt;/stitle>; &lt;id>;https://colorandcontrast.com/&lt;/id>; &lt;updated>;2023-06-23T22:55:29.839965Z&lt;/updated>; &lt;link href=&quot;https://colorandcontrast.com/&quot;/>; &lt;author>; &lt;name>;warrenm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=warrenm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Color &amp; Contrast is a comprehensive guide to color for user interface designers. &lt;a href=&quot;https://hackernews.betacat.io/#an-interactive-guide-to-color-and-contrast&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36449072&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;