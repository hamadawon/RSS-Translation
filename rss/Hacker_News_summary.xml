<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2024-06-24T10:00:36.868689Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;美国检察官建议司法部对波音提出刑事指控&lt;/stitle>; &lt;id>;https://www.voanews.com/a/us-prosecutors-recommend-justice-department-criminally- charge-boeing-as-deadline-looms/7667194.html&lt;/id>; &lt;更新>;2024-06-24T07:00:09.072279Z&lt;/更新>; &lt;link href=&quot;https://www.voanews.com/a /us-prosecutors-recommend-justice-department-criminally-charge-boeing-as-deadline-looms/7667194.html&quot;/>; &lt;author>; &lt;name>;elsewhen&lt;/name>; &lt;uri>;https://news.ycombinator .com/user?id=elsewhen&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://gdb.voanews.com/01000000-c0a8-0242-f964-08dc38a94a5e_w250_r1_s.jpg “样式=”宽度：220px;高度：125px；&quot; />;&lt;br />;美国检察官建议对波音公司提起刑事指控，罪名是其违反了与两起致命坠机事件有关的 2021 年和解协议，而司法部必须在 7 月 7 日之前决定是否起诉。潜在的指控可能超出最初的欺诈共谋指控，波音可能面临经济处罚、监察，甚至认罪，这可能会影响其政府合同。 Justice-department-criminally-charge-boeing&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40773151&quot; target=&quot;_blank&quot;>; [comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;驱动的微型芯片蒙特利尔地铁票&lt;/stitle>; &lt;id>;http://www.righto.com/2024/06/montreal-mifare-ultralight-nfc.html&lt;/id>; &lt;updated>;2024-06-23T18:00:09.074175Z &lt;/更新>; &lt;link href=&quot;http://www.righto.com/2024/06/montreal-mifare-ultralight-nfc.html&quot;/>; &lt;作者>; &lt;名称>;todsacerdoti &lt;/名称>; &lt;uri>;https ://news.ycombinator.com/user?id=todsacerdoti&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.righto.com/images/mifare-ultralight --images/die-raw-w500.jpg&quot; style=&quot;width: 220px; height: 188px;&quot; />;&lt;br />;蒙特利尔地铁票中使用的 MIFARE Ultralight EV1 芯片是一款低成本的一次性 NFC 芯片，它使用简单的协议与读卡器通信并将数据存储在其 EEPROM 中。该芯片是采用较旧的 180nm 工艺制造，价格低廉，每片价格为 9 美分，适合一次性使用。 chip-that-powers-montreal-subway-tickets&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40769001&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Cosmopolitan v3。 5.0&lt;/stitle>; &lt;id>;https://github.com/jart/cosmopolitan/releases/tag/3.5.0&lt;/id>; &lt;更新>;2024-06-24T07:00:09.074684Z&lt;/更新>; &lt;link href=&quot;https://github.com/jart/cosmopolitan/releases/tag/3.5.0&quot;/>; &lt;作者>; &lt;名称>;sgammon&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user ?id=sgammon&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/db59ef059c8a4ed9a4711a25abac334a22014748437208ace896f6a0607eebd1/jart/cosmopolitan/releases/tag/3.5.0&quot;样式=“宽度：220px； height: 110px;&quot; />;&lt;br />;Cosmopolitan Libc 使 C 成为一次构建、无需解释器或虚拟机即可在任何地方运行的语言。它重新配置了 GCC 和 Clang，以输出 POSIX 认可的格式，可以在多个平台上本机运行，具有良好的性能&lt;a href=&quot;https://hackernews.betacat.io/#cosmopolitan-v3-5-0&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=40773139&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;你现在可以用 Lua 编写 React&lt;/stitle>; &lt;id>;https://github.com/jsdotlua/react-lua&lt;/id>; &lt;updated>;2024 -06-24T03:00:09.075174Z&lt;/updated>; &lt;link href=&quot;https://github.com/jsdotlua/react-lua&quot;/>; &lt;author>; &lt;name>;bundie&lt;/name>; &lt;uri>;https: //news.ycombinator.com/user?id=bundie&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/jsdotlua/branding/main/ Logo.png&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;React Lua 是 ReactJS 从 JavaScript 到 Lua 的翻译，旨在提高性能和正确性，大多数上游 ReactJS 建议适用模语言差异。该项目是 roblox/react-lua 的分支，旨在成为 Lua 中 React 的首选，重点是与 Roact 的兼容性并解决 Lua 特定的问题。 -react-in-lua&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40739187&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我正在使用人工智能在外面脱帽我了解纽约人的窗口&lt;/stitle>; &lt;id>;https://dropofahat.zone/&lt;/id>; &lt;updated>;2024-06-23T14:00:09.076156Z&lt;/updated>; &lt;link href=&quot;https:// dropofahat.zone/&quot;/>; &lt;author>; &lt;name>;jimhi&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=jimhi&lt;/uri>; &lt;/author>; &lt;content type=&quot;html &quot;>;&lt;img src=&quot;https://dropofahat.zone/static/dropofahat/hat/ai3.2089d32ec65c.JPG&quot; style=&quot;宽度：220px; height: 165px;&quot; />;&lt;br />;橱窗商店 DropofaHat Zone 的创建者分享了他们使用 Raspberry Pi、Adafruit 步进电机和 Roboflow 开发人工智能驱动的脱帽系统的历程。该系统使用物体检测来识别窗下的行人，并在 5 分钟时间内将帽子扔到他们的头上。 drop-hats-outside-my-window-onto-new-yorkers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40767459&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;LINQPad – .NET 程序员的游乐场&lt;/stitle>; &lt;id>;https://www.linqpad.net/&lt;/id>; &lt;更新>;2024-06-23T21:00:09.076656Z&lt;/更新>; &lt;link href= “https://www.linqpad.net/”/>; &lt;作者>; &lt;名称>;wofo &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=wofo&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.linqpad.net/images/thebigdump.png?6&quot; style=&quot;width: 220px; height: 164px;&quot; />;&lt;br />;LINQPad是一个查询工具，允许用户在不安装客户端软件的情况下查询各种数据库和数据源，具有缓存、性能优势以及图表和调试等高级功能。它还包括一系列用于执行基准测试、正则表达式评估和 Excel 文件生成等任务的工具，以及全面的教程和参考指南 &lt;a href=&quot;https://hackernews.betacat.io/#linqpad-the-net-programmer- s-playground&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40770171&quot; target=&quot;_blank&quot;>;[评论]&lt;/a >;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;本杰明·索普：翻译了几乎所有古英语的人文本&lt;/stitle>; &lt;id>;https://thijsporck.com/2016/04/08/benjamin-thorpe-the-man-who-translated-almost-all-old-english-texts/&lt;/id>; &lt;更新>;2024-06-23T23:00:09.077627Z&lt;/更新>; &lt;link href=&quot;https://thijsporck.com/2016/04/08/benjamin-thorpe-the-man-who-translated-almost-all- old-english-texts/&quot;/>; &lt;author>; &lt;name>;stareatgoats&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=stareatgoats&lt;/uri>; &lt;/author>; &lt;content type= &quot;html&quot;>;&lt;img src=&quot;https://thijsporck.com/wp-content/uploads/2016/04/thorpeblog1.jpg?w=712&quot; style=&quot;width: 220px; height: 102px;&quot; />;&lt;br />;本杰明·索普是一位学者，出版了许多古英语文本的版本和翻译，为他赢得了“第一位专业盎格鲁撒克逊主义者”的美誉。尽管索普后来的重印中出现了一些错误，他的著作普遍享有良好的声誉，并为盎格鲁撒克逊研究的发展留下了持久的印记。几乎所有旧英语文本&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40758451&quot; target=&quot;_blank&quot;>; [评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Llama.ttf: A字体，也是LLM&lt;/stitle>; &lt;id>;https://fuglede.github.io/llama.ttf/&lt;/id>; &lt;updated>;2024-06-23T13:00:09.078121Z&lt;/updated>; &lt;link href=&quot;https://fuglede.github.io/llama.ttf/&quot;/>; &lt;作者>; &lt;名称>;fuglede_&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=fuglede_&lt; /uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Llama.ttf 是一个字体文件，还包含大型语言模型和推理引擎，允许用户在基于 Harfbuzz 的应用程序中本地运行文本生成。通过使用该字体，用户可以在不依赖供应商实现的情况下生成文本，甚至可以与他们的字体聊天。 &lt;a href=&quot;https://hackernews.betacat.io/#llama-ttf-a-font-which-is-also-an-llm&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=40766791&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;委员会对苹果展开额外 DMA 调查&lt;/stitle>; &lt;id>;https://ec.europa.eu/commission/presscorner/detail/en /ip_24_3433&lt;/id>; &lt;更新>;2024-06-24T09:00:09.079091Z&lt;/更新>; &lt;link href=&quot;https://ec.europa.eu/commission/presscorner/detail/en/ip_24_3433&quot;/>; &lt;作者>; &lt;名称>;jeroenhd &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=jeroenhd&lt;/uri>; &lt;/作者>; &lt;content type =“html”>;&lt;img src =“ https://ec.europa.eu/commission/presscorner/assets/framework/images/logo/ec_logo.png&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;欧盟委员会已通知苹果公司，其应用程序商店规则违反了《数字市场法》，阻止应用程序开发商将客户引导至其他渠道，并对苹果公司针对开发商的新合同条款展开了新的调查。委员会将调查苹果公司的新要求，包括其“核心技术费”是否符合 DMA，以及是否……&lt;a href=&quot;https://hackernews.betacat.io/#commission-opens-additional-dma-针对苹果的调查&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40773806&quot; target=&quot;_blank&quot;>;[评论]&lt; /a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Y 组合器法典 (2021)&lt;/stitle >; &lt;id>;https://phoe.github.io/codex.html&lt;/id>; &lt;更新>;2024-06-23T21:00:09.079584Z&lt;/更新>; &lt;link href=&quot;https://phoe.github .io/codex.html&quot;/>; &lt;作者>; &lt;名称>;082349872349872 &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=082349872349872&lt;/uri>; &lt;/作者>; &lt;内容类型= &quot;html&quot;>;&lt;img src=&quot;https://phoe.github.io/img/photo1-min.jpg&quot; style=&quot;宽度：220px；高度：165px；&quot; />;&lt;br />;该艺术品尺寸为 42cm x 2.4m，带有白边，使用各种工具和材料创作。它将作为印刷品出售或在 2021 年欧洲 Lisp 研讨会上拍卖，所得收益将捐赠给 Lisp 相关组织。 &lt;a href=&quot;https://hackernews.betacat.io/#y-combinator-codex-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=40769759&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;Arm64EC – 在同一进程中运行 x86_64 和 Arm 代码&lt;/stitle>; &lt;id>;https://learn.microsoft.com/en-us/windows/arm/arm64ec&lt;/id>; &lt;更新>;2024-06-23T21:00:09.080056Z&lt;/更新>; &lt;link href=&quot;https://learn.microsoft.com/en-us/windows/arm/arm64ec&quot;/>; &lt;作者>; &lt;名称>; heinrich5991&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=heinrich5991&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://learn. microsoft.com/en-us/windows/arm/images/arm64ec-incremental-update.png&quot; style=&quot;宽度：220px 高度：110px；&quot; />;&lt;br />;Arm64EC 是适用于 Windows 11 的新应用程序二进制接口，可在 Arm 驱动的设备上实现本机速度和性能，从而允许开发人员构建新的本机应用程序或过渡现有的 x64 应用程序。它保证了与 x64 代码的互操作性，并允许代码从模拟到本机的增量转换，允许开发人员优先考虑 CPU 密集程度最高的依赖项...... &lt;a href=&quot;https://hackernews.betacat.io/#arm64ec-run -x86-64-and-arm-code-in-the-same-process&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id =40757717&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type= “text&quot;>;形式化方法：只是良好的工程实践？&lt;/stitle>; &lt;id>;https://brooker.co.za/blog/2024/04/17/formal.html&lt;/id>; &lt;updated>;2024-06 -23T23:00:09.080530Z&lt;/updated>; &lt;link href=&quot;https://brooker.co.za/blog/2024/04/17/formal.html&quot;/>; &lt;author>; &lt;name>;ot&lt;/name >; &lt;uri>;https://news.ycombinator.com/user?id=ot&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;作者认为形式化方法对于良好的软件工程、减少返工和变革成本，以及提高速度和效率。它们强调了大规模复杂系统中形式设计的价值，以及考虑需求过程和正在开发的软件类型的重要性。 &lt;a href=&quot;https://hackernews.betacat.io/#formal-methods-just-good-engineering-practice&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=40753989&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;使用语义熵检测大语言模型中的幻觉&lt;/stitle>; &lt;id>;https://www.nature.com/articles/s41586-024-07421-0&lt;/stitle>; &lt;id>;https://www.nature.com/articles/s41586-024-07421-0&lt;/ id>; &lt;更新>;2024-06-23T21:00:09.081490Z&lt;/更新>; &lt;link href=&quot;https://www.nature.com/articles/s41586-024-07421-0&quot;/>; &lt;作者>; &lt;名称>;Tomte&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Tomte&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// media.springernature.com/w215h120/springer-static/image/art%3A10.1038%2Fs41562-024-01882-z/MediaObjects/41562_2024_1882_Fig1_HTML.png&quot; style=&quot;宽度：220px；高度：123px；&quot; />;&lt;br />;作者提出了一种称为语义熵的方法来检测语言模型中的混淆，这些混淆是任意且不正确的生成。他们证明，语义熵可以用来预测模型的准确性，并通过在模型不确定时拒绝回答问题来提高模型的准确性，并且还可以用来为用户提供一种方法来了解模型生成何时可能不可靠。 &lt;a href=&quot;https://hackernews.betacat.io/#detecting-hallucinations-in-large-language-models-using-semantic-entropy&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=40769496&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;从第一原则推导依赖类型 OOP&lt;/stitle>; &lt;id>;https://arxiv.org/abs/2403.06707&lt;/id>; &lt;更新>;2024-06-23T20:00:09.082450Z&lt;/更新>; &lt;link href=&quot;https://arxiv.org/abs/2403.06707&quot;/>; &lt;作者>; &lt;name>;matt_d&lt;/name>; &lt;uri>;https ://news.ycombinator.com/user?id=matt_d&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://arxiv.org/static/browse/0.3.4 /images/arxiv-logo-fb.png&quot; style=&quot;宽度: 220px; 高度: 129px;&quot; />;&lt;br />;表达式问题凸显了使用新的生产者和消费者扩展类型的困难，并且依赖类型编程通常遵循函数模型。本文探索了依赖类型的面向对象编程，从使用对偶性的第一原理中派生出来，提供了具有双语言片段和保留转换的依赖类型演算。 &lt;a href=&quot;https://hackernews.betacat.io/#deriving-dependently-typed-oop-from-first-principles&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=40769867&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Neko：用于高阶谱元流模拟的便携式框架&lt;/stitle>; &lt;id>;https://github.com/ExtremeFLOW/neko&lt;/id>; &lt;更新>;2024-06-24T01:00:09.082922Z&lt;/更新>; &lt;link href=&quot;https://github.com/ExtremeFLOW/neko&quot;/>; &lt;作者>; &lt;name>;nateb2022&lt;/name>; &lt;uri>;https ://news.ycombinator.com/user?id=nateb2022&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://repository-images.githubusercontent.com/338607716/940eb6d2 -af35-442f-8ffe-726df542293a”样式=“宽度：220像素；高度：110像素；” />;&lt;br />;Neko是一个用现代Fortran编写的高阶谱元流模拟的便携式框架，支持各种硬件后端并采用面向对象的方法。要构建该项目，您需要 Fortran 编译器、MPI、JSON-Fortran 和 BLAS/lapack，以及包括 gslib 和 ParMETIS 在内的可选依赖项。 &lt;a href=&quot;https://hackernews.betacat.io/#neko-portable-framework-for-high-order-spectral-element-flow-simulations&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=40771839&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：对草图着色的反馈&lt;/stitle>; &lt;id>;https://github.com/CHAITron/sketchdeco-code&lt;/ id>; &lt;更新>;2024-06-24T04:00:09.083433Z&lt;/更新>; &lt;link href=&quot;https://github.com/CHAITron/sketchdeco-code&quot;/>; &lt;作者>; &lt;名称>;pinakinathc&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=pinakinathc&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/ CHAITron/sketchdeco-code/main/inputs/example1/sketch.png&quot; style=&quot;宽度：220px 高度：221px;&quot; />;&lt;br />;SketchDeco 是一种无需培训的方法，无需提示即可为手绘草图和蒙版着色，需要 20 GB VRAM，并在 Nvidia RTX 4090 和 Google Colab A100 上进行了测试。输入结构包括 512x512 黑白草图、二进制蒙版和调色板，以及控制协调性和忠实度的 Tau 值。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-feedback-on-sketch-colourising&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=40758229&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;柏金包的经济学&lt;/stitle>; &lt;id>;https://www.wsj.com/style/fashion/hermes-birkin-bag-investment-031c215c&lt; /id>; &lt;更新>;2024-06-23T22:00:09.083892Z&lt;/更新>; &lt;link href=&quot;https://www.wsj.com/style/fashion/hermes-birkin-bag-investment-031c215c&quot;/ >; &lt;author>; &lt;name>;wallflower&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=wallflower&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;请启用JS并禁用任何广告拦截器&lt;a href=&quot;https://hackernews.betacat.io/#the-economics-of-the-birkin-handbag&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=40770358&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;从头开始编写 IR 并生存下来写一篇文章&lt;/stitle>; &lt;id>;https://farena.in/compilers/programming/writing-an -ir-from-scratch/&lt;/id>; &lt;更新>;2024-06-23T21:00:09.084367Z&lt;/更新>; &lt;link href=&quot;https://farena.in/compilers/programming/writing-an-ir -from-scratch/&quot;/>; &lt;作者>; &lt;名称>;matt_d&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=matt_d&lt;/uri>; &lt;/作者>; &lt;内容类型=” html&quot;>;&lt;img src=&quot;https://farena.in/assets/images/kunai_ir/acdi.jpg&quot; style=&quot;width: 220px; height: 292px;&quot; />;&lt;br />;作者设计并实现了一个名为 MjolnIR 的中间表示（IR），用于分析 Dalvik 字节码，其中包括控制流图（CFG）表示以及用于操作寄存器、内存和数据的各种指令。作者还实现了图算法，包括支配者和后支配者计算、直接支配者和支配边界，以... &lt;a href=&quot;https://hackernews.betacat.io/#writing-an-ir- from-scratch-and-survive-to-write-a-post&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40770430&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;思想合成器&lt;/stitle>; &lt;id>;https://thesephist.com/posts/synth/&lt;/id>; &lt;更新>;2024-06-24T05:00:09.084839Z&lt;/更新>; &lt;link href=&quot;https ://thesephist.com/posts/synth/&quot;/>; &lt;author>; &lt;name>;feross&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=feross&lt;/uri>; &lt;/author >; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://thesephist.com/img/prism-highlighter.png&quot; style=&quot;width: 220px; height: 176px;&quot; />;&lt;br />;将声音和音乐理解为数学对象，使得合成器的诞生成为可能，从而彻底改变了音乐制作并催生了新的声音和流派。同样，将写作理解为数学对象可以启用新的工具和用于编写的界面，例如语义热图和功能图标&lt;a href=&quot;https://hackernews.betacat.io/#synthesizer-for-thought&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=40772633&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;将罗马之光带入生活&lt;/stitle>; &lt;id>;https://www.journals.uchicago.edu/doi/10.1086/731029&lt;/ id>; &lt;更新>;2024-06-23T23:00:09.085301Z&lt;/更新>; &lt;link href=&quot;https://www.journals.uchicago.edu/doi/10.1086/731029&quot;/>; &lt;作者>; &lt;名称>;胡克&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Hooke&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Nuova Luce da Pompei 展览探讨了人工的作用古罗马日常生活中的灯光，展示了来自庞贝和罗马的 180 个罕见的青铜灯和雕像。该展览展示了照明装置的效果和意义，鼓励参观者手持复制品并虚拟点亮灯具来体验其作用。 &lt;a href=&quot;https://hackernews.betacat.io/#bringing-roman-light-to-life&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=40756154&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;“我们认为线粒体是细胞的处理器”（2022）&lt;/stitle>; &lt;id>;https://www.cell.com/action/showPdf?pii=S1550 -4131%2822%2900459-4&lt;/id>; &lt;更新>;2024-06-23T13:00:09.085776Z&lt;/更新>; &lt;link href=&quot;https://www.cell.com/action/showPdf?pii= S1550-4131%2822%2900459-4&quot;/>; &lt;作者>; &lt;名称>;breck&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=breck&lt;/uri>; &lt;/author>; &lt; content type=&quot;html&quot;>;www.cell.com 在继续操作之前需要检查您的连接的安全性。 &lt;a href=&quot;https://hackernews.betacat.io/#we-argue-that-mitochondria-are-the-processor-of-the-cell-2022&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=40766869&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;同源：可读且简洁的串联编程&lt;/stitle>; &lt;id>;https://cognate-lang.github.io/learn .html&lt;/id>; &lt;更新>;2024-06-23T22:00:09.086253Z&lt;/更新>; &lt;link href=&quot;https://cognate-lang.github.io/learn.html&quot;/>; &lt;作者>; &lt; name>;PaulHoule&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=PaulHoule&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;CognaC 是一种使用堆栈的编程语言基于语法，允许灵活简洁的代码。它具有函数、变量、控制流和列表等数据结构，重点是函数式编程和使用框的变异。 &lt;a href=&quot;https://hackernews.betacat.io/#cognate-read-and-concise-concatenative-programming&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=40741723&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Picolisp 铁路模拟&lt;/stitle>; &lt;id>;https://picolisp-explored.com/a-railroad-simulation-with-des&lt;/id>; &lt;更新>; 2024-06-23T15:00:09.087193Z&lt;/更新>; &lt;link href=&quot;https://picolisp-explored.com/a-railroad-simulation-with-des&quot;/>; &lt;作者>; &lt;名称>;todsacerdoti&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=todsacerdoti&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cdn.hashnode.com /res/hashnode/image/upload/v1715542067487/5b63063b-0cf4-470f-8822-2af30bdac866.gif?auto=format,compress&amp;gif-q=60&amp;format=webm&quot; style=&quot;宽度：220px；高度：236px；&quot; />;&lt;br />;本文讨论了使用 PicoLisp 中的离散事件仿真 (DES) 进行的铁路模型仿真，其中包括轨道网络和动态确定时刻表和运行的列车。模拟可以通过键盘输入进行控制，允许用户与布局和切换开关进行交互。 &lt;a href=&quot;https://hackernews.betacat.io/#picolisp-a-railroad-simulation&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=40767645&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;B 树比平衡二叉搜索树需要更少的比较&lt;/stitle>; &lt;id>;http://databasearchitects.blogspot.com/2024/06/b-trees-require-fewer-comparisons -than.html&lt;/id>; &lt;更新>;2024-06-23T17:00:09.087661Z&lt;/更新>; &lt;link href=&quot;http://databasearchitects.blogspot.com/2024/06/b-trees-require- less-comparisons-than.html&quot;/>; &lt;author>; &lt;name>;greghn&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=greghn&lt;/uri>; &lt;/author>; &lt;内容类型=&quot;html&quot;>;B 树的搜索操作下限为 log2 n 比较，这可以通过完美平衡的树来实现。对于较大的 k 值，B 树变得更加平衡，并且需要比 AVL 树更少的比较，并且比较次数随着 k 的增加而减少。 &lt;a href=&quot;https://hackernews.betacat.io/#b-trees-require-fewer-comparisons-than-balanced-binary-search-trees&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=40768418&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;