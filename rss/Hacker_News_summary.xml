<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-12-17T20:00:29.552008Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;AMD 的 CDNA 3 计算架构&lt;/stitle>; &lt;id>;https://chipsandcheese.com/2023/12/17/amds-cdna-3-compute-architecture/&lt;/id >; &lt;更新>;2023-12-17T18:59:30.242743Z&lt;/更新>; &lt;link href=&quot;https://chipsandcheese.com/2023/12/17/amds-cdna-3-compute-architecture/&quot;/>; &lt;作者>; &lt;名称>;ksec&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=ksec&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot; https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2023/12/amd_gpu_lines.jpg?resize=664%2C411&amp;ssl=1&quot; style=&quot;宽度：220px；高度：137px；&quot; />;&lt;br />;AMD 的 CDNA 3 计算架构带来了 AMD 所提供的一切，包括先进的封装技术、RDNA 系列的无限缓存，以及可提高吞吐量和利用率的重大世代改进。 MI300X 由 CDNA 3 提供支持，具有复杂的小芯片设置，共有 304 个计算单元和庞大的 HBM 设置，使其具有最佳&lt;a href=&quot;https://hackernews.betacat.io/#amd-s-cdna-3 -compute-architecture&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38675258&quot; target=&quot;_blank&quot;>;[评论]&lt;/ a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;大独裁者的最后演讲&lt;/stitle >; &lt;id>;https://www.charliechaplin.com/en/articles/29-the-final-speech-from-the-great-dictator-&lt;/id>; &lt;更新>;2023-12-17T15:59:30.244844 Z&lt;/updated>; &lt;link href=&quot;https://www.charliechaplin.com/en/articles/29-the-final-speech-from-the-great-dictator-&quot;/>; &lt;作者>; &lt;名称>;hypertexthero &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=hypertexthero&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://photo.charliechaplin .com/images/photos/0000/0225/gd_p_140_big.jpg&quot; style=&quot;宽度：220px；高度：166px；&quot; />;&lt;br />;本文是电影《大独裁者》中查理·卓别林演讲的摘要。卓别林在演讲中表达了他对一个人人互相帮助、和谐相处的世界的渴望。他批评贪婪及其对社会的负面影响。他强调人性、善良和温柔比机械和聪明更重要。 &lt;a href=&quot;https://hackernews.betacat.io/#the-final-speech-from-the-great-dictator&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=38673292&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;3M 几十年前就知道其化学物质有害，但没有告诉公众&lt;/stitle>; &lt;id>;https://minnesotareformer.com/2022/12/ 15/有毒的 3m-知道其化学物质在几十年前是有害的，但没有告诉公共政府/&lt;/id>; &lt;更新>;2023-12-17T19:33:30.245267Z&lt; /更新>; &lt;link href=&quot;https://minnesotareformer.com/2022/12/15/token-3m-knew-its-chemicals-were-harmful-decades-ago-but-didnt-tell-the-public-政府/&quot;/>; &lt;作者>; &lt;名称>;Jimmc414&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=Jimmc414&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>; &lt;img src=&quot;https://minnesotareformer.com/wp-content/uploads/2022/12/3M_008-1024x683.jpg&quot; style=&quot;宽度：220px；高度：147px；&quot; />;&lt;br />;3M 几十年前就知道其化学物质有害，但没有告诉公众。该公司忽视、推迟、最小化和掩盖对有毒化学品发出危险信号的研究。 &lt;a href=&quot;https://hackernews.betacat.io/#3m-knew-its-chemicals-were-harmful-decades-ago-but-didn-t-tell-the-public&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38675616&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Misra C++:2023 已发布&lt;/stitle>; &lt;id>;https://forum.misra.org .uk/thread-1668.html&lt;/id>; &lt;更新>;2023-12-17T16:59:30.245658Z&lt;/更新>; &lt;link href=&quot;https://forum.misra.org.uk/thread-1668. html&quot;/>; &lt;author>; &lt;name>;ksec&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ksec&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;MISRA已发布 MISRA C++ 新版本：MISRA C++:2023 在关键系统中使用 C++:17 的指南。它专门针对 ISO/IEC 14882:2017 定义的 2017 语言版本 (C++:17)。 &lt;a href=&quot;https://hackernews.betacat.io/#misra-c-2023-published&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=38674158&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;microsoft/promptbase：万物提示工程&lt;/stitle>; &lt;id>;https://github.com/microsoft/promptbase&lt;/id>; &lt;更新>;2023-12-17T16:59： 30.246033Z&lt;/updated>; &lt;link href=&quot;https://github.com/microsoft/promptbase&quot;/>; &lt;作者>; &lt;name>;CharlesW&lt;/name>; &lt;uri>;https://news.ycombinator.com/user ?id=CharlesW&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/microsoft/promptbase/main/images/medprompt_radar.png&quot; style=&quot;宽度：220 像素；高度：204 像素；” />;&lt;br />;Promptbase 是一个资源和示例脚本的集合，用于优化 GPT-4 等基础模型的性能。它包括动态小样本选择、自生成思维链和选择洗牌集成等策略，以实现专家级别的性能。 &lt;a href=&quot;https://hackernews.betacat.io/#microsoft-promptbase-all-things-prompt-engineering&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=38673954&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;约翰尼·卡什来自哪里&lt;/stitle>; &lt;id>;https://www.neh.gov/article/where-johnny-cash-came&lt;/id>; &lt;更新>;2023-12-17T15:59:30.246422Z&lt;/updated>; &lt;link href=&quot;https://www.neh.gov/article/where-johnny-cash-came&quot;/>; &lt;作者>; &lt;名称>;tintinnabula&lt; /name>; &lt;uri>;https://news.ycombinator.com/user?id=tintinnabula&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.neh. gov/sites/default/files/styles/large/public/2023-06/Summer_2023_webimages_12_cropped.jpg?itok=EWQl7WIT&quot; style=&quot;宽度：220px；高度：243px；&quot; />;&lt;br />;约翰尼·卡什，被称为“黑衣人”，出身卑微，在阿肯色三角洲长大。他成为一位传奇音乐家，以其标志性歌曲和对工人阶级的承诺而闻名。 &lt;a href=&quot;https://hackernews.betacat.io/#where-johnny-cash-came-from&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38665911&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;BrainGPT 将思想转化为文本&lt;/stitle>; &lt;id>;https://www.iflscience.com/new-mind-reading-braingpt-turns-thoughts-into-text-on -screen-72054&lt;/id>; &lt;更新>;2023-12-17T16:59:30.246817Z&lt;/更新>; &lt;link href=&quot;https://www.iflscience.com/new-mind-reading-braingpt-turns- ideas-into-text-on-screen-72054&quot;/>; &lt;作者>; &lt;名称>;11thEarlOfMar&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=11thEarlOfMar&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://assets.iflscience.com/assets/articleNo/72054/aImg/72811/braingpt-m.jpg&quot; style=&quot;宽度：220px；高度：147px ;” />;&lt;br />;悉尼科技大学的研究人员开发了一项突破性技术，可以将思想转化为屏幕上的文字。这项名为 DeWave 的技术使用脑电波作为输入，不需要大脑植入或使用 MRI 机器。 &lt;a href=&quot;https://hackernews.betacat.io/#braingpt-turns-thoughts-into-text&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38673854&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;地球上的每个人都是你的表弟（2014）&lt;/stitle>; &lt;id>;https://qz.com/557639/everyone-on-earth-is-actually-your-cousin &lt;/id>; &lt;更新>;2023-12-17T15:59:30.247196Z&lt;/更新>; &lt;link href=&quot;https://qz.com/557639/everyone-on-earth-is-actually-your-cousin&quot; />; &lt;author>; &lt;name>;bookofjoe&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=bookofjoe&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =&quot;https://i.kinja-img.com/image/upload/c_fill,h_900,q_60,w_1600/e405e106658bd85ee63240044d7cf695.jpg&quot; style=&quot;宽度：220px；高度：124px；&quot; />;&lt;br />;本文讨论了提出问题和了解家族史的重要性。它探讨了家谱的概念以及我们的家谱如何呈指数级扩展。它还解释了我们的表亲关系的程度和远亲的数量。 &lt;a href=&quot;https://hackernews.betacat.io/#everyone-on-earth-is-your-cousin-2014&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=38673608&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Intel 386 处理器内的两个有趣的 XOR 电路&lt;/stitle>; &lt;id>;https://www.righto.com/2023/12/386-xor- Circuits .html&lt;/id>; &lt;已更新>;2023-12-17T15:59:30.247566Z&lt;/已更新>; &lt;link href=&quot;https://www.righto.com/2023/12/386-xor- Circuits.html&quot; />; &lt;author>; &lt;name>;_Microft&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=_Microft&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =&quot;https://static.righto.com/images/386-xor/386-die-labeled-w600.jpg&quot; style=&quot;宽度：220px；高度：235px；&quot; />;&lt;br />;Intel 386 处理器使用两种不同的电路实现异或门：一种使用标准单元逻辑，另一种使用传输晶体管逻辑。标准单元异或门是通过将与非门与与或非门组合而成的，而传输晶体管异或电路使用晶体管作为开关将输入传递到输出。 &lt;a href=&quot;https://hackernews.betacat.io/#two-interesting-xor- Circuits-inside-the-intel-386-processor&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38666045&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Base32（或任何 Base2^n）到底如何工作？&lt;/stitle>; &lt;id>;https://ptrchm.com/posts/base32 -explained/&lt;/id>; &lt;更新>;2023-12-17T15:59:30.247933Z&lt;/更新>; &lt;link href=&quot;https://ptrchm.com/posts/base32-explained/&quot;/>; &lt;作者>; &lt; name>;pchm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=pchm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Base32 编码是一种表示数字或使用 2^n 位数字的字节。本文介绍了 Base32 编码如何在位级别工作以及它与其他 Base2^n 格式（例如 Base64）的关系。它还提供了将数字和任意数据编码为 Base32 的示例。 &lt;a href=&quot;https://hackernews.betacat.io/#how-does-base32-or-any-base2-n-work-exactly&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38673392&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Arch Linux 上的 ZFS 分析&lt;/stitle>; &lt;id>;https://www.binwang.me/2023-12-14-ZFS-Profiling -on-Arch-Linux.html&lt;/id>; &lt;更新>;2023-12-17T09:59:30.249091Z&lt;/更新>; &lt;link href=&quot;https://www.binwang.me/2023-12-14- ZFS-Profiling-on-Arch-Linux.html&quot;/>; &lt;作者>; &lt;名称>;wb14123&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=wb14123&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;我最近买了一个新的视频游戏，但发现 z_rd_int 进程几乎占用了我玩游戏时的所有 CPU 时间。为了仔细检查，我使用 iostat -x 1 来确认 iowait 非常低。所以磁盘IO不是瓶颈。从 OpenZFS 的 Github 问题来看，人们正在使用 perf 进行分析。一眼看上去就足够微不足道了。但是让 perf 显示 ZFS 的调试符号花了我很多时间。因此，在本文中，我将记录为 ZFS 启用调试符号的步骤，希望它可以帮助更多遇到困难的人做到这一点。 &lt;a href=&quot;https://hackernews.betacat.io/#zfs-profiling-on-arch-linux&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38660007&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;现代验证码的实证研究与评估&lt;/stitle>; &lt;id>;https://arxiv.org/abs/2307.12108&lt;/id>; &lt;updated>;2023-12-17T05: 59:30.249875Z&lt;/更新>; &lt;link href=&quot;https://arxiv.org/abs/2307.12108&quot;/>; &lt;作者>; &lt;name>;vincent_s&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=vincent_s&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.arxiv.org/static/browse/0.3.4/images/arxiv-logo -fb.png&quot; style=&quot;宽度：220px；高度：129px；&quot; />;&lt;br />;验证码用于防范机器人程序已有近二十年的历史。随着验证码变得越来越复杂，了解用户解决这些验证码需要多长时间以及人们如何看待它们非常重要。 &lt;a href=&quot;https://hackernews.betacat.io/#an-empirical-study-and-evaluation-of-modern-captchas&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=38670465&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;阿波罗综合症&lt;/stitle>; &lt;id>;https://www.teamtechnology.co.uk/tt/t-articl/apollo.htm&lt;/ id>; &lt;更新>;2023-12-17T06:59:30.250256Z&lt;/更新>; &lt;link href=&quot;https://www.teamtechnology.co.uk/tt/t-articl/apollo.htm&quot;/>; &lt;作者>; &lt;name>;saikatsg&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=saikatsg&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;阿波罗综合症是一种现象，由高能力个人组成的团队表现不佳。由具有敏锐分析头脑和高心智能力的人组成的团队经常会因为过度辩论、决策缺乏一致性和个人主义行为而陷入困境。这些团队中的成功领导者专注于设定目标和优先事项，以及塑造团队的努力。关键的教训是，聚集最聪明的人并不能保证最好的结果；团队角色的混合是必要的。 &lt;a href=&quot;https://hackernews.betacat.io/#the-apollo-syndrome&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=38670760&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;风险管理不是项目管理&lt;/stitle>; &lt;id>;https://mattrucker.com/risk-management-is-not-project-management/&lt;/id>; &lt;updated>;2023-12 -17T08：59：30.250631Z &lt;/更新>; &lt;link href =“https://mattrucker.com/risk-management-is-not-project-management/”/>; &lt;作者>; &lt;名称>; el0hel &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=el0hel&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://bear-images.sfo2.cdn .digitaloceanspaces.com/mattrucker-1702405976-0.webp&quot; style=&quot;宽度：220px；高度：158px；&quot; />;&lt;br />;项目规划中的一个常见情况是客户希望将某些任务的责任转移给第三方。然而，项目成功的最终责任在于客户。将风险管理与项目管理混淆会增加风险并导致项目失败。 &lt;a href=&quot;https://hackernews.betacat.io/#risk-management-is-not-project-management&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=38656007&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;动态翱翔&lt;/stitle>; &lt;id>;https://en.wikipedia.org/wiki/Dynamic_soaring&lt;/id>; &lt;updated>;2023-12-17T11:59: 30.251002Z&lt;/更新>; &lt;link href=&quot;https://en.wikipedia.org/wiki/Dynamic_soaring&quot;/>; &lt;作者>; &lt;名称>;KolmogorovComp&lt;/名称>; &lt;uri>;https://news.ycombinator.com /user?id=KolmogorovComp&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/35/Dynamic_Soaring_Animated_Diagram.gif&quot; 样式=“宽度：220像素；高度：126像素；” />;&lt;br />;动态翱翔是一种通过反复跨越不同速度的气团边界来获取能量的飞行技术。它主要由鸟类和无线电控制滑翔机的操作员使用。该技术涉及以闭环方式飞行，穿过相对运动的两个气团之间的剪切层，从而获得更高的速度。 &lt;a href=&quot;https://hackernews.betacat.io/#dynamic-soaring&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=38672224&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;酷刑法的起源：一个警示故事&lt;/stitle>; &lt;id>;https://daviddfriedman.substack.com/p/torture&lt;/id>; &lt;更新>;2023-12-17T06:59 ：30.251378Z&lt;/updated>; &lt;link href=&quot;https://daviddfriedman.substack.com/p/torture&quot;/>; &lt;作者>; &lt;name>;不幸灾乐祸&lt;/name>; &lt;uri>;https://news.ycombinator。 com/user?id=notgloating&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/f_auto,q_auto:best,fl_progressive:steep/ https%3A%2F%2Fdaviddfriedman.substack.com%2Ftwitter%2Fsubscribe-card.jpg%3Fv%3D-589948329%26version%3D9&quot; style=&quot;宽度：220px；高度：115px；&quot; />;&lt;br />;过去，人们用考验来判定有罪或无罪，相信上帝会揭示真相。然而，这种做法最终被放弃，取而代之的是实施高标准的证明。当这个标准没有达到时，酷刑法就被引入，允许被告通过酷刑逼供。 &lt;a href=&quot;https://hackernews.betacat.io/#the-origin-of-the-law-of-torture-a-cautionary-tale&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=38670866&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Hylomorphism&lt;/stitle>; &lt;id>;https://1000wordphilosophy.com/2023/12/04/hylomorphism/&lt;/id>; &lt;更新>;2023-12-17T12:59:30.251754Z&lt;/更新>; &lt;link href=&quot;https://1000wordphilosophy.com/2023/12/04/hylomorphism/&quot;/>; &lt;作者>; &lt;名称>;温德姆&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=wyndham&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://1000wordphilosophy.files.wordpress。 com/2023/12/table.jpg?w=656&amp;h=655&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;根据形质论，所有物质对象都由质料和形式组成。物质是指构成物体的材料或物质，而形式是使物体成为现实的组织原则。 &lt;a href=&quot;https://hackernews.betacat.io/#hylomorphism&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id= 38670845&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot; text&quot;>;GILead 中的 Balm：CPython 扩展的快速字符串构造&lt;/stitle>; &lt;id>;https://blog.vito.nyc/posts/gil-balm/&lt;/id>; &lt;updated>;2023-12-17T11:59 ：30.252137Z&lt;/updated>; &lt;link href=&quot;https://blog.vito.nyc/posts/gil-balm/&quot;/>; &lt;author>; &lt;name>;nickelpro&lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=nickelpro&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://blog.vito.nyc/posts/gil-balm/doctor_hud1d6a96ed8525c989752b6a768927fc4_71058_684x0_resize_q100_h2_box_2.webp “样式=”宽度：220px;高度：95px;“ />;&lt;br />;Python 的全局解释器锁 (GIL) 以及为字符串和字典等受祝福的类型构建 PyObjects 的昂贵过程可能是 Python 中的瓶颈。 GIL Balm&#39;ing 是一种技术，涉及调整本机 CPython 类型以在 GIL 上下文之外使用，从而优化操作并提高性能。 &lt;a href=&quot;https://hackernews.betacat.io/#balm-in-gilead-fast-string-construction-for-cpython-extensions&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38657847&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;离婚殖民地 (2015)&lt;/stitle>; &lt;id>;https://magazine.atavist.com/the-divorce-colony/&lt;/ id>; &lt;更新>;2023-12-17T12:59:30.252528Z&lt;/更新>; &lt;link href=&quot;https://magazine.atavist.com/the-divorce-colony/&quot;/>; &lt;作者>; &lt;名称>;daddy_drank &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=daddy_drank&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://magazine.atavist .com/wp-content/uploads/2015/11/mainimage14-1458768308-44-10-1024x894.jpg&quot; style=&quot;宽度：220px；高度：193px；&quot; />;&lt;br />;本文讨论了 19 世纪末南达科他州苏福尔斯离婚殖民地的兴起。由于苏福尔斯的离婚法宽松，只要求居住 90 天，寻求离婚的人，尤其是女性，纷纷涌入苏福尔斯。本文重点介绍了玛格丽特·劳拉·德斯图尔斯男爵夫人的经历，她前往苏福尔斯寻求&lt;a href=&quot;https://hackernews.betacat.io/#the-divorce-colony-2015&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38670850&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;一个奇怪的重复出现的生命周期问题&lt;/stitle>; &lt;id>;https://blog.dureuill.net /articles/recurring-lifetime/&lt;/id>; &lt;更新>;2023-12-17T10:59:30.252897Z&lt;/更新>; &lt;link href=&quot;https://blog.dureuill.net/articles/recurring-lifetime/&quot; />; &lt;author>; &lt;name>;irsagent&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=irsagent&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;命名很难。选择不当的类型和变量名称可能会导致未定义的行为，尤其是在提供 API 时。本文讨论了由于对 Cap&#39;n Proto 类型列表中数据所有权的错误假设而导致的反复出现的生命周期问题。 &lt;a href=&quot;https://hackernews.betacat.io/#a-curiously-recurring-lifetime-issue&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38666148&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;美国核聚变实验室进入新时代：一次又一次实现“点火”&lt;/stitle>; &lt;id>;https://www.nature.com/articles/d41586-023- 04045-8&lt;/id>; &lt;更新>;2023-12-17T15:59:30.253261Z&lt;/更新>; &lt;link href=&quot;https://www.nature.com/articles/d41586-023-04045-8&quot;/ >; &lt;author>; &lt;name>;goplayoutside&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=goplayoutside&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src= “https://media.nature.com/w767/magazine-assets/d41586-023-04045-8/d41586-023-04045-8_26532744.jpg”样式=“宽度：220像素；高度：147像素；” />;&lt;br />;美国国家点火装置 (NIF) 的科学家已经实现了点火，这是一种释放的能量多于消耗的能量多次的聚变反应。美国政府计划建立研究中心以进一步推进聚变科学。 &lt;a href=&quot;https://hackernews.betacat.io/#us-nuclear-fusion-lab-enters-new-era-achiving-ignition-over-and-over&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38673654&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;更多产品，更少产品经理&lt;/stitle>; &lt;id>;https://kitemaker.co/blog/more_product_fewer_pms&lt; /id>; &lt;更新>;2023-12-17T03:59:30.253624Z&lt;/更新>; &lt;link href=&quot;https://kitemaker.co/blog/more_product_fewer_pms&quot;/>; &lt;作者>; &lt;名称>;SigKill9&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=SigKill9&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://kitemaker.co/_next/image ?url=%2Fimages%2FprofilePictures%2Fsigurd.jpeg&amp;w=3840&amp;q=75&quot; style=&quot;宽度：220px；高度：207px；&quot; />;&lt;br />;关于产品团队中需要多少个产品经理 (PM)，已经有很多讨论。在 Airbnb 重组其产品管理组织后，这场对话得到了推动，随后又发表了有关初创公司如何在没有产品经理的情况下蓬勃发展的文章。我同意许多公司雇佣了太多的 PM。因此，产品经理经常将自己的时间花在项目管理任务和更新路线图上，而他们应该专注于优化业务产品。这通常意味着您的产品经理数量应该少于产品团队。 &lt;a href=&quot;https://hackernews.betacat.io/#more-product-fewer-product-managers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38652619&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Goodreads 要求用户帮助打击“评论轰炸”&lt;/stitle>; &lt;id>;https://www.npr.org/2023/12/17/1219599404/goodreads-review-轰炸-cait-corrain&lt;/id>; &lt;更新>;2023-12-17T15:59:30.253995Z&lt;/更新>; &lt;link href=&quot;https://www.npr.org/2023/12/17/1219599404/goodreads -review-bombing-cait-corrain&quot;/>; &lt;作者>; &lt;名称>;webmaven &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=webmaven&lt;/uri>; &lt;/作者>; &lt;内容type=&quot;html&quot;>;&lt;img src=&quot;https://media.npr.org/assets/img/2023/12/15/book-open-credit-becky-harlan-npr_custom-8daae596b34a4cd6cf0b726c708e770c823b703a-s1100-c50.jpg “样式=”宽度：220px;高度：147px;“ />;&lt;br />;Cait Corrain 承认为自己的书撰写虚假的 Goodreads 评论并批评其他作者后，她的作家生涯被毁了。 Goodreads 此前曾因其评论而引发争议，包括评论轰炸。 Goodreads 允许用户对书籍进行评分，但很少对用户进行验证，从而导致评论轰炸的发生。 &lt;a href=&quot;https://hackernews.betacat.io/#goodreads-asks-users-to-help-combat-review-bombing&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=38673499&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;指挥艺术（2018）&lt;/stitle>; &lt;id>;https://www.commentary.org/articles/terry-teachout/the-art -of-conducting/&lt;/id>; &lt;更新>;2023-12-17T07:59:30.255090Z&lt;/更新>; &lt;link href=&quot;https://www.commentary.org/articles/terry-teachout/the-art -of-conducting/&quot;/>; &lt;作者>; &lt;名称>;bookofjoe&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=bookofjoe&lt;/uri>; &lt;/author>; &lt;content type=&quot; html&quot;>;&lt;img src=&quot;https://www.commentary.org/wp-content/uploads/2017/12/Charles_Dutoit_and_the_Philadelphia_Orchestra.jpg&quot; style=&quot;宽度：220px；高度：137px；&quot; />;&lt;br />;指挥家在指挥管弦乐队中发挥着至关重要的作用，尽管有些演出没有他们也能完成。约翰·莫塞里（John Mauceri）的著作《大师和他们的音乐：指挥的艺术与炼金术》提供了对指挥世界以及指挥家如何为表演做出贡献的见解。指挥是一门复杂而主观的艺术，没有明确的技巧，但它涉及设定节奏、诠释音乐和激励乐团。 &lt;a href=&quot;https://hackernews.betacat.io/#the-art-of-conducting-2018&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38664643&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Pearl：一款可立即投入生产的强化学习代理&lt;/stitle>; &lt;id>;https://github.com/facebookresearch/Pearl&lt;/id>; &lt;更新>;2023-12-17T07 :59:30.255459Z&lt;/updated>; &lt;link href=&quot;https://github.com/facebookresearch/Pearl&quot;/>; &lt;作者>; &lt;name>;da4id&lt;/name>; &lt;uri>;https://news.ycombinator。 com/user?id=da4id&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/facebookresearch/Pearl/main/logo/agent_interface.png&quot;样式=“宽度：220像素；高度：86像素；” />;&lt;br />;Pearl 是一个新的可投入生产的强化学习 AI 代理库，由 Meta 的应用强化学习团队开源。它使研究人员和从业者能够开发强化学习人工智能代理，优先考虑累积的长期反馈，并能够适应复杂的生产环境。 &lt;a href=&quot;https://hackernews.betacat.io/#pearl-a-product-ready-reinforcement-learning-agent&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=38671030&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;