<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-06-22T07:59:58.038548Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;author>; &lt;name>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;如何做你一直在避免的事情&lt;/stitle>; &lt;id>;https://jasonfeifer.beehiiv.com/p/the-thing-that-seems-like- a-bad-idea-maybe-try-it&lt;/id>; &lt;updated>;2023-06-22T03:59:24.334293Z&lt;/updated>; &lt;link href=&quot;https://jasonfeifer.beehiiv.com/p/the -thing-that-seems-like-a-bad-idea-maybe-try-it&quot;/>; &lt;author>; &lt;name>;duck&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id =鸭子&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://media.beehiiv.com/cdn-cgi/image/fit=scale-down,format=auto,onerror =redirect,quality=80/uploads/asset/file/41c08808-c6b7-4bfb-afd5-c78e97bd0fea/Better__2_.png&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;有时候，我们认为是负担的东西实际上是我们最大的资产。我们经常避免做某事，因为我们假设其他人也这么认为。收集社会信息并比较最坏的情况很重要- 确定不采取行动的情况。&lt;a href=&quot;https://hackernews.betacat.io/#how-to-do-the-thing-you-ve-been-avoiding&quot; target=&quot;_blank&quot; >;[总结]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36427849&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;关于 Svelte(Kit) 的想法，一年 3B 之后的请求&lt;/stitle>; &lt;id>; https://claudioholanda.ch/en/blog/svelte-kit-after-3-billion-requests/&lt;/id>; &lt;更新>;2023-06-22T03:59:24.336776Z&lt;/更新>; &lt;link href=&quot; https://claudioholanda.ch/en/blog/svelte-kit-after-3-billion-requests/&quot;/>; &lt;author>; &lt;name>;thunderbong&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=thunderbong&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://claudioholanda.ch/assets/blog/en/0003/1.svg&quot; style=&quot;宽度：220px； height: 108px;&quot; />;&lt;br />;自该项目上线以来，它的受众增长显着，每天处理数十万访问者。每位访问者浏览页面及其组件并与之交互，产生了大约 30 亿过去 12 个月的请求。&lt;a href=&quot;https://hackernews.betacat.io/#thoughts-on-svelte-kit-one-year-and-3b-requests-later&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36427583&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;协程让高中生可以轻松编写机器人代码&lt;/stitle>; &lt;id>;https://bvisness.me /coroutines/&lt;/id>; &lt;updated>;2023-06-22T04:59:24.340233Z&lt;/updated>; &lt;link href=&quot;https://bvisness.me/coroutines/&quot;/>; &lt;author>; &lt;name>;bvisness&lt; /名称>; &lt;uri>;https://news.ycombinator.com/user?id=bvisness&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://bvisness.me/ coroutines/auto.jpeg&quot; style=&quot;width: 220px; height: 141px;&quot; />;&lt;br />;协程让高中生可以轻松编写机器人代码。从 Java 切换到 Lua 并使用协程改善了自主代码体验。协程允许更轻松的代码修改、动作插入和延迟。它们还能够以类似程序代码的方式组合自主行为。&lt;a href=&quot;https://hackernews.betacat.io/#coroutines-make-robot-code-easy-for-high-schoolers&quot; target=&quot; _blank&quot;>;[总结]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36428044&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/ entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我是否收到了欺诈性的 DMCA 删除？&lt;/stitle>; &lt;id>;https:// incoherency.co.uk/blog/stories/hardbin-fake-takedowns.html&lt;/id>; &lt;更新>;2023-06-21T22:59:24.340800Z&lt;/更新>; &lt;link href=&quot;https://incoherency.co .uk/blog/stories/hardbin-fake-takedowns.html&quot;/>; &lt;author>; &lt;name>;jstanley&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=jstanley&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://img.incoherency.co.uk/4452/thumb&quot; style=&quot;width: 220px; height: 136px;&quot; />;&lt;br />;我今天收到了 3 封 DMCA 删除电子邮件，涵盖了我的 hardbin.com IPFS 网关上的 7350 个 URL。据称这些 URL 服务于书籍的侵权副本。奇怪的是那 7350 个 URL，在我拥有 nginx 日志的那段时间里，它们都没有被访问过，而在我检查过的那些日志中，甚至没有一个有效。这是否意味着 DMCA 删除通知是欺诈性的？&lt;a href=&quot;https://hackernews .betacat.io/#did-i-receive-fraudulent-dmca-takedowns&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id= 36425433&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot; text&quot;>;为 Apple Vision Pro 创建空间体验的开发者工具&lt;/stitle>; &lt;id>;https://www.apple.com/newsroom/2023/06/developer-tools-to-create-spatial-experiences-for- apple-vision-pro-now-available/&lt;/id>; &lt;更新>;2023-06-21T20:59:24.341242Z&lt;/更新>; &lt;link href=&quot;https://www.apple.com/newsroom/2023/ 06/developer-tools-to-create-spatial-experiences-for-apple-vision-pro-now-available/&quot;/>; &lt;author>; &lt;name>;todsacerdoti&lt;/name>; &lt;uri>;https://news.ycombinator .com/user?id=todsacerdoti&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.apple.com/newsroom/images/2023/06/developers-begin -creating-spatial-computing-experiences-for-apple-vision-pro/article/Apple-Vision-Pro-SDK-availability-developer-lifestyle_big.jpg.large.jpg&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;visionOS 软件开发套件 (SDK) 使 Apple 的开发者社区能够以前所未有的方式将他们的应用程序变为现实。Apple 今天宣布推出新的软件工具和技术，使开发者能够为 Apple Vision Pro — Apple 的第一台空间计算机创造突破性的应用程序体验。&lt;a href=&quot;https://hackernews.betacat.io/#developer-tools-to-create-spatial-experiences-for-apple-vision-pro&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36423648&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content >; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;法国政府称 uBlock Origin、Signal 等用户是潜在的恐怖分子&lt;/stitle>; &lt;id>;https://www.laquadrature.net/2023/06/05/affaire-du-8-decembre-le-chiffrement-des-communications-assimile-a-un-comportement-terroriste/&lt; /id>; &lt;更新>;2023-06-22T04:59:24.341721Z&lt;/更新>; &lt;link href=&quot;https://www.laquadrature.net/2023/06/05/affaire-du-8-decembre-le -chiffrement-des-communications-assimile-a-un-comportement-terroriste/&quot;/>; &lt;author>; &lt;name>;Bright_Machine&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Bright_Machine&lt; /uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.laquadrature.net/wp-content/uploads/sites/8/2023/06/IMG_20230605_115637-scaled.jpg&quot;样式=“宽度：220px； height: 98px;&quot; />;&lt;br />;本文根据“12 月 8 日”案件的信息改编，该案件在 2020 年 12 月有 7 人因“恐怖犯罪团伙”被起诉。他们的审判定于 2023 年 10 月进行. 恐怖主义指控遭到被告人的强烈反驳，他们谴责政治审判、有偏见的调查和缺乏证据。 &lt;a href=&quot;https://hackernews.betacat.io/#french-govt-says-users- of-ublock-origin-signal-etc-are-potential-terrorists&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36428046&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;通过开发模式让 Figma 对开发者更好&lt;/stitle>; &lt;id>;https://www.figma.com/blog/introducing-dev-mode/&lt;/id>; &lt;updated>;2023-06-21T16:59:24.342145 Z&lt;/updated>; &lt;link href=&quot;https://www.figma.com/blog/introducing-dev-mode/&quot;/>; &lt;author>; &lt;name>;emilsjolander&lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=emilsjolander&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cdn.sanity.io/images/599r6htc/localized/3d50ba4aee877e89ed863d515b87408ceb669098-1560x1248 .png?w=1560&amp;h=1248&amp;q=75&amp;fit=max&amp;auto=format&quot; style=&quot;width: 220px; height: 176px;&quot; />;&lt;br />;Figma 引入了 Dev Mode，这是一个旨在满足开发人员需求的新工作区。Dev Mode 为开发人员提供了他们日常使用的工具，使他们能够快速高效地访问来自设计文件。&lt;a href=&quot;https://hackernews.betacat.io/#making-figma-better-for-developers-with-dev-mode&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36420712&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:/ /hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;地图扭曲了我们看待世界的方式&lt;/stitle>; &lt;id>;https://unchartedterritories.tomaspueyo.com/p/maps-distort-我们如何看待世界&lt;/id>; &lt;updated>;2023-06-21T17:59:24.345351Z&lt;/updated>; &lt;link href=&quot;https://unchartedterritories.tomaspueyo.com/p/maps-distort -how-we-see-the-world&quot;/>; &lt;author>; &lt;name>;yarapavan&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=yarapavan&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media .s3.amazonaws.com%2Fpublic%2Fimages%2F9023d572-d461-47cb-83b3-49585f7238bc_480x480.gif&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;地图是 3D 球体的 2D 投影，导致失真。墨卡托投影扭曲了我们对世界的感知，因为它以赤道和参考子午线为中心。不同的地区和国家看起来更大或更小比实际小。&lt;a href=&quot;https://hackernews.betacat.io/#maps-distort-how-we-see-the-world&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=36421315&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;科学与统计 (1976) [pdf]&lt;/stitle>; &lt;id>;https://www-sop.inria.fr/members /Ian.Jermyn/philosophy/writings/Boxonmaths.pdf&lt;/id>; &lt;更新>;2023-06-22T02:59:24.345792Z&lt;/更新>; &lt;link href=&quot;https://www-sop.inria.fr/ members/Ian.Jermyn/philosophy/writings/Boxonmaths.pdf&quot;/>; &lt;author>; &lt;name>;dredmorbius&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=dredmorbius&lt;/uri>; &lt; /author>; &lt;content type=&quot;html&quot;>;Science and Statistics (1976) 是一篇讨论科学方法各个方面的文章，强调理论与实践之间迭代的重要性。它强调了对灵活性的需求、设计有效模型的能力以及从错误中学习的重要性。文章还探讨了科学在理解自然方面的作用以及数学在物理学和统计学中的应用。 &lt;a href=&quot;https://hackernews.betacat.io/#science-and-statistics-1976-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36427374&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;年轮水印：扩散图像的无形鲁棒指纹&lt;/stitle>; &lt;id>;https://arxiv.org/abs/2305.20030&lt;/id>; &lt;updated>;2023-06 -21T23:59:24.346245Z&lt;/updated>; &lt;link href=&quot;https://arxiv.org/abs/2305.20030&quot;/>; &lt;author>; &lt;name>;anjel&lt;/name>; &lt;uri>;https://news. ycombinator.com/user?id=anjel&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.arxiv.org/static/browse/0.3.4/images/ arxiv-logo-fb.png&quot; style=&quot;宽度：220px；高度：129px；&quot; />;&lt;br />;为生成模型的输出加水印是追踪版权和防止 AI 生成内容潜在危害的一项关键技术。在本文中，我们介绍了一种称为树环水印的新技术，该技术可稳健地对扩散模型输出进行指纹识别。 &lt;a href=&quot;https://hackernews.betacat.io/#tree-ring-watermark-invisible-robust-fingerprints-of-diffusion-images&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36426136&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;免费器官&lt;/stitle>; &lt;id>;https://www.organclearinghouse.com/organs-for-sale#/3141-austin-san -弗朗西斯科&lt;/id>; &lt;更新>;2023-06-21T19:59:24.346690Z&lt;/更新>; &lt;link href=&quot;https://www.organclearinghouse.com/organs-for-sale#/3141-austin-san -francisco&quot;/>; &lt;author>; &lt;name>;mhb&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mhb&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;该管风琴是为 1915 年巴拿马泛太平洋博览会的节日大厅建造的。后来搬迁到市政厅附近新建的市民礼堂。 &lt;a href=&quot;https://hackernews.betacat.io/#free-organ&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=36423047&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;Ruby 黑客指南（2004 年）&lt;/stitle>; &lt;id>;https://ruby-hacking-guide.github.io&lt;/id>; &lt;updated>;2023-06-21T22:59:24.347177Z&lt;/已更新>; &lt;link href=&quot;https://ruby-hacking-guide.github.io&quot;/>; &lt;author>; &lt;name>;swatson741&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id =swatson741&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;有些章节是预览。这意味着他们还没有被完全审查，一些图表可能会丢失，一些句子可能有点粗糙。但这也意味着他们正在接受公开审查，所以请毫不犹豫地解决问题。 &lt;a href=&quot;https://hackernews.betacat.io/#ruby-hacking-guide-2004&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator。 com/item?id=36425858&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;Why Kakoune – 寻求更好的代码编辑器 (2016)&lt;/stitle>; &lt;id>;https://kakoune.org/why-kakoune/why-kakoune.html&lt;/id>; &lt;更新>;2023-06-21T20:59:24.347721Z&lt;/更新>; &lt;link href=&quot;https://kakoune.org/why-kakoune/why-kakoune.html&quot;/>; &lt;作者>; &lt;名称>;r3trohack3r&lt; /名称>; &lt;uri>;https://news.ycombinator.com/user?id=r3trohack3r&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://kakoune.org/ why-kakoune/kakoune_logo.svg&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;花时间掌握代码编辑器是值得的，因为代码编辑是编程的重要组成部分。像 Kakoune 这样的模态文本编辑器是必经之路，因为它们提供了方便的快捷方式、一种文本编辑语言，并使编辑更快、更有趣。 &lt;a href=&quot;https://hackernews.betacat.io/#why-kakoune-the-quest-for-a-better-code-editor-2016&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=36424256&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;为了可疑的好处而增加我的编译时间&lt;/stitle>; &lt;id>;https://claytonwramsey.github.io/2023/06/ 20/fiddler-const-magic.html&lt;/id>; &lt;更新>;2023-06-22T00:59:24.348152Z&lt;/更新>; &lt;link href=&quot;https://claytonwramsey.github.io/2023/06/20 /fiddler-const-magic.html&quot;/>; &lt;author>; &lt;name>;Tyrubias&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Tyrubias&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;在过去的两年里，我一直在构建一个名为 Fiddler 的国际象棋引擎。按照国际象棋引擎的标准，它不是很好，但这不是重点——我主要是为了好玩而研究它。现在，我正在改造我的移动生成器，以更多地使用静态的、预先计算的数据，而不是运行时生成。 &lt;a href=&quot;https://hackernews.betacat.io/#blowing-up-my-compile-times-for-dubious-benefits&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36399832&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;神经网络坦克城市传奇&lt;/stitle>; &lt;id>;https://gwern.net/tank&lt;/id>; &lt;updated>;2023-06- 21T21:59:24.349048Z&lt;/updated>; &lt;link href=&quot;https://gwern.net/tank&quot;/>; &lt;author>; &lt;name>;belter&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=belter&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://gwern.net/static/img/logo/logo-whitebg-large-border.png &quot; style=&quot;宽度：220px；高度：249px；&quot; />;&lt;br />;人工智能中的一个警示故事讲述了研究人员训练神经网络 (NN) 以检测照片中的坦克，却发现神经网络学到了一些无用的东西，比如一天中的时间。这个故事经常被用来警告算法的局限性和数据收集的重要性以避免数据集偏差。然而，经过广泛研究后得出的结论是，坦克故事只是一个都市传说，并非基于第一手资料。 &lt;a href=&quot;https://hackernews.betacat.io/#the-neural-net-tank-urban-legend&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36416895&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;几乎浪漫的语言&lt;/stitle>; &lt;id>;https://dannybate.com/2022/11/21/the-almost-romance-languages/&lt;/id>; &lt;更新>;2023-06-22T01:59:24.349497Z&lt;/更新>; &lt;link href=&quot;https://dannybate.com/2022/11/21/the-almost-romance-languages/&quot;/>; &lt;作者>; &lt;名称>;sokols&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=sokols&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:/ /dannybate.files.wordpress.com/2022/11/20221121_104459.png?w=1000&quot; style=&quot;宽度：220px；高度：194px；&quot; />;&lt;br />;罗曼语系，包括法语、西班牙语、葡萄牙语、加泰罗尼亚语、意大利语和罗马尼亚语，都是拉丁语的语言后裔。然而，将一种语言归类为罗曼语并不是明确的二元区分，因为这些语言中的某些元素并非起源于拉丁语。阿尔巴尼亚语和威尔士语是两种可以被认为是近乎浪漫的语言，因为它们受拉丁语的影响较小。 &lt;a href=&quot;https://hackernews.betacat.io/#the-almost-romance-languages&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator。 com/item?id=36415891&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;Show HN：gpt-engineer – 开发人员修补 AI 编程工具的平台&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=36422730&lt;/id >; &lt;更新>;2023-06-21T18:59:24.349942Z&lt;/更新>; &lt;link href=&quot;https://news.ycombinator.com/item?id=36422730&quot;/>; &lt;作者>; &lt;name>;antonoo&lt;/ name>; &lt;uri>;https://news.ycombinator.com/user?id=antonoo&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;GPT Engineer 是一个开放平台，供开发人员试验和创建他们的自己的代码生成工具箱。该项目仍处于早期阶段，还有改进的空间。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-gpt-engineer-platform-for-devs-to-tinker-with-ai-programming-tools&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36422730&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml :base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Vim、Helix 和 Kakoune 的更多后见之明&lt;/stitle>; &lt;id>;https://phaazon.net /blog/more-hindsight-vim-helix-kakoune&lt;/id>; &lt;更新>;2023-06-22T02:59:24.350388Z&lt;/更新>; &lt;link href=&quot;https://phaazon.net/blog/more- hindsight-vim-helix-kakoune&quot;/>; &lt;author>; &lt;name>;cosmojg&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=cosmojg&lt;/uri>; &lt;/author>; &lt;内容类型=&quot;html&quot;>;Helix 是一个原生集成了许多功能的编辑器，这些功能通常是其他编辑器中的插件。它具有 tree-sitter 支持、LSP 支持、Git 集成、寄存器和用户定义的寄存器。 Helix 中的配置是在 TOML 中完成的，可以动态调整和重新加载。 Helix 没有光标，而是使用选择，这允许无缝和自然的编辑操作。 &lt;a href=&quot;https://hackernews.betacat.io/#even-more-hindsight-on-vim-helix-and-kakoune&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36427267&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;每个程序员都应该了解的内存知识（2007）[pdf]&lt;/stitle>; &lt;id>;https://people.freebsd.org/~lstewart/ articles/cpumemory.pdf&lt;/id>; &lt;updated>;2023-06-21T16:59:24.350904Z&lt;/updated>; &lt;link href=&quot;https://people.freebsd.org/~lstewart/articles/cpumemory.pdf&quot; />; &lt;author>; &lt;name>;quackulus&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=quackulus&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;作为CPU核心变得更快和更多，大多数程序的限制因素现在是，并且在一段时间内将是内存访问。硬件设计人员提出了越来越复杂的内存处理和加速技术——例如 CPU 缓存——但如果没有程序员的帮助，这些技术就无法发挥最佳作用。 &lt;a href=&quot;https://hackernews.betacat.io/#what-every-programmer-should-know-about-memory-2007-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36420502&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;有效C语言阅读日志：专业C编程入门&lt;/stitle>; &lt;id>;https://yongjie.codes/reading-logs/ effective-c/&lt;/id>; &lt;updated>;2023-06-21T21:59:24.351328Z&lt;/updated>; &lt;link href=&quot;https://yongjie.codes/reading-logs/effective-c/&quot;/>; &lt; author>; &lt;name>;luu&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=luu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;好奇者的好书：这些书设法混淆而不是阐明，一个好奇的学习者可以期待数小时的尝试（并且悲惨地失败）来理解其中包含的散文，只有在简短的谷歌搜索和之后才能完全理解主题（以及更多）访问 cppreference.com（上帝保佑，StackOverflow）。说明也不是很清楚，比如sequence point的定义就是side effects完成的节点；将此与 cppreference.com 上的解释方式进行比较：=如果在子表达式 E1 和 E2 之间存在一个序列点，则 E1 的值计算和副作用都会在 E2 的每个值计算和副作用之前进行排序=（并提供了 sequenced-before 的单独定义）。 C 的几个原则之一是信任程序员，允许程序员做需要做的事情。 C 的不同实现可以有不同的行为。并且由于 C 中的某些行为是未定义的，因此仅通过编写简单的测试程序来检查行为是不可能理解 C 语言的。独立环境可能不提供操作系统，通常用于嵌入式编程。程序启动时调用的函数的名称和类型是实现定义的。 （例如，int main(void) {...}）C 标准文档的附件 J 中列举了五种可移植性问题：即，C 标准未指定的程序行为，可能会在实现中提供不同的结果，但在实现中具有一致的记录行为。例如，函数参数存储布局，它可以在同一程序中的不同函数调用之间变化。即，C 标准未定义的行为； &#39;行为，在使用不可移植或错误的程序构造或错误数据时，标准对此没有强加要求&#39;即，在许多系统中广泛使用但不能移植到所有实现的扩展对象是存储，其中你可以代表价值观； &#39;执行环境中的数据存储区域，其内容可以表示值，......当被引用时，一个对象可以被解释为具有特定类型&#39;指针可以被认为是指向对象或对象所在内存位置的地址函数被存储。存储持续时间是对象的生命周期。有四种可用的存储持续时间：自动、静态、线程和已分配。在文件范围内声明的对象具有静态存储持续时间。这些对象的生命周期就是程序的整个执行过程。也可以通过使用存储类说明符 static 将块范围内的变量声明为具有静态存储持续时间。注意：范围和生命周期是完全不同的概念。范围适用于标识符，而生命周期适用于对象。标识符的作用域是标识符表示的对象可以通过其名称访问的代码区域。对象的生命周期是对象存在的时间段。对象类型具有对齐要求，该要求限制了可以分配该类型对象的地址。通常，C 程序员不需要关心对齐要求，因为编译器会为其各种类型选择合适的对齐方式。传统上，这是通过使用链接器命令、使用 malloc 过度分配内存然后向上舍入用户地址或涉及其他非标准设施的类似操作来完成的。每个编译器实现都将 char 定义为与其他两个具有相同的对齐、大小、范围、表示和行为，但 char 仍然是与其他两个不同的类型。 C 还提供了 wchar_t 类型来表示非英语字符所需的更大的字符集。使用上面的单词 int 时可以省略（即代替 short int myShort = 10;） 无符号整数类型：unsigned char、unsigned short int、unsigned int、unsigned long int、unsigned long long int。程序员可以使用 &lt;stdint.h>; 或 &lt;inttypes.h>; 中的定义来指定实际宽度，例如 uint32_t。当用作函数返回类型时，表示该函数不返回值。定义了下标 ([]) 运算符和加法 (+) 运算符，以便 str[i] 与 *(str + i) 相同。因此 str[i] = 10 变为 。如果一元 &amp; 运算符的操作数是 [] 运算符的结果，则结果就像删除 &amp; 运算符并将 [] 运算符更改为 + 运算符一样。例如 &amp;str[10] 与 str + 10 相同。联合类型类似于结构，只是成员对象使用的内存重叠。联合可以一次包含一个类型的对象，在不同的时间包含一个不同类型的对象，但不能同时包含两个对象，主要用于节省内存。标记不是类型名称，不能用于声明变量。例如，要使用上面的 s 标签来声明变量，必须这样做：联合和枚举的名称也是标签，而不是类型。因此，名称不能单独用于声明变量：结构、联合和枚举的标签与普通标识符在单独的命名空间中定义，并且不会相互冲突。用 const 限定符声明的对象是不可修改的：即不可赋值，但可以有常量初始值设定项下面一行）：上面列出的对象中的值可能会在编译器不知情的情况下发生变化；例如，即使没有来自 C 程序的交互，实时时钟的值也会改变。 volatile 确保每次应该在程序中读取该值时都会实际读取该值（否则编译器可能会优化某些读取）例如，以下代码确保读取端口的值并将其分配回端口（而不是它是一个空操作，因为它是对 self 的赋值）：与 Java 不同，C 中的 volatile 限定类型不应用于线程之间的同步。编译器将假定通过具有 restrict 限定指针的指针访问的对象不会被其他指针访问，从而允许进行更多优化。例如：声明整数类型时，除非int是唯一的关键字，否则可以去掉。例如，long long int 与 long long 相同。使用无符号整数类型时，请记住避免使用 &lt;limits.h>; 库进行回绕（如有必要）。使用二进制补码系统，我们可以表示与正值相比多出一个负值。例如，一个 8 位有符号整数可以表示 [-128, 127] 范围内的值。这个结果是一个有趣的边缘情况，其中 abs(-128) 不是以相同的位宽表示。浮点数通常使用 (a) 符号位、(b) 指数和 (c) 尾数（也称为尾数）表示。为了避免在指数中单独编码负值的需要，应用了偏移量。例如，要对 8 位指数的零值进行编码，我们可以存储值 127。指数 -127（其中每一位为零）和 +128（其中每一位为一）保留用于特殊数字。调整有效数字，使第一个数字始终为 1，这在编码方案中是隐含的。这样一个使用 1 位符号位、8 位指数位和 23 位尾数位的浮点数实际上可以表示 24 位精度。使用 1 位符号位、11 位指数位和 52 位尾数位的双精度数可以表示 53 位精度。一个非常小的非零浮点数，即使是指数的最小值也不足以表示，称为次正规（也称为反正规）浮点数。在这种情况下，指数的所有位都是零，而尾数的隐含前导一现在是隐含的。 &lt;a href=&quot;https://hackernews.betacat.io/#reading-log-for-effective-c-an-introduction-to-professional-c-programming&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=36417075&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;使用 ANSI-C 进行面向对象编程（1993）[pdf]&lt;/stitle>; &lt;id>;https://www. mclibre.org/descargar/docs/libros/ooc-ats.pdf&lt;/id>; &lt;更新>;2023-06-21T18:59:24.351754Z&lt;/更新>; &lt;link href=&quot;https://www.mclibre.org /descargar/docs/libros/ooc-ats.pdf&quot;/>; &lt;author>; &lt;name>;Tomte&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Tomte&lt;/uri>; &lt;/ author>; &lt;content type=&quot;html&quot;>;本书不会赞扬面向对象编程或谴责旧方法。我们将简单地使用 ANSI-C 来发现面向对象编程是如何完成的，它的技术是什么，为什么它们可以帮助我们解决更大的问题，以及我们如何利用通用性和编程来及早发现错误。 &lt;a href=&quot;https://hackernews.betacat.io/#object-oriented-programming-with-ansi-c-1993-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36422116&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;翻新旧电脑的艺术&lt;/stitle>; &lt;id>;https://www.theregister.com/2023/06/21/pc_officina_positive_trashware/&lt;/ id>; &lt;更新>;2023-06-21T21:59:24.352576Z&lt;/更新>; &lt;link href=&quot;https://www.theregister.com/2023/06/21/pc_officina_positive_trashware/&quot;/>; &lt;作者>; &lt;名称>;samizdis&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=samizdis&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://regmedia .co.uk/2023/06/20/shutterstock_usedlaptops.jpg&quot; style=&quot;宽度：220px；高度：116px；&quot; />;&lt;br />;Red Hat 的平台技术客户经理 Andrea Perotti 在 Devconf.cz 上发表了关于重新利用剩余 IT 设备以帮助有需要的人的演讲。 “垃圾软件”的概念涉及翻新报废的剩余工具包以运行现代操作系统和软件，为那些买不起新计算机的人提供计算机知识和互联网访问。 &lt;a href=&quot;https://hackernews.betacat.io/#the-art-of-refurbing-old-computers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36416887&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;哈佛不诚实专家被指控不诚实&lt;/stitle>; &lt;id>;https://www.ft.com/content/a8c07365-f85d-47a0-98a4-b6f71da697ef&lt;/id >; &lt;更新>;2023-06-21T20:59:24.352974Z&lt;/更新>; &lt;link href=&quot;https://www.ft.com/content/a8c07365-f85d-47a0-98a4-b6f71da697ef&quot;/>; &lt;作者>; &lt;name>;hansmeierbaum&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=hansmeierbaum&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;哈佛不诚实专家被指控不诚实 &lt;a href=&quot;https://hackernews.betacat.io/#harvard-dishonesty-expert-accused-of-dishonesty&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36424090&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;MyNOR – 小型计算机。没有 CPU，没有 ALU，一个或非门就足够了&lt;/stitle>; &lt;id>;http://www.mynor.org/&lt;/id>; &lt;updated>;2023-06-21T18:59:24.353368Z&lt;/updated>; &lt;link href=&quot;http://www.mynor.org/&quot;/>; &lt;作者>; &lt;name>;ColinWright&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ColinWright&lt;/uri >; &lt;/author>; &lt;content type=&quot;html&quot;>;MyNOR 项目页面。 MyNOR 是一款带有分立 CMOS 逻辑 CPU 的 8 位单板计算机，它只使用一个或非门而不是 ALU 来进行所有计算。 &lt;a href=&quot;https://hackernews.betacat.io/#mynor-the-yet-minor-computer-no-cpu-no-alu-one-nor-gate-is-enough&quot; target=&quot;_blank&quot;>; [总结]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36416325&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt; entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;吸毒的大脑：修补意识如何成为一种社会罪恶&lt;/stitle>; &lt;id>;https: //thebaffler.com/latest/brains-on-drugs-semley&lt;/id>; &lt;更新>;2023-06-22T02:59:24.353778Z&lt;/更新>; &lt;link href=&quot;https://thebaffler.com/latest /brains-on-drugs-semley&quot;/>; &lt;author>; &lt;name>;apollinaire&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=apollinaire&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://thebaffler.com/wp-content/uploads/2023/06/Yuki_M_Baffler_June23.jpg&quot; style=&quot;宽度：220px；高度：169px；&quot; />;&lt;br />;Psychonauts: Drugs and the Making of the Modern Mind by Mike Jay 是 19 世纪和 20 世纪初的化学和文学史，探索了对药物的自我实验以及这些经验是如何传达的。这本书涵盖了人们对药物态度的转变，从被视为医学上使用的良性物质到与自我中毒、成瘾和精神疾病相关联。它还深入探讨了迷幻药物与神秘体验之间的联系，以及药物对查尔斯·波德莱尔和威廉·詹姆斯等文学人物的影响。 &lt;a href=&quot;https://hackernews.betacat.io/#brains-on-drugs-how-tinkering-with-consciousness-became-a-societal-sin&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=36419352&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;美国 FTC 表示，亚马逊欺骗了数百万消费者注册 Prime&lt;/stitle>; &lt;id>;https://www.reuters .com/legal/amazon-duped-millions-consumers-into-enrolling-prime-ftc-2023-06-21/&lt;/id>; &lt;更新>;2023-06-21T23:59:24.354189Z&lt;/更新>; &lt;链接href=&quot;https://www.reuters.com/legal/amazon-duped-millions-consumers-into-enrolling-prime-ftc-2023-06-21/&quot;/>; &lt;author>; &lt;name>;testrun&lt;/name >; &lt;uri>;https://news.ycombinator.com/user?id=testrun&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cloudfront-us-east- 2.images.arcpublishing.com/reuters/6HY6LI3W6ZKSRF2PDMTPXYEB4M.jpg&quot; style=&quot;宽度：220px；高度：147px；&quot; />;&lt;br />;美国联邦贸易委员会指控亚马逊在未经他们同意的情况下让数百万消费者加入其付费订阅亚马逊 Prime 服务，并让他们难以取消。 FTC 已起诉亚马逊，指控该公司故意欺骗消费者，让他们在不知情的情况下加入亚马逊 Prime。 &lt;a href=&quot;https://hackernews.betacat.io/#amazon-duped-millions-of-consumers-into-enrolling-in-prime-us-ftc-says&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36426239&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;