<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2024-06-21T16:01:39.796676Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;从 Infocom 到 80 天：文字游戏和互动小说的口述历史&lt;/stitle>; &lt;id>;https://arstechnica.com/gaming/2024/06/from-infocom -to-80-days-an-oral-history-of-text-games-and-interactive-fiction/&lt;/id>; &lt;更新>;2024-06-21T15:01:27.624333Z&lt;/更新>; &lt;link href= “https://arstechnica.com/gaming/2024/06/from-infocom-to-80-days-an-oral-history-of-text-games-and-interactive-fiction/”/>; &lt;作者>; &lt;名称>;pseudolus&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=pseudolus&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// cdn.arstechnica.net/wp-content/uploads/2023/11/45897016062_e1c52b1dd9_k-800x1199.jpg&quot; style=&quot;width: 220px;高度： 124px;&quot; />;&lt;br />;互动小说是一种 20 世纪 70 年代在大型机上兴起的叙事形式，尽管视频游戏、电视和文学取得了进步，但它仍然持续存在。这种类型的根源与计算机行业息息相关， Will Crowther 和 Don Woods 等先驱者创造的文字游戏激发了好奇心并激发了忠实的观众。 -of-text-games-and-interactive-fiction&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40749426&quot; target=&quot; _blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;如何2 的平方根成为数字&lt;/stitle>; &lt;id>;https://www.quantamagazine.org/how-the-square-root-of-2-became-a-number-20240621/&lt;/id>; &lt;更新>;2024-06-21T15:01:27.626289Z&lt;/更新>; &lt;link href=&quot;https://www.quantamagazine.org/how-the-square-root-of-2-became-a-number-20240621/ &quot;/>; &lt;author>; &lt;name>;headalgorithm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=headalgorithm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =“https://d2r55xnwy6nx47.cloudfront.net/uploads/2024/06/How-SQRT2-Became-a-Number-crNicoRoper-Lede-scaled.webp”样式=“宽度：220px; height: 124px;&quot; />;&lt;br />;古希腊人很难理解无理数，直到 1800 年代中期理查德·戴德金 (Richard Dedekind) 提出“割”的概念，数学家才能够严格定义和构造无理数。这一突破使数学家能够更好地理解序列和函数，并开辟了新的探索视野，导致更广泛、更...... &lt;a href=&quot;https://hackernews.betacat.io/#how-the-square- root-of-2-became-a-number&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40750230&quot; target=&quot;_blank &quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;如何计算机/计算器计算对数？&lt;/stitle>; &lt;id>;https://zachartrand.github.io/SoME-3-Living/&lt;/id>; &lt;updated>;2024-06-21T15:01:27.626800Z&lt;/updated>; &lt;link href=&quot;https://zachartrand.github.io/SoME-3-Living/&quot;/>; &lt;作者>; &lt;name>;ykonstant&lt;/name>; &lt;uri>;https://news.ycombinator.com/user? id=ykonstant&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://zachartrand.github.io/SoME-3-Living/images/desmos-geometric-series.png&quot;样式=“宽度：220px； height: 198px;&quot; />;&lt;br />;本文解释了计算器和计算机如何使用级数展开式计算对数，特别是自然对数的泰勒级数。通过组合两个级数展开式，本文展示了如何导出一个新的级数：收敛速度更快，并且需要更少的项来达到相同的精度水平，从而更有效地计算对数。对数&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40749670&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt; /content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Lady Deirdre 2 – 用于编译器和 LSP 的 Rust 框架服务器&lt;/stitle>; &lt;id>;https://github.com/Eliah-Lakhin/lady-deirdre&lt;/id>; &lt;更新>;2024-06-21T15:01:27.627294Z&lt;/更新>; &lt;link href=&quot;https ://github.com/Eliah-Lakhin/lady-deirdre&quot;/>; &lt;作者>; &lt;名称>;Eliah_Lakhin &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=Eliah_Lakhin &lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/Eliah-Lakhin/lady-deirdre/master/work/logo.jpg&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;Lady Deirdre 是一个用于开发混合语言编译器、解释器和源代码分析器的框架，允许进行具有实时文件更改的增量编程语言项目。该框架提供了一个自给自足的、可扩展且可配置的 API，用于开发编程语言编译器和代码编辑器语言扩展的前端部分，无需第三方... &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-lady -deirdre-2-rust-framework-for-compilers-and-lsp-servers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id =40747845&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type= “text&quot;>;艾伦·麦克唐纳拒绝批准挑战者号发射，揭露掩盖真相（2021）&lt;/stitle>; &lt;id>;https://www.npr.org/2021/03/07/974534021/remembering-allan-mcdonald- he-refused-to-approve-challenger-launch-expose-cover&lt;/id>; &lt;更新>;2024-06-21T12:01:27.627823Z&lt;/更新>; &lt;link href=&quot;https://www.npr.org /2021/03/07/974534021/remembering-allan-mcdonald-he-refused-to-approve-challenger-launch-exposed-cover&quot;/>; &lt;author>; &lt;name>;EndXA&lt;/name>; &lt;uri>;https:// /news.ycombinator.com/user?id=EndXA&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://media.npr.org/assets/img/2021/03 /07/mcdonald-with-commemorative-2aa6ac2dbf80eea3029d8d1d7e7d7c60230627d0.jpg?s=1100&amp;c=15&amp;f=jpeg&quot; style=&quot;width: 220px;高度：165px;&quot; />;&lt;br />;美国国家航空航天局 (NASA) 承包商艾伦·麦克唐纳 (Allan McDonald) 出于对冰冻温度、冰层形成和波涛汹涌的海洋的担忧，拒绝签署挑战者号的发射，后来揭露了美国国家航空航天局 (NASA) 的掩盖事实。过着正直的生活，倡导道德决策和无悔的生活，并因跌倒和脑损伤而去世，享年 83 岁，留下了在正确的地方做正确的事情的遗产...... &lt;a href=&quot;https ://hackernews.betacat.io/#allan-mcdonald-refused-to-approve-challenger-launch-exposed-cover-up-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=40748371&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;MeshAnything – 将 3D 表示转换为高效的 3D 网格&lt;/stitle>; &lt;id>;https://buaacyw.github.io/mesh-anything/&lt;/id >; &lt;更新>;2024-06-21T06:01:27.628225Z&lt;/更新>; &lt;link href=&quot;https://buaacyw.github.io/mesh-anything/&quot;/>; &lt;作者>; &lt;name>;flockonus&lt;/name >; &lt;uri>;https://news.ycombinator.com/user?id=flockonus&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://buaacyw.github.io/ mesh-anything/remesh.png&quot; style=&quot;width: 220px; height: 145px;&quot; />;&lt;br />;MeshAnything 是一个模型，可从 3D 资源生成艺术家创建的网格 (AM)，从而提高存储、渲染和模拟效率。它仅使用 VQ-VAE 和形状条件解码器变压器以更少的面产生 AM，实现与以前的方法相当的精度_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40746310&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/ Entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;创新英雄是组织功能失调的标志&lt;/stitle>; &lt;id>;https: //steveblank.substack.com/p/why-innovation-heroes-are-a-sign&lt;/id>; &lt;更新>;2024-06-21T15:01:27.628625Z&lt;/更新>; &lt;link href=&quot;https:// /steveblank.substack.com/p/why-innovation-heroes-are-a-sign&quot;/>; &lt;author>; &lt;name>;sblank&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id =sblank&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https %3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffdbd131c-ff57-4be3-8b28-f714b863e28c_1280x1658.heic&quot; style=&quot;width: 220px; height: 285px;&quot; />;&lt;br />;用户参加了政府机构举行的“创新英雄”颁奖典礼，他们意识到创新常常受到功能失调的系统的阻碍，而领导者很少解决这些问题的根本原因。该用户认为，大型组织需要“创新主义”来推动创新努力和新功能的快速部署，而不是依赖英雄……&lt;a href=&quot;https://hackernews.betacat.io/#innovation-heroes -are-a-sign-of-a-dysfunction-organization&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40749754&quot; 目标=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;机电月球着陆器&lt;/stitle>; &lt;id>;http://www.chrisfenton.com/electricmechanical-lunar-lander/&lt;/id>; &lt;updated>;2024-06-21T11:01:27.629005Z&lt;/updated>; &lt;link href =&quot;http://www.chrisfenton.com/electricmechanical-lunar-lander/&quot;/>; &lt;作者>; &lt;名称>;soopurman&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=soopurman &lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2017/04/lander_complete-1024x768.jpeg&quot; style=&quot;宽度：220px； height: 166px;&quot; />;&lt;br />;作者为 2016 年 NYCRes​​istor Interactive 展会制作了一款机电月球着陆器游戏，用 3D 打印的宇宙飞船和纸质月亮重现了街机游戏的机制。该游戏具有简单的控制功能接口、用于高度控制的线性步进电机和用于推力方向的伺服系统，允许玩家驾驶宇宙飞船安全着陆在月球表面。月球着陆器&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40740616&quot; target=&quot;_blank&quot;>;[评论]&lt;/a >;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;代码模型&lt;/stitle>; &lt;id>;https: //openjdk.org/projects/babylon/articles/code-models&lt;/id>; &lt;更新>;2024-06-21T09:01:27.629381Z&lt;/更新>; &lt;link href=&quot;https://openjdk.org/projects /babylon/articles/code-models&quot;/>; &lt;作者>; &lt;名称>;ludovicianul&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ludovicianul&lt;/uri>; &lt;/author>; &lt;内容type=&quot;html&quot;>;代码反射是一项 Java 功能，可以访问 Java 代码的符号表示，从而可以操作和分析 Java 程序。代码模型是特定 Java 类的实例，由 Java 编译器生成，可以遍历它来分析代码结构、识别表达式和语句，并为 GPU 等用例生成惯用的 C 代码... &lt;a href= “https://hackernews.betacat.io/#code-models” target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40716801&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;高级文本功能和 PDF&lt;/stitle>; &lt;id>;https://nibblestew.blogspot.com/2024/06/advanced-text-features-and-pdf.html&lt;/id>; &lt;更新>;2024-06-21T13 :01:27.629776Z&lt;/updated>; &lt;link href=&quot;https://nibblestew.blogspot.com/2024/06/advanced-text-features-and-pdf.html&quot;/>; &lt;作者>; &lt;名称>;ingve&lt; /name>; &lt;uri>;https://news.ycombinator.com/user?id=ingve&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://blogger.googleusercontent. com/img/b/R29vZ2xl/AVvXsEinGf-jCGIOplmirEUvUKRvfrEbTTMQvVWvm8dttybsv6vsi9ATgaUCuhG4Bxp6vCCSv3lWU0Br5l_PmGtNsPIYvxhpk69zfbopIDp2ZQndciSc-ARCmv3DEP8XPLDwMlfgVVOH Z4g0NMPSJJV32NCfvZts6y8ZxyA7_2UvXUktkazJAX3Nzw9ywiBTv3U/s320/ligatures.png&quot; style=&quot;宽度：220px; height: 204px;&quot; />;&lt;br />;PDF 的文本模型存在局限性，包括自定义编码和缺乏对垂直字距调整的支持，使得文本表示和选择具有挑战性。为了克服这些问题，开发人员必须使用将文本转换为路径等解决方法操作或将字形渲染为单独的文本对象，并手动处理连字和字体变体&lt;a href=&quot;https://hackernews.betacat.io/#advanced-text-features-and-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;日本糖果的算法拟合&lt; /stitle>; &lt;id>;https://www.candyjapan.com/behind-the-scenes/algorithmic-fitting-of-japanese-candy&lt;/id>; &lt;更新>;2024-06-21T08:01:27.630171Z&lt;/已更新>; &lt;link href=&quot;https://www.candyjapan.com/behind-the-scenes/algorithmic-fitting-of-japanese-candy&quot;/>; &lt;作者>; &lt;name>;EndXA&lt;/name>; &lt;uri>;https ://news.ycombinator.com/user?id=EndXA&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.candyjapan.com/static/bin_packing.png “样式=”宽度：220px; height: 184px;&quot; />;&lt;br />;用户（一名程序员）编写了一种算法来优化在 23x17x4cm 包裹中包装糖果，考虑各种组合和旋转以使糖果适合包裹的体积。该算法涉及测试糖果的对齐情况糖果，消除“孤岛”和不必要的组合，并使用启发式方法加速该过程，目的是找到......的最佳序列&lt;a href=&quot;https://hackernews.betacat.io/#algorithmic-fitting -of-japanese-candy&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40726529&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;追踪 SAT 求解器中的错误&lt; /stitle>; &lt;id>;https://ochagavia.nl/blog/chasing-a-bug-in-a-sat-solver/&lt;/id>; &lt;更新>;2024-06-21T07:01:27.631299Z&lt;/更新>; &lt;link href=&quot;https://ochagavia.nl/blog/chasing-a-bug-in-a-sat-solver/&quot;/>; &lt;作者>; &lt;name>;wofo&lt;/name>; &lt;uri>;https:// /news.ycombinator.com/user?id=wofo&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://ochagavia.nl/images/headshot.jpg&quot; style=&quot;宽度：220px； height: 116px;&quot; />;&lt;br />;用户与 Prefix.dev 合作修复了基于 SAT 的依赖解算器 resolvo 中的一个错误，该错误在遇到无法访问的代码时意外地发生了恐慌。社区成员 Sumanth 贡献了一个最小的可重复性示例和单元测试，使用户可以在短短几个小时内更轻松地调试和修复问题。 -solver&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40725568&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>; &lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;花费 3 个月的时间调查一个 7 年前的错误并修复只需 1 行代码&lt;/stitle>; &lt;id>;https://lemmy.world/post/16763534&lt;/id>; &lt;updated>;2024-06-21T14:01:27.631689Z&lt;/updated>; &lt;link href=&quot; https://lemmy.world/post/16763534&quot;/>; &lt;作者>; &lt;名称>;asicsp&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=asicsp&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://programming.dev/pictrs/image/8140dda6-9512-4297-ac17-d303638c90a6.png&quot; style=&quot;width: 220px;身高：221px;“ />; &lt;br />; &lt;br />;卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 卢西亚 ... &lt;a href=&quot;https://hackernews.betacat.io/#spending-3- Months-investigating-a-7-year-old-bug-and-fixing-it-in-1-line-of-code&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=40749624&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我们不再使用 LangChain 来构建我们的 AI 代理&lt;/stitle>; &lt;id>;https://www.octomind.dev/blog/why-we-no-更长使用-langchain-for-building-our-ai-agents&lt;/id>; &lt;更新>;2024-06-20T16:01:27.632052Z&lt;/更新>; &lt;link href=&quot;https://www.octomind.dev /blog/why-we-no-longer-use-langchain-for-building-our-ai-agents&quot;/>; &lt;author>; &lt;name>;ma_za&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=ma_​​za&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cdn.prod.website-files.com/647618f73e4f16d380e8eed9/666abdd1a2dd970e1452b269_DYI-octos.webp&quot;样式=“宽度：220px； height: 126px;&quot; />;&lt;br />;作者分享了他们与 LangChain（一个用于构建 LLM 支持的应用程序的框架）的斗争，以及其严格的高级抽象如何使他们的代码库变得更加复杂和难以维护。他们最终取代了 LangChain采用模块化构建块方法，这使他们的团队能够更快地开发且摩擦更少，并推荐这种方法用于其他人工智能...... &lt;a href=&quot;https://hackernews.betacat.io/#we-no- long-use-langchain-for-building-our-ai-agents&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40739982&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;Show HN：我制作了一款益智游戏，轻轻地介绍了我最喜欢的数学奥秘&lt;/stitle>; &lt;id>;https://www.rahulilango.com/coloring/&lt;/id>; &lt;updated>;2024-06-20T16:01： 27.632759Z&lt;/更新>; &lt;link href=&quot;https://www.rahulilango.com/coloring/&quot;/>; &lt;作者>; &lt;名称>;MCSP&lt;/名称>; &lt;uri>;https://news.ycombinator.com/ user?id=MCSP&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;为英国 + 爱尔兰地图着色，以便两个物理边界区域不会具有相同的颜色&lt;a href=&quot;https://hackernews. betacat.io/#show-hn-i-made-a-puzzle-game-that-gently-introduces-my-favorite-math-mysteries&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href= &quot;https://news.ycombinator.com/item?id=40740021&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews .betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Bomb Jack 显示硬件&lt;/stitle>; &lt;id>;https://github.com/martinpiper/BombJack/blob/master/README.md&lt;/ id>; &lt;更新>;2024-06-21T04:01:27.633123Z&lt;/更新>; &lt;link href=&quot;https://github.com/martinpiper/BombJack/blob/master/README.md&quot;/>; &lt;作者>; &lt;名称>;mrandish&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mrandish&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// raw.githubusercontent.com/martinpiper/BombJack/master/Capture.PNG&quot; style=&quot;width: 220px; height: 214px;&quot; />;&lt;br />;作者使用 Proteus 创建了数字显示驱动程序模拟，以复制原始 Bomb Jack 街机硬件的视频显示部分，添加原始设计中不存在的额外功能。该模拟可用于调试原始板中的故障并提供接受数字信号的数字显示驱动程序模型，使其成为了解... &lt;a href=&quot;https://hackernews.betacat.io/#bomb-jack-display -hardware&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40745830&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>; &lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;模糊地图&lt;/stitle>; &lt;id>;https:// /www.fuzzmap.io/&lt;/id>; &lt;更新>;2024-06-20T19:01:27.633484Z&lt;/更新>; &lt;link href=&quot;https://www.fuzzmap.io/&quot;/>; &lt;作者>; &lt;名称>;PaulHoule&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=PaulHoule&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// jyc-static.com/a8ae38d4673b62a50982cb85907ed112fc3f43ae35362eff1499ece5bb591826&quot; style=&quot;宽度：220px; height: 98px;&quot; />;&lt;br />;Fuzz Map 是一种使用代码覆盖率自动识别 GUI 应用程序中的状态并构建可视化地图以帮助开发人员了解应用程序行为的工具。该工具使用代码覆盖率来识别其具有的状态已经看到，使其比随机模糊测试更有效，并允许它更有效地探索状态&lt;a href=&quot;https://hackernews.betacat.io/#fuzz-map&quot; target=&quot;_blank&quot;>;[summary]&lt;/ a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40742014&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base= &quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;阿特金森抖动 (2021)&lt;/stitle>; &lt;id>;https://beyondloom.com/blog/dither.html&lt; /id>; &lt;更新>;2024-06-20T16:01:27.633840Z&lt;/更新>; &lt;link href=&quot;https://beyondloom.com/blog/dither.html&quot;/>; &lt;作者>; &lt;名称>;jdblair&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=jdblair&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://beyondloom.com/blog /dither-figures/david.png&quot; style=&quot;width: 220px; height: 263px;&quot; />;&lt;br />;Macintosh 计算机具有分辨率为 512x342 的方形像素黑白显示屏，使用 Floyd-Steinberg 和 Atkinson 抖动等技术的抖动图像来模拟灰度。这些算法分配误差在相邻像素之间创建视觉上令人愉悦的图像，阿特金森算法以牺牲一些细节为代价产生更丰富的对比度。 >;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40739710&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;信封背面 (1984) [pdf]&lt;/stitle>; &lt;id>;https: //www.seltzer.com/margo/teaching/CS508.19/background/p180-bentley.pdf&lt;/id>; &lt;更新>;2024-06-21T06:01:27.634193Z&lt;/更新>; &lt;link href=&quot;https ://www.seltzer.com/margo/teaching/CS508.19/background/p180-bentley.pdf&quot;/>; &lt;作者>; &lt;名称>;tjalfi &lt;/名称>; &lt;uri>;https://news.ycombinator.com /user?id=tjalfi&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;0 0 0 1 - 0 7 8 2 / 8 4 / 0 3 0 0 - 0 1 8 0 可靠性/可用性 &lt;a href =&quot;https://hackernews.betacat.io/#the-back-of-the-envelope-1984-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news .ycombinator.com/item?id=40730178&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed .xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：使用 Ollama、Transformers 和 Coqui TTS 工具包的本地语音助手&lt;/stitle>; &lt;id>;https://github.com/mezbaul-h/june&lt;/id>; &lt;更新>;2024-06-20T23:01:27.634553Z&lt;/更新>; &lt;link href=&quot;https://github.com/mezbaul-h/june&quot;/>; &lt;作者>; &lt;名称>;mezba &lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=mezba&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/58864a1d95c6a698e09af849ccb3dc3e05e5ac00d09b0f2f9f570e9c60dd5440/ mezbaul-h/六月&quot; style=&quot;width: 220px; height: 110px;&quot; />;&lt;br />;June-va 是一款本地语音助手，它结合了语言模型功能、语音识别和文本到语音合成，允许在本地机器上进行语音辅助交互，而无需将数据发送到可以使用配置文件自定义助手，该文件会覆盖默认设置并允许进行部分修改以适应特定的用例。 voice-assistant-using-ollama-transformers-and-coqui-tts-toolkit&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id= 40744293&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot; text&quot;>;沼泽砾石过滤：大自然净化的水（2015）&lt;/stitle>; &lt;id>;https://www.pondtrademag.com/bog-gravel-filter-water-cleaned-by-mother-nature/&lt;/ id>; &lt;更新>;2024-06-20T23:01:27.634904Z&lt;/更新>; &lt;link href=&quot;https://www.pondtrademag.com/bog-gravel-filter-water-cleaned-by-mother-nature/ &quot;/>; &lt;author>; &lt;name>;ciconia&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ciconia&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =“https://www.pondtrademag.com/wp-content/uploads/1507bog008a.jpg”样式=“宽度：220px; height: 198px;&quot; />;&lt;br />;沼泽砾石过滤器是一种将废物转化为资源的自然而有效的方法，将鱼类和植物废物转化为肥料，供过滤器中生长的植物消耗，从而产生清澈的水和通过建造具有正确设计、植物和砾石的沼泽砾石过滤器，池塘所有者可以享受一个繁荣的生态系统，只需最少的维护，并且不会产生任何回调。 &lt;a href=&quot;https://hackernews.betacat.io /#bog-gravel-filter-water-cleaned-by-mother-nature-2015&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=40734564&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;让我们从头开始编写一款视频游戏，就像 1987 年一样&lt;/stitle>; &lt;id>;https://gaultier.github.io/blog/write_a_video_game_from_scratch_like_1987.html&lt;/id>; &lt;updated>;2024-06-20T16： 01:27.635279Z&lt;/updated>; &lt;link href=&quot;https://gaultier.github.io/blog/write_a_video_game_from_scratch_like_1987.html&quot;/>; &lt;author>; &lt;name>;LorenDB&lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=LorenDB&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/gaultier/minesweeper-from-scratch/master /screenshot.png&quot; style=&quot;宽度: 220px; height: 239px;&quot; />;&lt;br />;作者使用 X11 协议、低级 GUI 库和 Odin 编程语言创建了一个扫雷游戏，从而生成了一个可以在任何 Unix 系统上运行的小型独立可执行文件。本文提供了有关如何使用 X11 创建 GUI 应用程序的分步指南，包括实现游戏逻辑、处理事件和渲染图形。 -s-write-a-video-game-from-scratch-like-it-s-1987&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com /item?id=40737370&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;婴儿和幼儿如何学习理解语言&lt;/stitle>; &lt;id>;https://lithub.com/how-babies-and-young-children-learn-to-understand-language/ &lt;/id>; &lt;更新>;2024-06-21T00:01:27.635769Z&lt;/更新>; &lt;link href=&quot;https://lithub.com/how-babies-and-young-children-learn-to-understand-语言/&quot;/>; &lt;作者>; &lt;名称>;胡克&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=胡克&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>; &lt;img src=&quot;https://s26162.pcdn.co/wp-content/themes/rigel/images/social_logo.png&quot; style=&quot;width: 220px; height: 123px;&quot; />;&lt;br />;认为儿童的语言发展反映了人类祖先的观点是有问题的，相反，研究人员关注的是如何通过专门的心理过程或通用学习来习得语言。婴儿通过识别来学习语言音节之间的转换概率，使他们能够识别单词并理解其含义，正如 1996 年的一个...... &lt;a href=&quot;https://hackernews.betacat.io/#how-babies-and-young-children-learn -to-understand-language&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40744558&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;吉利德疫苗可预防所有试验中的艾滋病毒病例&lt;/stitle>; &lt;id>;https://www.bloomberg.com/news/articles/2024-06-20/gilead-shot-prevents-100-of-hiv-cases-in-trial-of-african-women &lt;/id>; &lt;更新>;2024-06-20T20:01:27.636636Z&lt;/更新>; &lt;link href=&quot;https://www.bloomberg.com/news/articles/2024-06-20/gilead-shot- Prevents-100-of-hiv-cases-in-trial-of-african-women&quot;/>; &lt;author>; &lt;name>;tooomuchtodo&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id= tomuchtodo&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;吉利德科学公司的实验性注射剂lenacapavir在一项成功的试验中预防了非洲妇女和女孩100%的艾滋病毒感染病例。与每日服药或每两个月注射一次相比，每年两次注射可以提供更易于使用的艾滋病毒预防选择。 &lt;a href=&quot;https://hackernews.betacat.io/#gilead-shot-prevents-all-hiv-cases-in-trial&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=40742163&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;为视频生成音频&lt;/stitle>; &lt;id>;https://deepmind.google/discover/blog/generate-audio-for-video/&lt;/ id>; &lt;更新>;2024-06-20T23:01:27.637017Z&lt;/更新>; &lt;link href=&quot;https://deepmind.google/discover/blog/generate-audio-for-video/&quot;/>; &lt;作者>; &lt;name>;rvnx&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=rvnx&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// /lh3.googleusercontent.com/Lzihw4F171DQeSgZ9q0MUONzbt1BkbK1sOgnqvLAV3AUIQQ1UJ4niEXOTgWiiyKZrJaCpE4Q6APwV8RRQj7a86_2yDlbIV6WUzD6S_Gu2mjuZDyVWqo=w1072-h603-n -nu&quot;样式=&quot;宽度：220px；高度：124px；&quot; />;&lt;br />;Google 的 V2A 技术通过将视频像素与自然语言文本提示相结合来生成同步的视听内容，从而实现丰富的音景和逼真的音效。该技术采用基于扩散的方法，可以为任何视频输入生成无限数量的音轨，并提供使用积极或消极提示的可选指导。 &lt;a href=&quot;https://hackernews.betacat.io/#generate-audio-for-video&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=40744098&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;俄罗斯方块字体（2020）&lt;/stitle>; &lt;id>;https://erikdemaine.org/fonts/tetris/&lt;/id>; &lt;更新>;2024-06-20T16:01:27.637390Z &lt;/更新>; &lt;link href=&quot;https://erikdemaine.org/fonts/tetris/&quot;/>; &lt;作者>; &lt;名称>;Bluestein&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user? id=Bluestein&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;受俄罗斯方块启发的字体使用俄罗斯方块来创建字母和数字，并具有解决难题的挑战。该字体由 BurrTools 设计，灵感来自 BRIDGES 2017 与 Kadon Enterprises 的合作。 &lt;a href=&quot;https://hackernews.betacat.io/#tetris-font-2020&quot; target=&quot;_blank&quot;>;[summary]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=40737294&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;