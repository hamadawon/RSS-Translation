<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-06-11T02:55:45.225786Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;author>; &lt;name>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;梭子鱼敦促更换而不是修补其电子邮件安全网关&lt;/stitle>; &lt;id>;https://krebsonsecurity.com/2023/06/barracuda-urges-replacing-not-patching -its-email-security-gateways/&lt;/id>; &lt;更新>;2023-06-10T20:55:21.218940Z&lt;/更新>; &lt;link href=&quot;https://krebsonsecurity.com/2023/06/barracuda-urges -replacing-not-patching-its-email-security-gateways/&quot;/>; &lt;author>; &lt;name>;LinuxBender&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=LinuxBender&lt;/uri >; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://krebsonsecurity.com/b-wiz/7.png&quot; style=&quot;宽度：220px；高度：198px；&quot; />;&lt;br />;Barracuda Networks 已敦促客户更换其电子邮件安全网关 (ESG) 设备，而不是在先前未知的漏洞被攻击者利用后仅应用软件更新。该公司表示，该恶意软件是在允许攻击者对设备进行持续后门访问的设备子集上识别出来的，并且在某些系统上发现了数据泄露的证据。 &lt;a href=&quot;https://hackernews.betacat.io/#barracuda-urges-replacing-not-patching-its-email-security-gateways&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36274525&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Gren – 一把 Elm 叉子&lt;/stitle>; &lt;id>;https://gren-lang.org/&lt;/id>; &lt;updated>;2023- 06-10T20:55:21.219514Z&lt;/updated>; &lt;link href=&quot;https://gren-lang.org/&quot;/>; &lt;author>; &lt;name>;jgilias&lt;/name>; &lt;uri>;https://news. ycombinator.com/user?id=jgilias&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://gren-lang.org/big_icon.png&quot; style=&quot;宽度：220px ; 高度：220px;&quot; />;&lt;br />;Gren 是一种函数式编程语言，具有精心管理的副作用和强大的静态类型系统。该语言由一些具有人类可读名称的概念组成，这些概念很好地组合在一起，因此您可以事半功倍。用 Gren 编写的程序很简单，很少或没有运行时异常，并且使用起来很有趣。 &lt;a href=&quot;https://hackernews.betacat.io/#gren-an-elm-fork&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator。 com/item?id=36274813&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;为什么在 Erlang VM 上进行机器学习？&lt;/stitle>; &lt;id>;https://underjord.io/why-ml-on-erlang.html&lt;/id>; &lt;updated>;2023- 06-10T22:55:21.219939Z&lt;/updated>; &lt;link href=&quot;https://underjord.io/why-ml-on-erlang.html&quot;/>; &lt;author>; &lt;name>;lawik&lt;/name>; &lt;uri >;https://news.ycombinator.com/user?id=lawik&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://underjord.io/img/logo2.svg &quot; style=&quot;宽度：220px；高度：221px；&quot; />;&lt;br />;作者讨论了他们对机器学习及其实际应用的看法，特别是在实时字幕和数据处理等实用任务中。他们还比较了在机器学习项目中使用 Python 和 Elixir 的优缺点。 &lt;a href=&quot;https://hackernews.betacat.io/#why-do-ml-on-the-erlang-vm&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=36255546&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;花生酱水母时间&lt;/stitle>; &lt;id>;https://gebir.ge/blog/peanut-butter-jellyfin-time/&lt;/id>; &lt;updated >;2023-06-10T21:55:21.220397Z&lt;/updated>; &lt;link href=&quot;https://gebir.ge/blog/peanut-butter-jellyfin-time/&quot;/>; &lt;作者>; &lt;name>;makrelmad&lt;/ name>; &lt;uri>;https://news.ycombinator.com/user?id=makrelmad&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Jellyfin 是一个由志愿者构建的媒体解决方案，让您可以控制你的媒体。它可以安装在任何主机上，没有任何附加条件。我们总是可以通过观察其他人如何做事来学习 3。如果您对代码不满意，可以从 github.com/seasoned 下载源代码。我一直致力于呈现的 rce 链，以展示 &lt;a href=&quot;https://hackernews.betacat.io/#peanut-butter-jellyfin-time&quot; target=&quot;_blank&quot;>;[summary ]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;梅赛德斯在自动驾驶方面击败特斯拉加州&lt;/stitle>; &lt;id>;https://www.theregister.com/2023/06/09/mercedes_california_tesla/&lt;/id>; &lt;updated>;2023-06-10T13:55:21.220821Z&lt;/updated>; &lt;link href =&quot;https://www.theregister.com/2023/06/09/mercedes_california_tesla/&quot;/>; &lt;author>; &lt;name>;belter&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id =belter&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://regmedia.co.uk/2023/06/09/californiahighway.jpg&quot; style=&quot;width: 220px;高度：220px；&quot; />;&lt;br />;梅赛德斯-奔驰在加利福尼亚州首次获得授权，可以向公众出售或租赁带有自动驾驶系统的车辆，但有限制。 DRIVE PILOT 系统是一个 3 级自动化系统，可以在某些情况下主动执行驾驶任务，而无需人类驾驶员的主动控制，尽管驾驶员必须留在方向盘后面以在出现提示时接管。 &lt;a href=&quot;https://hackernews.betacat.io/#mercedes-beats-tesla-to-autonomous-driving-in-california&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36270413&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;纽约市将向前往市区的司机收费&lt;/stitle>; &lt;id>;https://www.cnn.com/2023/06/10/business/ congestion-pricing-new-york-city-transportation/index.html&lt;/id>; &lt;updated>;2023-06-10T14:55:21.221230Z&lt;/updated>; &lt;link href=&quot;https://www.cnn.com /2023/06/10/business/congestion-pricing-new-york-city-transportation/index.html&quot;/>; &lt;author>; &lt;name>;rntn&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=rntn&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://media.cnn.com/api/v1/images/stellar/prod/230530162322-04 -congestion-pricing-new-york-city-restricted.jpg?c=16x9&amp;q=h_720,w_1280,c_fill&quot; style=&quot;宽度：220px；高度：147px；&quot; />;&lt;br />;拜登总统的政府允许纽约市实施一项名为“拥堵收费”的收费计划，向进入曼哈顿下城的司机收费，建议在高峰时段收费 9 至 23 美元。收费旨在减少拥堵，改善公共交通，并产生收入以资助 150 亿美元的未来投资，以实现城市公共交通系统的现代化。 &lt;a href=&quot;https://hackernews.betacat.io/#new-york-city-will-charge-drivers-going-downtown&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36270597&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;列出一项任务，完成它，划掉它&lt;/stitle>; &lt;id>;https://www.oliverburkeman.com/onething&lt;/id>; &lt;更新>;2023-06-10T15:55:21.221613Z&lt;/更新>; &lt;link href=&quot;https://www.oliverburkeman.com/onething&quot;/>; &lt;author>; &lt;name>;Tomte&lt;/name>; &lt;uri>;https //news.ycombinator.com/user?id=Tomte&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.wixstatic.com/media/053ea9_019073577d0445b6b521687231c3166f~mv2 .png/v1/fill/w_268,h_247,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/1621444132.png&quot; style=&quot;宽度：220px；高度：203px；&quot; />;&lt;br />;作者反思了他们在紧急情况下保持冷静和机智的能力，将其归因于没有自我怀疑和清楚需要做什么。他们认为，提高工作效率的关键不是尝试同时处理多项任务，而是一次专注于一件事，然后更好地决定下一步该做什么。 &lt;a href=&quot;https://hackernews.betacat.io/#list-one-task-do-it-cross-it-out&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36253882&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;硬盘容量的大飞跃：32 TB HAMR 驱动器即将面世，40 TB 即将面世&lt;/stitle>; &lt;id>;https://www.anandtech.com /show/18901/big-leap-for-hdds-32-tb-hamr-drive-is-coming-40tb-on-horizo​​n&lt;/id>; &lt;更新>;2023-06-10T22:55:21.221994Z&lt;/更新>; &lt;link href=&quot;https://www.anandtech.com/show/18901/big-leap-for-hdds-32-tb-hamr-drive-is-coming-40tb-on-horizo​​n&quot;/>; &lt;作者>; &lt;name>;walterbell&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=walterbell&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https: //images.anandtech.com/doci/18901/HAMR-actuator-head-and-laser-illustration-hero_678x452.jpg&quot; style=&quot;宽度：220px；高度：124px；&quot; />;&lt;br />;希捷将推出采用热辅助磁记录 (HAMR) 技术的下一代硬盘，首款商用 HAMR 硬盘将于 2023 年第三季度提供 32TB 的容量。新的记录​​技术将使相对较快的容量增加到 40 TB，大容量 HAMR HDD 将与尚未发布的 24 TB 和 28 TB 驱动器共存。 &lt;a href=&quot;https://hackernews.betacat.io/#big-leap-for-hard-drive-capacities-32-tb-hamr-drives-due-soon-40tb-on-horizo​​n&quot; target=&quot;_blank &quot;>;[总结]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36253499&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry >; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;MusicGen：简单可控的音乐生成&lt;/stitle>; &lt;id>;https://ai .honu.io/papers/musicgen/&lt;/id>; &lt;更新>;2023-06-10T16:55:21.222440Z&lt;/更新>; &lt;link href=&quot;https://ai.honu.io/papers/musicgen/&quot; />; &lt;author>; &lt;name>;og_kalu&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=og_kalu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;文章介绍MusicGen，一种单一的语言模型，可以生成高质量的音乐样本，同时以文本描述或旋律特征为条件。它优于标准文本到音乐基准测试中的其他评估基线。 &lt;a href=&quot;https://hackernews.betacat.io/#musicgen-simple-and-controllable-music-generation&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36271926&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Intel x86-SIMD-sort (AVX-512) 性能分析&lt;/stitle>; &lt;id>;https://github.com/Vultapher/sort-research-rs /blob/main/writeup/intel_avx512/text.md&lt;/id>; &lt;更新>;2023-06-10T18:55:21.222865Z&lt;/更新>; &lt;link href=&quot;https://github.com/Vultapher/sort- research-rs/blob/main/writeup/intel_avx512/text.md&quot;/>; &lt;author>; &lt;name>;Twirrim&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Twirrim&lt;/uri >; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/Vultapher/sort-research-rs/main/writeup/intel_avx512/assets/hot-u64-10k- windows.png&quot; style=&quot;宽度：220px；高度：289px；&quot; />;&lt;br />;英特尔发布了一个新的 AVX-512 排序库，它比其他通用排序实现要快得多。然而，基准测试很复杂，不同实现的性能可能因输入大小和模式等因素而异。 &lt;a href=&quot;https://hackernews.betacat.io/#a-performance-analysis-of-intel-x86-simd-sort-avx-512&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=36273544&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;许可对于解决人工智能风险既不可行也无效&lt;/stitle>; &lt;id>;https://aisnakeoil.substack.com/p/ licensing-is-neither-feasible-nor&lt;/id>; &lt;updated>;2023-06-10T13:55:21.223284Z&lt;/updated>; &lt;link href=&quot;https://aisnakeoil.substack.com/p/licensing-is -neither-feasible-nor&quot;/>; &lt;author>; &lt;name>;headalgorithm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=headalgorithm&lt;/uri>; &lt;/author>; &lt;content type= “html”>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media .s3.amazonaws.com%2Fpublic%2Fimages%2F4239d7c6-4f55-4254-91f2-20b9b2bec77e_1118x639.jpeg&quot; style=&quot;宽度：220px；高度：119px；&quot; />;&lt;br />;这篇文章讨论了将不扩散作为使 AI 更安全的一种方式的想法，但认为许可和执法将是困难且无效的。相反，作者建议学术界、公司和非政府组织组成的多元化团体应该开发和评估最先进的模型来应对人工智能风险。 &lt;a href=&quot;https://hackernews.betacat.io/#licensing-is-neither-feasible-nor-effective-for-addressing-ai-risks&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=36270303&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Show HN: Bloop – 使用 LLM 代理回答有关您的代码的问题&lt;/stitle>; &lt;id>;https://github.com/ BloopAI/bloop&lt;/id>; &lt;updated>;2023-06-10T18:55:21.223697Z&lt;/updated>; &lt;link href=&quot;https://github.com/BloopAI/bloop&quot;/>; &lt;author>; &lt;name>;louiskw &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=louiskw&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://camo.githubusercontent .com/ba0e103fefac552c592f7bf6aec3d2e7b6d1ef57160355eea41ba6c57c9e6b6c/68747470733a2f2f6173736574732e626c6f6f702e61692f626c6f6f705f 6769746875625f6c6f676f5f6c696768742e706e67&quot; style=&quot;宽度：220px；高度：83px；&quot; />;&lt;br />;Bloop 是一个开发者助手，它使用 GPT-4 来回答有关代码库的问题。它可以使用自然语言、正则表达式和过滤查询来搜索本地和远程存储库，以提高处理大型代码库时的效率。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-bloop-answer-questions-about-your-code-with-an-llm-agent&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36260961&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;OBS 合并 WebRTC 支持&lt;/stitle>; &lt;id>;https://github.com/obsproject/obs-studio/提交/851a8c216e14617fb523951839f3bdb240e85141&lt;/id>; &lt;更新>;2023-06-10T18:55:21.224109Z&lt;/更新>; &lt;link href=&quot;https://github.com/obsproject/obs-studio/commit/851a8c216e14617 fb523951839f3bdb240e85141&quot;/>; &lt;作者>; &lt;name>;Sean-Der&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Sean-Der&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/541be099d92adbe96225ecd678fd2a003a3e2f8a468e8d20b76398880e805195/obsproject/obs-studio/commit/851a8c216e14617fb523951839f3bdb 240e85141&quot; style=&quot;宽度：220px；高度：110px；&quot; />;&lt;br />;这增加了一个 WHIP 输出 &amp;amp;amp;相关服务。 - 来自 DDRBoxman 的代码灵感 - 由 Sean DuBois &amp;amp;amp; 实施tt2468 - pkv 的各种修复和贡献。合着：tt24... &lt;a href=&quot;https://hackernews.betacat.io/#obs-merges-webrtc-support&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36273075&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;展示HN：用600行C89编写的RISC-V核心&lt;/stitle>; &lt;id>;https://github.com/mnurzia/rv &lt;/id>; &lt;updated>;2023-06-10T13:55:21.224517Z&lt;/updated>; &lt;link href=&quot;https://github.com/mnurzia/rv&quot;/>; &lt;author>; &lt;name>;mnurzia&lt;/name >; &lt;uri>;https://news.ycombinator.com/user?id=mnurzia&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/ dc61f1caa2dbeae4a6618cf2beaddc61bd9fe12087fb6f28c27379490f64d097/mnurzia/rv&quot; style=&quot;宽度：220px；高度：110px；&quot; />;&lt;br />;转储一个从 0x80000000 开始的二进制文件，它可以由 rv 直接加载，如上例所示：不使用任何大于 32 位的整数类型，即使是乘法，因为它是用C89写的。以不完全符合 C89/99 的方式假定整数类型的宽度。很快就会修复这个问题，我正在研究一个防水的 &lt;stdint.h>;;对于 C89。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-risc-v-core-written-in-600-lines-of-c89&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=36270150&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;播放（一）Linux手册页&lt;/stitle>; &lt;id>;https://linux.die.net/man/1 /播放&lt;/id>; &lt;更新>;2023-06-11T01:55:21.224898Z&lt;/更新>; &lt;link href=&quot;https://linux.die.net/man/1/play&quot;/>; &lt;作者>; &lt;名称>;brudgers&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=brudgers&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// linux.die.net/style/logo.svg&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;SoX 以最流行的格式读取和写入音频文件，并且可以选择对它们应用效果；它可以组合多个输入源、合成音频，并且在许多系统上充当通用音频播放器或多轨录音机。它还具有将输入拆分为多个输出文件的有限能力。几乎所有 SoX 功能都可以使用 sox 命令，但是，为了简化播放和录制音频，如果调用 SoX 作为播放，输出文件将自动设置为默认声音设备，如果调用为 rec，则使用默认声音设备作为输入源。此外，soxi(1) 命令提供了一种仅查询音频文件头信息的便捷方式。 SoX 的核心是一个名为 libSoX 的库。那些对扩展 SoX 或在其他程序中使用它感兴趣的人应该参考 libSoX 手册页：libsox(3)。 SoX 是一种命令行音频处理工具，特别适合进行快速、简单的编辑和批处理。如果您需要交互式图形音频编辑器，请使用 audacity(1)。整个 SoX 处理链可以总结如下： 为了展示它在实践中的工作原理，这里选择了一些 SoX 可能如何使用的示例。简单地将 Sun AU 格式的音频文件转换为 Microsoft WAV 文件，同时执行相同的格式转换，但也会更改音频采样率和音频文件。样本大小，缩混为单声道，并应用音量和抖动效果。转换“原始” （又名“无头”）音频到自描述文件格式，调整音频速度，连接两个音频文件，并将两个音频文件混合在一起。播放一组音频文件，同时应用低音增强效果，play -n -c1 synth sin %-12 sin %-9 sin %-5 sin %-2 fade q 0.1 1 0.1 播放合成的“A minor seventh” #39;和弦与管风琴声音，录制 10 秒的立体声音频，并在多轨录音中录制新曲目。录制音频流，例如 LP/盒式磁带，并在有 2 秒静音的位置拆分为多个音频文件。也不会开始录制，直到它检测到音频正在播放并在看到 10 分钟的静音后停止。注意 有关如何使用所有 SoX 参数、文件格式和效果的详细说明，请参见本手册下方和 soxformat(7)。 SoX 可以使用两种类型的音频文件格式。第一个是“自我描述”；这些格式包括一个标题，它完整地描述了后面的音频数据的特征。第二种是‘headerless’； （或“原始数据”）；这里，必须使用 SoX 命令行来描述音频数据特性。以下四个特征足以描述音频数据的格式，以便可以使用 SoX 对其进行处理： 每秒样本的采样率（“赫兹”或“赫兹”）。例如，数字电话传统上使用 8000 Hz（8 kHz）的采样率；音频光盘使用 44100 Hz (44.1 kHz)；数字音频磁带和许多计算机系统使用 48 kHz；专业音频系统通常使用 96 或 192 kHz。用于存储每个样本的位数。最流行的是 16 位（两个字节）； 8 位（一个字节）在早期的计算机音频中很流行，并且仍在电话中使用； 24 位（三个字节）主要用作专业音频领域的中间格式。也使用其他尺寸。每个音频样本的表示方式（或“编码”）。一些编码具有不同字节顺序或位顺序的变体；一些“压缩”音频数据，即存储的音频数据比其他格式参数和样本数所暗示的占用更少的空间（即磁盘空间或传输带宽）。常用的编码类型包括浮点、μ-law、ADPCM、有符号整数 PCM 和 FLAC。文件中包含的音频通道数。一种（“单声道”）和两种（“立体声”）被广泛使用。 “环绕声”音频通常包含六个或更多通道。术语“比特率”；有时用作音频格式的总体衡量标准，并且可能包含上述所有元素。大多数自描述格式也允许文本“评论”。嵌入到可用于以某种方式描述音频的文件中，例如音乐、标题、作者等。音频文件注释的一个重要用途是传达“重放增益”；信息。 SoX 支持应用 Replay Gain 信息，但不支持生成它。请注意，默认情况下，SoX 将输入文件注释复制到支持注释的输出文件，因此如果输入文件中存在重放增益信息，则输出文件可能包含重放增益信息。在这种情况下，如果执行了简单格式转换以外的任何操作，则输出文件重放增益信息可能不正确，因此应使用支持此功能的工具（不是 SoX）重新计算。 SoX 可以使用多种机制来确定或设置音频文件的格式特征。根据情况，可以使用不同的机制来确定或设置个体特征。为了确定输入文件的格式，SoX 将按照优先顺序和给定或可用的方式使用： 要设置输出文件格式，SoX 将按照优先顺序和给定或可用的方式使用： 对于所有文件，SoX 将如果无法确定文件类型，则错误退出；可能需要添加或更改命令行格式选项才能解决该问题。一些系统提供了不止一种类型的（兼容 SoX 的）音频驱动程序，例如 ALSA &amp;amp; OSS, 或 SUNAU &amp;amp;奥。系统也可以有多个音频设备（又名“声卡”）。如果 SoX 内置了多个音频驱动程序，并且 SoX 在使用 rec 或 play 时选择的默认值不是所需的，则可以使用 AUDIODRIVER 环境变量覆盖默认值。例如（在许多系统上）：对于 rec、play 和 sox，AUDIODEV 环境变量可用于覆盖默认音频设备； eg or （注意set命令的语法可能因系统不同而不同）当播放音频输出设备不支持的采样率的文件时，SoX会自动调用rate effect执行必要的采样率转换。为了与旧硬件兼容，这里默认速率质量级别设置为“低”；但是，如果需要，可以通过明确指定具有不同质量级别的速率效果来更改，例如通过将环境变量 PLAY_RATE_ARG 设置为所需的质量选项，例如（请注意，set 命令的语法可能因系统而异.) 为了帮助设置合适的录音电平，SoX 包含一个简单的 VU 表，可以按如下方式调用（在进行实际录音之前）：应调整录音电平（使用系统提供的混音器程序，而不是 SoX），以便仪表最多偶尔会满刻度，而永远不会“红色”。 （显示感叹号）。许多压缩音频的文件格式在这样做时会丢弃一些音频信号信息；转换为这种格式然后再转换回来不会产生原始音频的精确副本。对于电话中使用的许多格式（例如 A-law、GSM），低信号带宽比高音频保真度更重要，以及便携式音乐播放器中使用的许多格式（例如 MP3、Vorbis），其中足够的保真度可以是即使在使便携式播放器实用所需的大压缩比下也能保留。丢弃音频信号信息的格式称为“有损”，不丢弃的格式称为“无损”。 “质量”一词用于衡量使用有损格式时原始音频信号的再现程度。使用 SoX 的音频文件转换在可能的情况下是无损的，即当不使用有损压缩时，当不降低采样率或通道数时，以及当目标格式中使用的位数不少于源格式时。例如，从 8 位 PCM 格式转换为 16 位 PCM 格式是无损的，但从 8 位 PCM 格式转换为（8 位）A-law 则不是。 NB SoX 在执行任何音频处理之前将所有音频文件转换为内部未压缩格式；这意味着操作以有损格式存储的文件可能会导致音频保真度进一步下降。例如，withSoX 首先解压缩输入的 MP3 文件，然后应用修剪效果，最后通过重新压缩音频创建输出 MP3 文件 - 可能会降低保真度，高于创建输入文件时发生的保真度。因此，如果最终需要的是有损压缩音频，强烈建议使用无损文件格式执行所有音频处理，然后仅在最后阶段转换为有损格式。注意：与使用多个 SoX 调用产生的结果相比，使用单个 SoX 调用应用多个效果通常会产生更准确的结果；因此，这也是推荐的。削波是当音频信号电平（或“音量”）超过所选表示范围时发生的失真。它几乎总是不受欢迎的，因此通常应该通过调整发生削波点之前的电平来纠正。在 SoX 中，如您所料，当使用 vol 效果增加音频音量时，可能会发生削波，但也可能会发生在许多其他效果、将一种格式转换为另一种格式时，甚至只是播放音频时。播放音频文件通常涉及重新采样和模拟组件的处理，这些模拟组件可能会引入小的直流偏移和/或放大，如果音频信号电平最初太接近削波点，所有这些都会产生失真。由于这些原因，通常要确保音频文件的信号电平不超过可用最大（线性）范围的 70% 左右，因为这将避免大多数削波问题。 SoX 的统计效果可以帮助确定音频文件中的信号电平；增益或音量效果可用于防止削波，确保高音提升不会削波。如果在处理过程中的任何时候发生削波，SoX 将显示一条警告消息。可以配置 SoX 的输入组合器（参见下面的选项）以使用以下任何方法组合多个文件：“连接”、“序列”、“混合” 39;、“混合动力”或“合并”。默认方法是“序列”；用于播放，并“连接”对于 rec 和 sox。对于“序列”以外的所有方法，多个输入文件必须具有相同的采样率；如有必要，可以使用单独的 SoX 调用在组合之前调整采样率。如果“连接”选择合并方法（通常，这是默认设置）然后输入文件也必须具有相同数量的通道。来自每个输入的音频将按照给定的顺序连接起来以形成输出文件。 “序列”自动选择组合方法进行播放。它类似于“连接”；因为来自每个输入文件的音频被串行发送到输出文件，但是这里输出文件可能会在输入文件之间的相应转换时关闭和重新打开 - 这可能正是将不同类型的音频发送到输出时所需要的设备，但当输出是普通文件时通常没有用。如果“混合”或“混合动力”选择组合方法，则必须给出两个或多个输入文件，并将它们混合在一起形成输出文件。每个输入文件中的通道数不必相同，但是，如果它们不同，SoX 会发出警告，并且输出文件中的某些通道不会包含来自每个输入文件的音频。混合音频文件不能取消混合（不参考原始输入文件）。如果“合并”选择合并方法，则必须给出两个或多个输入文件，并将合并在一起形成输出文件。每个输入文件中的通道数不必相同。合并后的音频文件包含来自所有输入文件的所有通道；使用具有混音效果的 SoX 的多次调用可以取消合并。例如，两个单声道文件可以合并为一个立体声文件；第一个和第二个单声道文件将成为立体声文件的左右声道。组合输入文件时，SoX 在音频组合后应用任何指定的效果（例如，包括音量调节效果）；然而，在组合发生之前能够单独设置输入的音量（即“平衡”）通常很有用。对于所有组合方法，可以使用 -v 选项（见下文）手动调整输入文件的音量，该选项可为一个或多个输入文件指定；如果仅针对某些输入文件给出了音量调整，则其他文件不会进行音量调整。在某些情况下，可能会应用自动音量调整（见下文）。 -V 选项（下方）可用于显示已选择的输入文件音量调整（手动或自动）。与其他方法不同，“混合”如果不执行平衡，组合有可能导致组合器中的削波。所以在这里，如果没有给出手动音量调整，为了确保不会发生削波，SoX 会自动调整每个输入信号的音量（振幅），系数为 1/ ，其中 n 是输入文件的数量。如果这导致音频太安静或不平衡，则可以如上所述手动设置输入文件音量；在混音上使用标准效果是另一种选择。如果混合音频在某些点看起来足够响亮，但在其他点太安静，则应应用动态范围压缩来纠正此问题 - 请参阅压缩扩展效果。凭借“混合动力”， combine 方法，混合音量适当地等于输入信号之一的音量。这是通过使用因子 ¹/ 而不是 ¹/ 进行平衡来实现的。请注意，此平衡因素并不能保证不会发生削波，但是，在许多情况下，削波的数量会很少，并且由此产生的失真是察觉不到的。 SoX 的默认行为是获取一个或多个输入文件并将它们写入单个输出文件。可以通过指定伪效果“newfile”来更改此行为。在效果列表中。然后 SoX 将进入多输出模式。在多输出模式下，当“newfile”之前的效果被创建时，一个新文件被创建。表明他们完成了。在“newfile”之后列出的效果链然后启动并将其输出保存到新文件中。在多输出模式下，一个唯一的编号将自动附加到所有文件名的末尾。如果文件名有扩展名，则在扩展名之前插入数字。可以通过在文件名中应替换数字的任意位置放置 %n 来自定义此行为。可以在 % 之后放置一个可选数字，以指示该数字的最小固定宽度。多输出模式不是很有用，除非在“新文件”之前指定一个可以提前停止效果链的效果。如果在效果链自行停止之前到达文件末尾，则不会创建新文件，因为它是空的。以下是将输入文件的前 60 秒拆分为两个 30 秒文件并忽略其余部分的示例。通常 SoX 会在从输入文件中读取所有可用的音频数据后完成其处理并自动退出。如果需要，可以通过向进程发送中断信号来提前终止它（通常通过按键盘中断键，通常是 Ctrl-C）。在某些情况下这是自然要求，例如使用 SoX 进行录音时。请注意，当使用 SoX 播放多个文件时，Ctrl-C 的行为略有不同：按下一次会导致 SoX 跳到下一个文件；快速连续按两次会导致 SoX 退出。提前停止处理的另一种选择是使用具有时间段或样本计数的效果来确定停止点。修剪效果就是一个例子。一旦所有效果链都停止，那么 SoX 也将停止。文件名可以是简单文件名、绝对或相对路径名或 URL（仅限输入文件）。请注意，URL 支持需要 wget(1) 可用。注意：为 SoX 提供与 SoX 效果名称相同的输入或输出文件名将不起作用，因为 SoX 会将其视为效果规范。唯一的解决方法是避免使用此类文件名；然而，这通常并不困难，因为大多数音频文件名都有文件名“扩展名”，而效果名称则没有。在某些情况下，可以使用以下特殊文件名代替命令行上的普通文件名： - 通过使用特殊文件名“-”，SoX 可以用于简单的管道操作；如果用它代替输入文件名，将导致 SoX 从“标准输入”读取音频数据。 (stdin)，如果用它代替输出文件名，将导致 SoX 将音频数据发送到“标准输出” （标准输出）。请注意，使用此选项时，还必须提供文件类型（请参阅下面的 -t）。这可以用来代替输入文件名，以指定给定程序的标准输出（stdout）用作输入文件。 Unlike - (above), this can be used for several inputs to one SoX command. For example, if &amp;#39;genw&amp;#39; generates mono WAV formatted signals to its standard output, then the following command makes a stereo file from two generated signals: If -t is not given then the signal is assumed (and checked) to be in SoX&amp;#39;s native .sox format (see -p below and soxformat(7)). This can be used in place of an output filename to specify that the SoX command should be used as in input pipe to another SoX command. For example, the command: plays two &amp;#39;files&amp;#39; in succession, each with different effects. This can be used in place of an input or output filename to specify that the default audio device (if one has been built into SoX) is to be used. This is akin to invoking rec or play (as described above). This can be used in place of an input or output filename to specify that a &amp;#39;null file&amp;#39; is to be used. Note that here, &amp;#39;null file&amp;#39; refers to a SoX-specific mechanism and is not related to any operating-system mechanism with a similar name. Using a null file to input audio is equivalent to using a normal audio file that contains an infinite amount of silence, and as such is not generally useful unless used with an effect that specifies a finite time length (such as trim or synth). Using a null file to output audio amounts to discarding the audio and is useful mainly with effects that produce information about the audio instead of affecting it (such as noiseprof or stat). The sampling rate associated with a null file is by default 48 kHz, but, as with a normal file, this can be overridden if desired using command-line format options (see below). See soxformat(7) for a list and description of the supported file formats and audio device drivers. These options can be specified on the command line at any point before the first effect name. Show usage information on the specified effect. The name all can be used to show usage on all effects. Show information about the specified file format. The name all can be used to show information on all formats. Set the size in bytes of the buffers used for processing audio (default 8192). --buffer applies to input, effects, and output processing; --input-buffer applies only to input processing (for which it overrides --buffer if both are given). Be aware that large values for --buffer will cause SoX to be become slow to respond to requests to terminate or to skip the current input file. Use FILENAME to obtain all effects and their arguments. The file is parsed as if the values were specified on the command line. A new line can be used in place of the special &amp;#34;:&amp;#34; marker to separate effect chains. This option causes any effects specified on the command line to be discarded. Prompt before overwriting an existing file with the same name as that given for the output file. NB Unintentionally overwriting a file is easier than you might think, for example, if you accidentally enterwhen what you really meant was then, without this option, file2 will be overwritten. Hence, using this option is strongly recommended; a &amp;#39;shell&amp;#39; alias, script, or batch file may be an appropriate way of permanently enabling it. If not set to off (the default if --plot is not given), run in a mode that can be used, in conjunction with the gnuplot program or the GNU Octave program, to assist with the selection and configuration of many of the transfer-function based effects. For the first given effect that supports the selected plotting program, SoX will output commands to plot the effect&amp;#39;s transfer function, and then exit without actually processing any audio. Eg Run in quiet mode when SoX wouldn&amp;#39;t otherwise do so; this is the opposite of the -S option. Select whether or not to apply replay-gain adjustment to input files. The default is off for sox and rec, album for play where (at least) the first two input files are tagged with the same Artist and Album names, and track for play otherwise. Display input file format/header information, and processing progress as input file(s) percentage complete, elapsed time, and remaining time (if known; shown in brackets), and the number of samples written to the output file. Also shown is a VU meter, and an indication if clipping has occurred. The VU meter shows up to two channels and is calibrated for digital audio as follows: A three-second peak-held value of headroom in dBs will be shown to the right of the meter if this is below 6dB. Set verbosity. SoX displays messages on the console (stderr) according to the following verbosity levels: 0 No messages are shown at all; use the exit status to determine if an error has occurred. Only error messages are shown. These are generated if SoX cannot complete the requested commands. Warning messages are also shown. These are generated if SoX can complete the requested commands, but not exactly according to the requested command parameters, or if clipping occurs. Descriptions of SoX&amp;#39;s processing phases are also shown. Useful for seeing exactly how SoX is processing your audio. By default, the verbosity level is set to 2; each occurrence of the -V option increases the verbosity level by 1. Alternatively, the verbosity level can be set to an absolute number by specifying it immediately after the -V; eg -V0 sets it to 0. These options apply only to input files and may precede only input filenames on the command line. Adjust volume by a factor of FACTOR. This is a linear (amplitude) adjustment, so a number less than 1 decreases the volume; greater than 1 increases it. If a negative number is given, then in addition to the volume adjustment, the audio signal will be inverted. See also the stat effect for information on how to find the maximum volume of an audio file; this can be used to help select suitable values for this option. These options apply to the input or output file whose name they immediately precede on the command line and are used mainly when working with headerless file formats or when specifying a format for the output file that is different to that of the input file. The number of bits in each encoded sample. Not applicable to complex encodings, eg MP3, GSM. Not necessary with encodings that have a fixed number of bits, eg A/Î¼-law, ADPCM. The number of bytes in each encoded sample. Aliases for -b 8/-b 16/-b 24/-b 32/-b 64 respectively. The number of audio channels in the audio file; this can be any number greater than zero. To cause the output file to have a different number of channels than the input file, include this option with the output file options. If the input and output file have a different number of channels then the mixer effect must be used. If the mixer effect is not specified on the command line it will be invoked internally with default parameters. Alternatively, some effects (eg synth, remix) determine what will be the number of output channels; in this case, neither this option nor the mixer effect is necessary. PCM data stored as signed (&amp;#39;two&amp;#39;s complement&amp;#39;) integers. Commonly used with a 16 or 24 -bit encoding size. A value of 0 represents minimum signal power. PCM data stored as signed (&amp;#39;two&amp;#39;s complement&amp;#39;) integers. Commonly used with an 8-bit encoding size. A value of 0 represents maximum signal power. PCM data stored as IEEE 753 single precision (32-bit) or double precision (64-bit) floating-point (&amp;#39;real&amp;#39;) numbers. A value of 0 represents minimum signal power. a-law International telephony standard for logarithmic encoding to 8 bits per sample. It has a precision equivalent to roughly 13-bit PCM and is sometimes encoded with reversed bit-ordering (see the -X option). North American telephony standard for logarithmic encoding to 8 bits per sample. Aka Î¼-law. It has a precision equivalent to roughly 14-bit PCM and is sometimes encoded with reversed bit-ordering (see the -X option). OKI (aka VOX, Dialogic, or Intel) 4-bit ADPCM; it has a precision equivalent to roughly 12-bit PCM. ADPCM is a form of audio compression that has a good compromise between audio quality and encoding/decoding speed. GSM is currently used for the vast majority of the world&amp;#39;s digital wireless telephone calls. It utilises several audio formats with different bit-rates and associated speech quality. SoX has support for GSM&amp;#39;s original 13kbps &amp;#39;Full Rate&amp;#39;音频格式。 It is usually CPU intensive to work with GSM audio. Encoding names can be abbreviated where this would not be ambiguous; eg &amp;#39;unsigned-integer&amp;#39; can be given as &amp;#39;un&amp;#39;, but not &amp;#39;u&amp;#39; (ambiguous with &amp;#39;u-law&amp;#39;). For reasons of forward compatibility, using abbreviations in scripts is not recommended. Note that explicitly specifying other encoding types (eg MP3, FLAC) is not necessary since they can be inferred from the file type or header. Gives the sample rate in Hz (or kHz if appended with &amp;#39;k&amp;#39;) of the file. To cause the output file to have a different sample rate than the input file, include this option with the output file format options. If the input and output files have different rates then a sample rate change effect must be run. Since SoX has multiple rate changing effects, the user can specify which to use as an effect. If no rate change effect is specified then the rate effect will be chosen by default. Gives the type of the audio file. This is useful when the file extension is non-standard or when the type can not be determined by looking at the header of the file. The -t option can also be used to override the type implied by an input filename extension, but if overriding with a type that has a header, SoX will exit with an appropriate error message if such a header is not actually present. These options specify whether the byte-order of the audio data is, respectively, &amp;#39;little endian&amp;#39;, &amp;#39;big endian&amp;#39;, or the opposite to that of the system on which SoX is being used. Endianness applies only to data encoded as signed or unsigned integers of 16 or more bits. It is often necessary to specify one of these options for headerless files, and sometimes necessary for (otherwise) self-describing files. A given endian-setting option may be ignored for an input file whose header contains a specific endianness identifier, or for an output file that is actually an audio device. NB Unlike normal format characteristics, the endianness (byte, nibble, &amp;amp; bit ordering) of the input file is not automatically used for the output file; so, for example, when the following is run on a little-endian system: trimmed.s2 will be created as little-endian; must be used to preserve big-endianness in the output file. Specifies that the nibble ordering (ie the 2 halves of a byte) of the samples should be reversed; sometimes useful with ADPCM-based formats. Specifies that the bit ordering of the samples should be reversed; sometimes useful with a few (mostly headerless) formats. These options apply only to the output file and may precede only the output filename on the command line. Specify the comment text to store in the output file header (where applicable). SoX will provide a default comment if this option (or --comment-file) is not given; to specify that no comment should be stored in the output file, use --comment &amp;#34;&amp;#34; . Specify a file containing the comment text to store in the output file header (where applicable). The compression factor for variably compressing output file formats. If this option is not given, then a default compression factor will apply. The compression factor is interpreted differently for different compressing file formats. See the description of the file formats that use this option in soxformat(7) for more information. In addition to converting and playing audio files, SoX can be used to invoke a number of audio &amp;#39;effects&amp;#39;. Multiple effects may be applied by specifying them one after another at the end of the SoX command line; forming an effects chain. Note that applying multiple effects in real-time (ie when playing audio) is likely to need a high performance computer; stopping other applications may alleviate performance issues should they occur. Some of the SoX effects are primarily intended to be applied to a single instrument or &amp;#39;voice&amp;#39;. To facilitate this, the remix effect and the global SoX option -M can be used to isolate then recombine tracks from a multi-track recording. A single effects chain is made up of one or more effects. Audio from the input in ran through the chain until either the input file reaches end of file or an effects in the chain requests to terminate the chain. SoX supports running multiple effects chain over the input audio. In this case, when one chain indicates it is done processing audio the audio data is then sent through the next effects chain. This continues until either no more effects chains exist or the input has reach end of file. A effects chain is terminated by placing a : (colon) after an effect. Any following effects are apart of a new effects chain. It is important to place the effect that will stop the chain as the first effect in the chain. This is because any samples that are buffered by effects to the left of the terminating effect will be discarded. The amount of samples discarded is related to the --buffer option and it should be keep small, relative to the sample rate, if the terminating effect can not be first. Further information on stopping effects can be found in the Stopping SoX section. There are a few pseudo-effects that aid using multiple effects chains. These include newfile which will start writing to a new output file before moving to the next effects chain and restart which will move back to the first effects chain. Pseudo-effects must be specified as the first effect in a chain and as the only effect in a chain (they must have a : before and after they are specified). The following is an example of multiple effects chains. It will split the input file into multiple files of 30 seconds in length. Each output filename will have unique number in its name as documented in Output Files section. In the descriptions that follow, brackets [ ] are used to denote parameters that are optional, braces { } to denote those that are both optional and repeatable, and angle brackets &amp;lt; &amp;gt; to denote those that are repeatable but not optional. Where applicable, default values for optional parameters are shown in parenthesis ( ). gain A power gain in dB. Zero gives no gain; less than zero gives an attenuation. Used to specify the band-width of a filter. A number of different methods to specify the width are available (though not all for every effect); one of the characters shown may be appended to select the desired method as follows: For each effect that uses this parameter, the default method (ie if no character is appended) is the one that it listed first in the effect&amp;#39;s first line of description. To see if SoX has support for an optional effect, enter sox -h and look for its name under the list: &amp;#39;EFFECTS&amp;#39;. Apply a two-pole all-pass filter with central frequency (in Hz) frequency, and filter-width width. An all-pass filter changes the audio&amp;#39;s frequency to phase relationship without changing its frequency to amplitude relationship. The filter is described in detail in [1]. Apply a band-pass filter. The frequency response drops logarithmically around the center frequency. The width parameter gives the slope of the drop. The frequencies at center + width and center - width will be half of their original amplitudes. band defaults to a mode oriented to pitched audio, ie voice, singing, or instrumental music. The -n (for noise) option uses the alternate mode for un-pitched audio (eg percussion). Warning: -n introduces a power-gain of about 11dB in the filter, so beware of output clipping. band introduces noise in the shape of the filter, ie peaking at the center frequency and settling around it. Apply a two-pole Butterworth band-pass or band-reject filter with central frequency frequency, and (3dB-point) band-width width. The -c option applies only to bandpass and selects a constant skirt gain (peak gain = Q) instead of the default: constant 0dB peak gain. The filters roll off at 6dB per octave (20dB per decade) and are described in detail in [1]. Boost or cut the bass (lower) or treble (upper) frequencies of the audio using a two-pole shelving filter with a response similar to that of a standard hi-fi&amp;#39;s tone-controls. This is also known as shelving equalisation (EQ). gain gives the gain at 0 Hz (for bass), or whichever is the lower of âˆ¼22 kHz and the Nyquist frequency (for treble). Its useful range is about -20 (for a large cut) to +20 (for a large boost). Beware of Clipping when using a positive gain. frequency sets the filter&amp;#39;s central frequency and so can be used to extend or reduce the frequency range to be boosted or cut. The default value is 100 Hz (for bass) or 3 kHz (for treble). width determines how steep is the filter&amp;#39;s shelf transition. In addition to the common width specification methods described above, &amp;#39;slope&amp;#39; (the default, or if appended with &amp;#39;s&amp;#39;) may be used. The useful range of &amp;#39;slope&amp;#39; is about 0.3, for a gentle slope, to 1 (the maximum), for a steep slope; the default value is 0.5. Changes pitch by specified amounts at specified times. Each given triple: delay,cents,duration specifies one bend. delay is the amount of time after the start of the audio stream, or the end of the previous bend, at which to start bending the pitch; cents is the number of cents (100 cents = 1 semitone) by which to bend the pitch, and duration the length of time over which the pitch will be bent. The pitch-bending algorithm utilises the Discrete Fourier Transform (DFT) at a particular frame rate and over-sampling rate. The -f and -o parameters may be used to adjust these parameters and thus control the smoothness of the changes in pitch. For example, an initial tone is generated, then bent three times, yeilding four different notes in total:Note that the clipping that is produced in this example is deliberate; to remove it, use gain -5 in place of gain 1. Add a chorus effect to the audio. This can make a single vocal sound like a chorus, but can also be applied to instrumentation. Chorus resembles an echo effect with a short delay, but whereas with echo the delay is constant, with chorus, it is varied using sinusoidal or triangular modulation. The modulation depth defines the range the modulated delay is played before or after the delay. Hence the delayed sound will sound slower or faster, that is the delayed sound tuned around the original one, like in a chorus where some vocals are slightly off key. See [3] for more discussion of the chorus effect. Each four-tuple parameter delay/decay/speed/depth gives the delay in milliseconds and the decay (relative to gain-in) with a modulation speed in Hz using depth in milliseconds. The modulation is either sinusoidal (-s) or triangular (-t). Gain-out is the volume of the output. A typical delay is around 40ms to 60ms; the modulation speed is best near 0.25Hz and the modulation depth around 2ms. For example, a single delay:Two delays of the original samples: A fuller sounding chorus (with three additional delays): [soft-knee-dB:]in-dB1[,out-dB1]{,in-dB2,out-dB2} [gain [initial-volume-dB [delay]]] The attack and decay parameters (in seconds) determine the time over which the instantaneous level of the input signal is averaged to determine its volume; attacks refer to increases in volume and decays refer to decreases. For most situations, the attack time (response to the music getting louder) should be shorter than the decay time because the human ear is more sensitive to sudden loud music than sudden soft music. Where more than one pair of attack/decay parameters are specified, each input channel is companded separately and the number of pairs must agree with the number of input channels. Typical values are 0.3,0.8 seconds. The second parameter is a list of points on the compander&amp;#39;s transfer function specified in dB relative to the maximum possible signal amplitude. The input values must be in a strictly increasing order but the transfer function does not have to be monotonically rising. If omitted, the value of out-dB1 defaults to the same value as in-dB1; levels below in-dB1 are not companded (but may have gain applied to them). The point 0,0 is assumed but may be overridden (by 0,out-dBn). If the list is preceded by a soft-knee-dB value, then the points at where adjacent line segments on the transfer function meet will be rounded by the amount given. Typical values for the transfer function are 6:-70,-60,-20. The third (optional) parameter is an additional gain in dB to be applied at all points on the transfer function and allows easy adjustment of the overall gain. The fourth (optional) parameter is an initial level to be assumed for each channel when companding starts. This permits the user to supply a nominal level initially, so that, for example, a very large gain is not applied to initial signal levels before the companding action has begun to operate: it is quite probable that in such an event, the output would be severely clipped while the compander gain properly adjusts itself. A typical value (for audio which is initially quiet) is -90 dB. The fifth (optional) parameter is a delay in seconds. The input signal is analysed immediately to control the compander, but it is delayed before being fed to the volume adjuster. Specifying a delay approximately equal to the attack/decay times allows the compander to effectively operate in a &amp;#39;predictive&amp;#39; rather than a reactive mode. A typical value is 0.2 seconds. The following example might be used to make a piece of music with both quiet and loud passages suitable for listening to in a noisy environment such as a moving vehicle:The transfer function (&amp;#39;6:-70,...&amp;#39;) says that very soft sounds (below -70dB) will remain unchanged. This will stop the compander from boosting the volume on &amp;#39;silent&amp;#39; passages such as between movements. However, sounds in the range -60dB to 0dB (maximum volume) will be boosted so that the 60dB dynamic range of the original music will be compressed 3-to-1 into a 20dB range, which is wide enough to enjoy the music but narrow enough to get around the road noise. The &amp;#39;6:&amp;#39; selects 6dB soft-knee companding. The -5 (dB) output gain is needed to avoid clipping (the number is inexact, and was derived by experimentation). The -90 (dB) for the initial volume will work fine for a clip that starts with near silence, and the delay of 0.2 (seconds) has the effect of causing the compander to react a bit more quickly to sudden volume changes. Comparable with compression, this effect modifies an audio signal to make it sound louder. enhancement-amount controls the amount of the enhancement and is a number in the range 0-100. Note that enhancement-amount = 0 still gives a significant contrast enhancement. contrast is often used in conjunction with the norm effect as follows: DC Shift the audio, with basic linear amplitude formula. This is most useful if your audio tends to not be centered around a value of 0. Shifting it back will allow you to get the most volume adjustments without clipping. The first option is the dcshift value. It is a floating point number that indicates the amount to shift. An optional limitergain can be specified as well. It should have a value much less than 1 (eg 0.05 or 0.02) and is used only on peaks to prevent clipping. An alternative approach to removing a DC offset (albeit with a short delay) is to use the highpass filter effect at a frequency of say 10Hz, as illustrated in the following example: deemph Pre-emphasis was applied in the mastering of some CDs issued in the early 1980s. These included many classical music albums, as well as now sought-after issues of albums by The Beatles, Pink Floyd and others. Pre-emphasis should be removed at playback time by a de-emphasis filter in the playback device. However, not all modern CD players have this filter, and very few PC CD drives have it; playing pre-emphasised audio without the correct de-emphasis filter results in audio that sounds harsh and is far from what its creators intended. With the deemph effect, it is possible to apply the necessary de-emphasis to audio that has been extracted from a pre-emphasised CD, and then either burn the de-emphasised audio to a new CD (which will then play correctly on any CD player), or simply play the correctly de-emphasised audio files on the PC. For example: and then burn track1-deemph.wav to CD, or or simply The de-emphasis filter is implemented as a biquad; its maximum deviation from the ideal response is only 0.06dB (up to 20kHz). Delay one or more audio channels. length can specify a time or, if appended with an &amp;#39;s&amp;#39;, a number of samples. Do not specify both time and samples delays in the same command. For example, delay 1.5 0 0.5 delays the first channel by 1.5 seconds, the third channel by 0.5 seconds, and leaves the second channel (and any other channels that may be present) un-delayed. The following (one long) command plays a chime sound: Apply dithering to the audio. Dithering deliberately adds a small amount of noise to the signal in order to mask audible quantization effects that can occur if the output sample size is less than 24 bits. The default (or with the -t option) is Triangular (TPDF) white noise. The -r option can be used to select Rectangular Probability Density Function (RPDF) white noise. Noise-shaping (only for certain sample rates) can be selected with -s. With the -f option, it is possible to select a particular noise-shaping filter from the following list: lipshitz, f-weighted, modified-e-weighted, improved-e-weighted, gesemann, shibata, low-shibata, high-shibata. Note that most filter types are available only with 44100Hz sample rate. The filter types are distiguished by the following properties: audibility of noise, level of (inaudible, but in some circumstances, otherwise problematic) shaped high frequency noise, and processing speed. By default, the amount of noise added is Â±Â½ bit for RPDF, Â±1 bit for TPDF; the optional depth parameter (0.5 to 1) is a (linear or voltage) multiplier of this amount. Reducing this value reduces the audibility of the added white noise, but correspondingly creates residual quantization noise, so it should not normally be changed. earwax Makes audio easier to listen to on headphones. Adds &amp;#39;cues&amp;#39; to 44.1kHz stereo (ie audio CD format) audio so that when listened to on headphones the stereo image is moved from inside your head (standard for headphones) to outside and in front of the listener (standard for speakers). See http://www.geocities.com/beinges for a full explanation. Add echoing to the audio. Echoes are reflected sound and can occur naturally amongst mountains (and sometimes large buildings) when talking or shouting; digital echo effects emulate this behaviour and are often used to help fill out the sound of a single instrument or vocal. The time difference between the original signal and the reflection is the &amp;#39;delay&amp;#39; (time), and the loudness of the relected signal is the &amp;#39;decay&amp;#39;. Multiple echoes can have different delays and decays. Each given delay decay pair gives the delay in milliseconds and the decay (relative to gain-in) of that echo. Gain-out is the volume of the output. For example: This will make it sound as if there are twice as many instruments as are actually playing:If the delay is very short, then it sound like a (metallic) robot playing music: A longer delay will sound like an open air concert in the mountains: One mountain more, and: Add a sequence of echoes to the audio. Each delay decay pair gives the delay in milliseconds and the decay (relative to gain-in) of that echo. Gain-out is the volume of the output. Like the echo effect, echos stand for &amp;#39;ECHO in Sequel&amp;#39;, that is the first echos takes the input, the second the input and the first echos, the third the input and the first and the second echos, ... and so on. Care should be taken using many echos; a single echos has the same effect as a single echo.The sample will be bounced twice in asymmetric echos: The sample will sound as if played in a garage: Apply a two-pole peaking equalisation (EQ) filter. With this filter, the signal-level at and around a selected frequency can be increased or decreased, whilst (unlike band-pass and band-reject filters) that at all other frequencies is unchanged. frequency gives the filter&amp;#39;s central frequency in Hz, width, the band-width, and gain the required gain or attenuation in dB. Beware of Clipping when using a positive gain. In order to produce complex equalisation curves, this effect can be given several times, each with a different central frequency. Add a fade effect to the beginning, end, or both of the audio. For fade-ins, this starts from the first sample and ramps the volume of the audio from 0 to full volume over fade-in-length seconds. Specify 0 seconds if no fade-in is wanted. For fade-outs, the audio will be truncated at stop-time and the volume will be ramped from full volume down to 0 starting at fade-out-length seconds before the stop-time. If fade-out-length is not specified, it defaults to the same value as fade-in-length. No fade-out is performed if stop-time is not specified. If the file length can be determined from the input file header and length-changing effects are not in effect, then 0 may be specified for stop-time to indicate the usual case of a fade-out that ends at the end of the input audio stream. All times can be specified in either periods of time or sample counts. To specify time periods use the format hh:mm:ss.frac format. To specify using sample counts, specify the number of samples and append the letter &amp;#39;s&amp;#39; to the sample count (for example &amp;#39;8000s&amp;#39;). An optional type can be specified to change the type of envelope. Choices are q for quarter of a sine wave, h for half a sine wave, t for linear slope, l for logarithmic, and p for inverted parabola. The default is logarithmic. Apply a sinc-windowed lowpass, highpass, or bandpass filter of given window length to the signal. low refers to the frequency of the lower 6dB corner of the filter. high refers to the frequency of the upper 6dB corner of the filter. A low-pass filter is obtained by leaving low unspecified, or 0. A high-pass filter is obtained by leaving high unspecified, or 0, or greater than or equal to the Nyquist frequency. The window-len, if unspecified, defaults to 128. Longer windows give a sharper cut-off, smaller windows a more gradual cut-off. The beta parameter determines the type of filter window used. Any value greater than 2 is the beta for a Kaiser window. Beta â‰¤ 2 selects a Blackman-Nuttall window. If unspecified, the default is a Kaiser window with beta 16. In the case of Kaiser window (beta &amp;gt; 2), lower betas produce a somewhat faster transition from pass-band to stop-band, at the cost of noticeable artifacts. A beta of 16 is the default, beta less than 10 is not recommended. If you want a sharper cut-off, don&amp;#39;t use low beta&amp;#39;s, use a longer sample window. A Blackman-Nuttall window is selected by specifying any &amp;#39;beta&amp;#39; â‰¤ 2, and the Blackman-Nuttall window has somewhat steeper cut-off than the default Kaiser window. You will probably not need to use the beta parameter at all, unless you are just curious about comparing the effects of Blackman-Nuttall vs. Kaiser windows. Apply a flanging effect to the audio. See [3] for a detailed description of flanging. Apply an amplification or an attenuation to the audio signal. The signal level is adjusted by the given number of dB - positive amplifies (beware of Clipping), negative attenuates. Apply a high-pass or low-pass filter with 3dB point frequency. The filter can be either single-pole (with -1), or double-pole (the default, or with -2). width applies only to double-pole filters; the default is Q = 0.707 and gives a Butterworth response. The filters roll off at 6dB per pole per octave (20dB per pole per decade). The double-pole filters are described in detail in [1]. Apply a LADSPA [5] (Linux Audio Developer&amp;#39;s Simple Plugin API) plugin. Despite the name, LADSPA is not Linux-specific, and a wide range of effects is available as LADSPA plugins, such as cmt [6] (the Computer Music Toolkit) and Steve Harris&amp;#39;s plugin collection [7]. The first argument is the plugin module, the second the name of the plugin (a module can contain more than one plugin) and any other arguments are for the control ports of the plugin. Missing arguments are supplied by default values if possible. Only plugins with at most one audio input and one audio output port can be used. If found, the environment varible LADSPA_PATH will be used as search path for plugins. Loudness control - similar to the gain effect, but provides equalisation for the human auditory system. See http://en.wikipedia.org/wiki/Loudness for a detailed description of loudness. The gain is adjusted by the given gain parameter (usually negative) and the signal equalised according to ISO 226 wrt a reference level of 65dB, though an alternative reference level may be given if the original audio has been equalised for some other optimal level. A default gain of -10dB is used if a gain value is not given. [soft-knee-dB:]in-dB1[,out-dB1]{,in-dB2,out-dB2} [gain [initial-volume-dB [delay]]]&amp;#34; {crossover-freq[k] &amp;#34;attack1,...&amp;#34;} The multi-band compander is similar to the single-band compander but the audio is first divided into bands using Linkwitz-Riley cross-over filters and a separately specifiable compander run on each band. See the compand effect for the definition of its parameters. Compand parameters are specified between double quotes and the crossover frequency for that band is given by crossover-freq; these can be repeated to create multiple bands. For example, the following (one long) command shows how multi-band companding is typically used in FM radio:The audio file is played with a simulated FM radio sound (or broadcast signal condition if the lowpass filter at the end is skipped). Note that the pipeline is set up with US-style 75us preemphasis. Reduce the number of audio channels by mixing or selecting channels, or increase the number of channels by duplicating channels. Note: this effect operates on the audio channels within the SoX effects processing chain; it should not be confused with the -m global option (where multiple files are mix-combined before entering the effects chain). This effect is automatically used when the number of input channels differ from the number of output channels. When reducing the number of channels it is possible to manually specify the mixer effect and use the -l, -r, -f, -b, -1, -2, -3, -4, options to select only the left, right, front, back channel(s) or specific channel for the output instead of averaging the channels. The -l, and -r options will do averaging in quad-channel files so select the exact channel to prevent this. The mixer effect can also be invoked with up to 16 numbers, separated by commas, which specify the proportion (0 = 0% and 1 = 100%) of each input channel that is to be mixed into each output channel. In two-channel mode, 4 numbers are given: l â†&#39; l, l â†&#39; r, r â†&#39; l, and r â†&#39; r, respectively. In four-channel mode, the first 4 numbers give the proportions for the left-front output channel, as follows: lf â†&#39; lf, rf â†&#39; lf, lb â†&#39; lf, and rb â†&#39; rf. The next 4 give the right-front output in the same order, then left-back and right-back. It is also possible to use the 16 numbers to expand or reduce the channel count; just specify 0 for unused channels. Calculate a profile of the audio for use in noise reduction. See the description of the noisered effect for details. Reduce noise in the audio signal by profiling and filtering. This effect is moderately effective at removing consistent background noise such as hiss or hum. To use it, first run SoX with the noiseprof effect on a section of audio that ideally would contain silence but in fact contains noise - such sections are typically found at the beginning or the end of a recording. noiseprof will write out a noise profile to profile-file, or to stdout if no profile-file or if &amp;#39;-&amp;#39;给出。 Eg To actually remove the noise, run SoX again, this time with the noisered effect; noisered will reduce noise according to a noise profile (which was generated by noiseprof), from profile-file, or from stdin if no profile-file or if &amp;#39;-&amp;#39;给出。 Eg How much noise should be removed is specified by amount-a number between 0 and 1 with a default of 0.5. Higher numbers will remove more noise but present a greater likelihood of removing wanted components of the audio signal. Before replacing an original recording with a noise-reduced version, experiment with different amount values to find the optimal one for your audio; use headphones to check that you are happy with the results, paying particular attention to quieter sections of the audio. On most systems, the two stages - profiling and reduction - can be combined using a pipe, eg Normalise audio to 0dB FSD, to a given level relative to 0dB, or normalise the balance of multi-channel audio. Requires temporary file space to store the audio to be normalised. can be used, though note that if &amp;#39;infile&amp;#39; has a simple encoding (eg PCM), then (on systems that support this construct) might be quicker to execute (though perhaps not to type!) as it doesn&amp;#39;t require a temporary file. For a more complex example, suppose that &amp;#39;effect1&amp;#39; performs some unknown or unpredictable attenuation and that &amp;#39;effect2&amp;#39; requires up to 10dB of headroom, thengives both effect2 and the output file the highest possible signal levels. Normally, audio is normalised based on the level of the channel with the highest peak level, which means that whilst all channels are adjusted, only one channel attains the normalised level. If the -i option is given, then each channel is treated individually and will attain the normalised level. If the -b option is given (with a multi-channel audio file), then the audio channels will be balanced; ie the RMS level of each channel will be normalised to that of the channel with the highest RMS level. This can be used, for example, to correct stereo imbalance. Note that -b can cause clipping. In most cases, norm -3 should be the maximum level used at the output file (to leave headroom for playback-resampling, etc.). See also the discussions of Clipping and Replay Gain above. oops Out Of Phase Stereo effect. Mixes stereo to twin-mono where each mono channel contains the difference between the left and right stereo channels. This is sometimes known as the &amp;#39;karaoke&amp;#39; effect as it often has the effect of removing most or all of the vocals from a recording. Pad the audio with silence, at the beginning, the end, or any specified points through the audio. Both length and position can specify a time or, if appended with an &amp;#39;s&amp;#39;, a number of samples. length is the amount of silence to insert and position the position in the input audio stream at which to insert it. Any number of lengths and positions may be specified, provided that a specified position is not less that the previous one. position is optional for the first and last lengths specified and if omitted correspond to the beginning and the end of the audio respectively. For example, pad 1.5 1.5 adds 1.5 seconds of silence padding at each end of the audio, whilst pad 4000s@3:00 inserts 4000 samples of silence 3 minutes into the audio. If silence is wanted only at the end of the audio, specify either the end position or specify a zero-length pad at the start. Add a phasing effect to the audio. See [3] for a detailed description of phasing. delay/decay/speed gives the delay in milliseconds and the decay (relative to gain-in) with a modulation speed in Hz. The modulation is either sinusoidal (-s) - preferable for multiple instruments, or triangular (-t) - gives single instruments a sharper phasing effect. The decay should be less than 0.5 to avoid feedback, and usually no less than 0.1. Gain-out is the volume of the output.Gentler: A popular sound: More severe: Change the audio pitch (but not tempo). shift gives the pitch shift as positive or negative &amp;#39;cents&amp;#39; (ie 100ths of a semitone). See the tempo effect for a description of the other parameters. Change the audio sampling rate (ie resample the audio) to any given RATE (even non-integer if this is supported by the output file format) using a quality level defined as follows: where Band-width is the percentage of the audio frequency band that is preserved and Rej dB is the level of noise rejection. Increasing levels of resampling quality come at the expense of increasing amounts of time to process the audio. If no quality option is given, the quality level used is &amp;#39;high&amp;#39;. The &amp;#39;quick&amp;#39; algorithm uses cubic interpolation; all others use band-limited interpolation. By default, all algorithms have a &amp;#39;linear&amp;#39; phase response; for &amp;#39;medium&amp;#39;, &amp;#39;high&amp;#39; and &amp;#39;very high&amp;#39;, the phase response is configurable (see below). The rate effect is invoked automatically if SoX&amp;#39;s -r option specifies a rate that is different to that of the input file(s). Alternatively, if this effect is given explicitly, then SoX&amp;#39;s -r option need not be given. For example, the following two commands are equivalent:though the second command is more flexible as it allows rate options to be given, and allows the effects to be ordered arbitrarily. The simple quality selection described above provides settings that satisfy the needs of the vast majority of resampling tasks. Occasionally, however, it may be desirable to fine-tune the resampler&amp;#39;s filter response; this can be achieved using override options, as detailed in the following table: All resamplers use filters that can sometimes create &amp;#39;echo&amp;#39; (aka &amp;#39;ringing&amp;#39;) artefacts with transient signals such as those that occur with &amp;#39;finger snaps&amp;#39; or other highly percussive sounds. Such artefacts are much more noticable to the human ear if they occur before the transient (&amp;#39;pre-echo&amp;#39;) than if they occur after it (&amp;#39;post-echo&amp;#39;). Note that frequency of any such artefacts is related to the smaller of the original and new sampling rates but that if this is at least 44.1kHz, then the artefacts will lie outside the range of human hearing. A phase response setting may be used to control the distribution of any transient echo between &amp;#39;pre&amp;#39; and &amp;#39;post&amp;#39;: with minimum phase, there is no pre-echo but the longest post-echo; with linear phase, pre and post echo are in equal amounts (in signal terms, but not audibility terms); the intermediate phase setting attempts to find the best compromise by selecting a small length (and level) of pre-echo and a medium lengthed post-echo. Minimum, intermediate, or linear phase response is selected using the -M, -I, or -L option; a custom phase response can be created with the -p option. Note that phase responses between &amp;#39;linear&amp;#39; and &amp;#39;maximum&amp;#39; (greater than 50) are rarely useful. A resampler&amp;#39;s band-width setting determines how much of the frequency content of the original signal (wrt the orignal sample rate when up-sampling, or the new sample rate when down-sampling) is preserved during conversion. The term &amp;#39;pass-band&amp;#39; is used to refer to all frequencies up to the band-width point (eg for 44.1kHz sampling rate, and a resampling band-width of 95%, the pass-band represents frequencies from 0Hz (DC) to circa 21kHz). Increasing the resampler&amp;#39;s band-width results in a slower conversion and can increase transient echo artefacts (and vice versa). The -s &amp;#39;steep filter&amp;#39; option changes resampling band-width from the default 95% (based on the 3dB point), to 99%. The -b option allows the band-width to be set to any value in the range 74-99.7 %, but note that band-width values greater than 99% are not recommended for normal use as they can cause excessive transient echo. If the -a option is given, then aliasing above the pass-band is allowed. For example, with 44.1kHz sampling rate, and a resampling band-width of 95%, this means that frequency content above 21kHz can be distorted; however, since this is above the pass-band (ie above the highest frequency of interest/audibility), this may not be a problem. The benefits of allowing aliasing are reduced processing time, and reduced (by almost half) transient echo artefacts. Note that if this option is given, then the minimum band-width allowable with -b increases to 85%.default (high) quality resampling; overrides: steep filter, allow aliasing; to 44.1kHz sample rate; dither output to 16-bit WAV file. very high quality resampling; overrides: linear phase, band-width 90%; to 48k sample rate; store output to 24-bit AIFF file. out-spec = in-spec{,in-spec} | 0 in-spec = [in-chan][-[in-chan2]][vol-spec] vol-spec = p|i|v[volume] Select and mix input audio channels into output audio channels. Each output channel is specified, in turn, by a given out-spec: a list of contributing input channels and volume specifications. Note that this effect operates on the audio channels within the SoX effects processing chain; it should not be confused with the -m global option (where multiple files are mix-combined before entering the effects chain). An out-spec contains comma-separated input channel-numbers and hyphen-delimited channel-number ranges; alternatively, 0 may be given to create a silent output channel. For example,creates an output file with four channels, where channels 1, 2, and 3 are copies of channels 6, 7, and 8 in the input file, and channel 4 is silent. Whereas creates a (somewhat bizarre) stereo output file where the left channel is a mix-down of input channels 1, 2, 3, and 7, and the right channel is a copy of input channel 3. Where a range of channels is specified, the channel numbers to the left and right of the hyphen are optional and default to 1 and to the number of input channels respectively. Thusperforms a mix-down of all input channels to mono. By default, where an output channel is mixed from multiple (n) input channels, each input channel will be scaled by a factor of Â¹/ . Custom mixing volumes can be set by following a given input channel or range of input channels with a vol-spec (volume specification). This is one of the letters p, i, or v, followed by a volume number, the meaning of which depends on the given letter and is defined as follows: If an out-spec includes at least one vol-spec then, by default, Â¹/ scaling is not applied to any other channels in the same out-spec (though may be in other out-specs). The -a (automatic) option however, can be given to retain the automatic scaling in this case. For example,results in channel level multipliers of 0.5,0.5 1,0.8, whereas results in channel level multipliers of 0.5,0.5 0.5,0.8. results in channel level multipliers of 1,1 1,0.8. The volume number is optional and omitting it corresponds to no volume change; however, the only case in which this is useful is in conjunction with i. For example, if input.au is stereo, thenis a mono equivalent of the oops effect. If the -p option is given, then any automatic Â¹/ scaling is replaced by Â¹/ (&amp;#39;power&amp;#39;) scaling; this gives a louder mix but one that might occasionally clip. One use of the remix effect is to split an audio file into a set of files, each containing one of the constituent channels (in order to perform subsequent processing on individual audio channels). Where more than a few channels are involved, a script such as the following (Bourne shell script) is useful:If a file input.au containing six audio channels were given, the script would produce six output files: input-01.au, input-02.au, ..., input-06.au. Repeat the entire audio count times. Requires temporary file space to store the audio to be repeated. Note that repeating once yields two copies: the original audio and the repeated audio. [room-scale (100%) [stereo-depth (100%) [pre-delay (0ms) [wet-gain (0dB)]]]]]] Add reverberation to the audio using the &amp;#39;freeverb&amp;#39;算法。 A reverberation effect is sometimes desirable for concert halls that are too small or contain so many people that the hall&amp;#39;s natural reverberance is diminished. Applying a small amount of stereo reverb to a (dry) mono signal will usually make it sound more natural. See [3] for a detailed description of reverberation. Note that this effect increases both the volume and the length of the audio, so to prevent clipping in these domains, a typical invocation might be: Reverse the audio completely. Requires temporary file space to store the audio to be reversed. riaa Apply RIAA vinyl playback equalisation. The sampling rate must be one of: 44.1, 48, 88.2, 96 kHz. threshold[d|%] [below-periods duration threshold[d|%]] Removes silence from the beginning, middle, or end of the audio. Silence is anything below a specified threshold. The above-periods value is used to indicate if audio should be trimmed at the beginning of the audio. A value of zero indicates no silence should be trimmed from the beginning. When specifying an non-zero above-periods, it trims audio up until it finds non-silence. Normally, when trimming silence from beginning of audio the above-periods will be 1 but it can be increased to higher values to trim all audio up to a specific count of non-silence periods. For example, if you had an audio file with two songs that each contained 2 seconds of silence before the song, you could specify an above-period of 2 to strip out both silence periods and the first song. When above-periods is non-zero, you must also specify a duration and threshold. Duration indications the amount of time that non-silence must be detected before it stops trimming audio. By increasing the duration, burst of noise can be treated as silence and trimmed off. Threshold is used to indicate what sample value you should treat as silence. For digital audio, a value of 0 may be fine but for audio recorded from analog, you may wish to increase the value to account for background noise. When optionally trimming silence from the end of the audio, you specify a below-periods count. In this case, below-period means to remove all audio after silence is detected. Normally, this will be a value 1 of but it can be increased to skip over periods of silence that are wanted. For example, if you have a song with 2 seconds of silence in the middle and 2 second at the end, you could set below-period to a value of 2 to skip over the silence in the middle of the audio. For below-periods, duration specifies a period of silence that must exist before audio is not copied any more. By specifying a higher duration, silence that is wanted can be left in the audio. For example, if you have a song with an expected 1 second of silence in the middle and 2 seconds of silence at the end, a duration of 2 seconds could be used to skip over the middle silence. Unfortunately, you must know the length of the silence at the end of your audio file to trim off silence reliably. A work around is to use the silence effect in combination with the reverse effect. By first reversing the audio, you can use the above-periods to reliably trim all audio from what looks like the front of the file. Then reverse the file again to get back to normal. To remove silence from the middle of a file, specify a below-periods that is negative. This value is then treated as a positive value and is also used to indicate the effect should restart processing as specified by the above-periods, making it suitable for removing periods of silence in the middle of the audio. The option -l indicates that below-periods duration length of audio should be left intact at the beginning of each period of silence. For example, if you want to remove long pauses between words but do not want to remove the pauses completely. The period counts are in units of samples. Duration counts may be in the format of hh:mm:ss.frac, or the exact count of samples. Threshold numbers may be suffixed with d to indicate the value is in decibels, or % to indicate a percentage of maximum value of the sample value (0% specifies pure digital silence). The following example shows how this effect can be used to start a recording that does not contain the delay at the start which usually occurs between &amp;#39;pressing the record button&amp;#39; and the start of the performance: Adjust the audio speed (pitch and tempo together). factor is either the ratio of the new speed to the old speed: greater than 1 speeds up, less than 1 slows down, or, if appended with the letter &amp;#39;c&amp;#39;, the number of cents (ie 100ths of a semitone) by which the pitch (and tempo) should be adjusted: greater than 0 increases, less than 0 decreases. By default, the speed change is performed by resampling with the rate effect using its default quality/speed. For higher quality or higher speed resampling, in addition to the speed effect, specify the rate effect with the desired quality option. Create a spectrogram of the audio. This effect is optional; type sox --help and check the list of supported effects to see if it has been included. The spectrogram is rendered in a Portable Network Graphic (PNG) file, and shows time in the X-axis, frequency in the Y-axis, and audio signal magnitude in the Z-axis. Z-axis values are represented by the colour (or intensity) of the pixels in the XY plane. This effect supports only one channel; for multi-channel input files, use either SoX&amp;#39;s -c 1 option with the output file (to obtain a spectrogram on the mix-down), or the remix n effect to select a particular channel. Be aware though, that both of these methods affect the audio in the effects chain. -x num X-axis pixels/second, default 100. This controls the width of the spectrogram; num can be from 1 (low time resolution) to 5000 (high time resolution) and need not be an integer. SoX may make a slight adjustment to the given number for processing quantisation reasons; if so, SoX will report the actual number used (viewable when --verbose is in effect). The maximum width of the spectrogram is 999 pixels; if the audio length and the given -x number are such that this would be exceeded, then the spectrogram (and the effects chain) will be truncated. To move the spectrogram to a point later in the audio stream, first invoke the trim effect; eg starts the spectrogram at 1 minute through the audio. -y num Y-axis resolution (1 - 4), default 2. This controls the height of the spectrogram; num can be from 1 (low frequency resolution) to 4 (high frequency resolution). For values greater than 2, the resulting image may be too tall to display on the screen; if so, a graphic manipulation package (such as imagemagick(1)) can be used to re-size the image. To increase the frequency resolution without increasing the height of the spectrogram, the rate effect may be invoked to reduce the sampling rate of the signal before invoking spectrogram; eg allows detailed analysis of frequencies up to 2kHz (half the sampling rate). -z num Z-axis (colour) range in dB, default 120. This sets the dynamic-range of the spectrogram to be -num dBFS to 0 dBFS. Num may range from 20 to 180. Decreasing dynamic-range effectively increases the &amp;#39;contrast&amp;#39; of the spectrogram display, and vice versa. Sets the upper limit of the Z-axis in dBFS. A negative num effectively increases the &amp;#39;brightness&amp;#39; of the spectrogram display, and vice versa. Sets the Z-axis quantisation, ie the number of different colours (or intensities) in which to render Z-axis values. A small number (eg 4) will give a &amp;#39;poster&amp;#39;-like effect making it easier to discern magnitude bands of similar level. Small numbers also usually result in small PNG files. The number given specifies the number of colours to use inside the Z-axis range; two colours are reserved to represent out-of-range values. Window: Hann (default), Hamming, Bartlett, Rectangular or Kaiser. The spectrogram is produced using the Discrete Fourier Transform (DFT) algorithm. A significant parameter to this algorithm is the choice of &amp;#39;window function&amp;#39;. By default, SoX uses the Hann window which has good all-round frequency-resolution and dynamic-range properties. For better frequency resolution (but lower dynamic-range), select a Hamming window; for higher dynamic-range (but poorer frequency-resolution), select a Kaiser window. Bartlett and Rectangular windows are also available. Selecting a window other than Hann will usually require a corresponding -z setting. -s Allow slack overlapping of DFT windows. This can, in some cases, increase image sharpness and give greater adherence to the -x value, but at the expense of a little spectral loss. Selects a high-colour palette - less visually pleasing than the default colour palette, but it may make it easier to differentiate different levels. If this option is used in conjunction with -m, the result will be a hybrid monochrome/colour palette. Permute the colours in a colour or hybrid palette. The num parameter (from 1 to 6) selects the permutation. Creates a &amp;#39;printer friendly&amp;#39; spectrogram with a light background (the default has a dark background). Suppress the display of the axis lines. This is sometimes useful in helping to discern artefacts at the spectrogram edges. Set the image comment - text to display below and to the left of the spectrogram. For example, let&amp;#39;s see what the spectrogram of a swept triangular wave looks like: Append the following to the &amp;#39;chime&amp;#39; example in the delay effect to see its spectrogram: For the ability to perform off-line processing of spectral data, see the stat effect. Splice together audio sections. This effect provides two things over simple audio concatenation: a (usually short) cross-fade is applied at the join, and a wave similarity comparison is made to help determine the best place at which to make the join. To perform a splice, first use the trim effect to select the audio sections to be joined together. As when performing a tape splice, the end of the section to be spliced onto should be trimmed with a small excess (default 0.005 seconds) of audio after the ideal joining point. The beginning of the audio section to splice on should be trimmed with the same excess (before the ideal joining point), plus an additional leeway (default 0.005 seconds). SoX should then be invoked with the two audio sections as input files and the splice effect given with the position at which to perform the splice - this is length of the first audio section (including the excess). For example, a long song begins with two verses which start (as determined eg by using the play command with the trim (start) effect) at times 0:30.125 and 1:03.432. The following commands cut out the first verse:(5 ms excess, after the first verse starts) (5 ms excess plus 5 ms leeway, before the second verse starts) Provided your arithmetic is good enough, multiple splices can be performed with a single splice invocation. For example: In the above Bourne shell script, two splices are used to &amp;#39;copy and paste&amp;#39; audio. play &amp;#34;|sox -n -p synth 1 sin %1&amp;#34; &amp;#34;|sox -n -p synth 1 sin %3&amp;#34;generates and plays two notes, but there is a nasty click at the transition; the click can be removed by appending splice 1 to the command. (Clicks at the beginning and end of the audio can be removed by preceding the splice effect with fade q .01 2 .01). It is also possible to use this effect to perform general cross-fades, eg to join two songs. In this case, excess would typically be an number of seconds, and leeway should be set to zero. Display time and frequency domain statistical information about the audio. Audio is passed unmodified through the SoX processing chain. The information is output to the &amp;#39;standard error&amp;#39; (stderr) stream and is calculated, where n is the duration of the audio in samples, c is the number of audio channels, r is the audio sample rate, and x represents the PCM value (in the range -1 to +1 by default) of each successive sample in the audio, as follows: The -s option can be used to scale the input data by a given factor. The default value of scale is 2147483647 (ie the maximum value of a 32-bit signed integer). Internal effects always work with signed long PCM data and so the value should relate to this fact. The -freq option calculates the input&amp;#39;s power spectrum (4096 point DFT) instead of the statistics listed above. The -d option displays a hex dump of the 32-bit signed PCM data audio in SoX&amp;#39;s internal buffer. This is mainly used to help track down endian problems that sometimes occur in cross-platform versions of SoX. Swap channels in multi-channel audio files. Optionally, you may specify the channel order you would like the output in. This defaults to output channel 2 and then 1 for stereo and 2, 1, 4, 3 for quad-channels. An interesting feature is that you may duplicate a given channel by overwriting another. This is done by repeating an output channel on the command-line. For example, swap 2 2 will overwrite channel 1 with channel 2; creating a stereo file with both channels containing the same audio. Change the audio duration (but not its pitch). This effect is broadly equivalent to the tempo effect with (factor inverted and) search set to zero, so in general, its results are comparatively poor; it is retained as it can sometimes out-perform tempo for small factors. factor of stretching: &amp;gt;1 lengthen, &amp;lt;1 shorten duration. window size is in ms. Default is 20ms. The fade option, can be &amp;#39;lin&amp;#39;. shift ratio, in [0 1]. Default depends on stretch factor. 1 to shorten, 0.8 to lengthen. The fading ratio, in [0 0.5]. The amount of a fade&amp;#39;s default depends on factor and shift. This effect can be used to generate fixed or swept frequency audio tones with various wave shapes, or to generate wide-band noise of various &amp;#39;colours&amp;#39;. Multiple synth effects can be cascaded to produce more complex waveforms; at each stage it is possible to choose whether the generated waveform will be mixed with, or modulated onto the output from the previous stage. Audio for each channel in a multi-channel audio file can be synthesised independently. Though this effect is used to generate audio, an input file must still be given, the characteristics of which will be used to set the synthesised audio length, the number of channels, and the sampling rate; however, since the input file&amp;#39;s audio is not normally needed, a &amp;#39;null file&amp;#39; (with the special name -n) is often given instead (and the length specified as a parameter to synth or by another given effect that can has an associated length). For example, the following produces a 3 second, 48kHz, audio file containing a sine-wave swept from 300 to 3300 Hz:and this produces an 8 kHz version: Multiple channels can be synthesised by specifying the set of parameters shown between braces multiple times; the following puts the swept tone in the left channel and adds &amp;#39;brown&amp;#39; noise in the right: The following example shows how two synth effects can be cascaded to create a more complex waveform: Frequencies can also be given as a number of musical semitones relative to &amp;#39;middle A&amp;#39; (440 Hz) by prefixing a &amp;#39;%&amp;#39; character; for example, the following could be used to help tune a guitar&amp;#39;s &amp;#39;E&amp;#39; strings: NB This effect generates audio at maximum volume (0dBFS), which means that there is a high chance of clipping when using the audio subsequently, so in most cases, you will want to follow this effect with the gain effect to prevent this from happening. (See also Clipping above.) len is the length of audio to synthesise expressed as a time or as a number of samples; 0=inputlength, default=0. The format for specifying lengths in time is hh:mm:ss.frac. The format for specifying sample counts is the number of samples with the letter &amp;#39;s&amp;#39; appended to it. freq/freq2 are the frequencies at the beginning/end of synthesis in Hz or, if preceded with &amp;#39;%&amp;#39;, semitones relative to A (440 Hz); for both, default=%0. If freq2 is given, then len must also have been given and the generated tone will be swept between the given frequencies. The two given frequencies must be separated by one of the characters &amp;#39;:&amp;#39;, &amp;#39;+&amp;#39;, &amp;#39;/&amp;#39;, or &amp;#39;-&amp;#39;. This character is used to specify the sweep function as follows: off is the bias (DC-offset) of the signal in percent; default=0. ph is the phase shift in percentage of 1 cycle; default=0. Not used for noise. p1 is the percentage of each cycle that is &amp;#39;on&amp;#39; (square), or &amp;#39;rising&amp;#39; (triangle, exp, trapezium); default=50 (square, triangle, exp), default=10 (trapezium). p2 (trapezium): the percentage through each cycle at which &amp;#39;falling&amp;#39; begins; default=50. exp: the amplitude in percent; default=100. Change the audio tempo (but not its pitch). The audio is chopped up into segments which are then shifted in the time domain and overlapped (cross-faded) at points where their waveforms are most similar (as determined by measurement of &amp;#39;least squares&amp;#39;). By default, linear searches are used to find the best overlapping points; if the optional -q parameter is given, tree searches are used instead, giving a quicker, but possibly lower quality, result. factor gives the ratio of new tempo to the old tempo, so eg 1.1 speeds up the tempo by 10%, and 0.9 slows it down by 10%. The optional segment parameter selects the algorithm&amp;#39;s segment size in milliseconds. The default value is 82 and is typically suited to making small changes to the tempo of music; for larger changes (eg a factor of 2), 50 ms may give a better result. When changing the tempo of speech, a segment size of around 30 ms often works well. The optional search parameter gives the audio length in milliseconds (default 14) over which the algorithm will search for overlapping points. Larger values use more processing time and do not necessarily produce better results. See also speed for an effect that changes tempo and pitch together, and pitch for an effect that changes pitch without changing tempo. Apply a tremolo (low frequency amplitude modulation) effect to the audio. The tremolo frequency in Hz is given by speed, and the depth as a percentage by depth (default 40). Trim can trim off unwanted audio from the beginning and end of the audio. Audio is not sent to the output stream until the start location is reached. The optional length parameter tells the number of samples to output after the start sample and is used to trim off the back side of the audio. Using a value of 0 for the start parameter will allow trimming off the back side only. Both options can be specified using either an amount of time or an exact count of samples. The format for specifying lengths in time is hh:mm:ss.frac. A start value of 1:30.5 will not start until 1 minute, thirty and Â½ seconds into the audio. The format for specifying sample counts is the number of samples with the letter &amp;#39;s&amp;#39; appended to it. A value of 8000s will wait until 8000 samples are read before starting to process audio. Apply an amplification or an attenuation to the audio signal. Unlike the -v option (which is used for balancing multiple input files as they enter the SoX effects processing chain), vol is an effect like any other so can be applied anywhere, and several times if necessary, during the processing chain. The amount to change the volume is given by gain which is interpreted, according to the given type, as follows: if type is amplitude (or is omitted), then gain is an amplitude (ie voltage or linear) ratio, if power, then a power (ie wattage or voltage-squared) ratio, and if dB, then a power change in dB. When type is amplitude or power, a gain of 1 leaves the volume unchanged, less than 1 decreases it, and greater than 1 increases it; a negative gain inverts the audio signal in addition to adjusting its volume. When type is dB, a gain of 0 leaves the volume unchanged, less than 0 decreases it, and greater than 0 increases it. See [4] for a detailed discussion on electrical (and hence audio signal) voltage and power ratios. An optional limitergain value can be specified and should be a value much less than 1 (eg 0.05 or 0.02) and is used only on peaks to prevent clipping. Not specifying this parameter will cause no limiter to be used. In verbose mode, this effect will display the percentage of the audio that needed to be limited. The following effects have been renamed or have their functionality included in another effect; they continue to work in this version of SoX but may be removed in future. Change the audio key (ie pitch but not tempo). This is just an alias for the pitch effect. Mix the audio from one channel to another. Use mixer or remix instead of this effect. The direction is a value from -1 to 1. -1 represents far left and 1 represents far right. Change the sampling rate using &amp;#39;polyphase interpolation&amp;#39;, a DSP algorithm. polyphase copes with only certain rational fraction resampling ratios, and, compared with the rate effect, is generally slow, memory intensive, and has poorer stop-band rejection. If the -w parameter is nut, then a Blackman-Nuttall (~90 dB stop-band) window will be used; ham selects a Hamming (~43 dB stop-band) window. The default is Blackman-Nuttall. The -width parameter specifies the (approximate) width of the filter. The default is 1024 samples, which produces reasonable results. The -cut-off value (c) specifies the filter cut-off frequency in terms of fraction of frequency bandwidth, also know as the Nyquist frequency. See the resample effect for further information on Nyquist frequency. If up-sampling, then this is the fraction of the original signal that should go through. If down-sampling, this is the fraction of the signal left after down-sampling. The default is 0.95. Change the sampling rate using libsamplerate, also known as &amp;#39;Secret Rabbit Code&amp;#39;. This effect is optional and, due to licence issues, is not included in all versions of SoX. Compared with the rate effect, rabbit is very slow. See http://www.mega-nerd.com/SRC for details of the algorithms. Algorithms 0 through 2 are progressively faster and lower quality versions of the sinc algorithm; the default is -c0. Algorithm 3 is zero-order hold, and 4 is linear interpolation. See also rate, polyphase and resample for other sample-rate changing effects, and see resample for more discussion of resampling. Change the sampling rate using simulated analog filtration. Compared with the rate effect, resample is slow, and has poorer stop-band rejection. Only the low quality option works with all resampling ratios. By default, linear interpolation of the filter coefficients is used, with a window width about 45 samples at the lower of the two rates. This gives an accuracy of about 16 bits, but insufficient stop-band rejection in the case that you want to have roll-off greater than about 0.8 of the Nyquist frequency. The -q* options will change the default values for roll-off and beta as well as use quadratic interpolation of filter coefficients, resulting in about 24 bits precision. The -qs, -q, or -ql options specify increased accuracy at the cost of lower execution speed. It is optional to specify roll-off and beta parameters when using the -q* options. -qs, -q, or -ql use window lengths of 45, 75, or 149 samples, respectively, at the lower sample-rate of the two files. This means progressively sharper stop-band rejection, at proportionally slower execution times. rolloff refers to the cut-off frequency of the low pass filter and is given in terms of the Nyquist frequency for the lower sample rate. rolloff therefore should be something between 0 and 1, in practise 0.8-0.95. The defaults are indicated above. The Nyquist frequency is equal to half the sample rate. Logically, this is because the A/D converter needs at least 2 samples to detect 1 cycle at the Nyquist frequency. Frequencies higher then the Nyquist will actually appear as lower frequencies to the A/D converter and is called aliasing. Normally, A/D converts run the signal through a lowpass filter first to avoid these problems. Similar problems will happen in software when reducing the sample rate of an audio file (frequencies above the new Nyquist frequency can be aliased to lower frequencies). Therefore, a good resample effect will remove all frequency information above the new Nyquist frequency. The rolloff refers to how close to the Nyquist frequency this cut-off is, with closer being better. When increasing the sample rate of an audio file you would not expect to have any frequencies exist that are past the original Nyquist frequency. Because of resampling properties, it is common to have aliasing artifacts created above the old Nyquist frequency. In that case the rolloff refers to how close to the original Nyquist frequency to use a highpass filter to remove these artifacts, with closer also being better. The beta, if unspecified, defaults to 16. This selects a Kaiser window. You can select a Blackman-Nuttall window by specifying anything â‰¤ 2 here. For more discussion of beta, look under the filter effect. Default parameters are, as indicated above, Kaiser window of length 45, roll-off 0.80, beta 16, linear interpolation. See also rate, polyphase and rabbit for other sample-rate changing effects. There is a detailed analysis of resample and polyphase at http://leute.server.de/wilde/resample.html; see rabbit for a pointer to its own documentation. Exit status is 0 for no error, 1 if there is a problem with the command-line parameters, or 2 if an error occurs during file processing. Please report any bugs found in this version of SoX to the mailing list (sox-users@lists.sourceforge.net). soxi(1), soxformat(7), libsox(3) audacity(1), imagemagick(1), gnuplot(1), octave(1), wget(1) The SoX web site at http://sox.sourceforge.net SoX scripting examples at http://sox.sourceforge.net/Docs/Scripts This program is free software;您可以根据自由软件基金会发布的 GNU 通用公共许可证的条款重新分发和/或修改它； either version 2, or (at your option) any later version.分发该程序是希望它有用，但不提供任何保证；甚至没有针对特定用途的适销性或适用性的默示保证。有关详细信息，请参阅 GNU 通用公共许可证。 Chris Bagwell (cbagwell@users.sourceforge.net). Other authors and contributors are listed in the AUTHORS file that is distributed with the source code. soxexam(1) &lt;a href=&quot;https://hackernews.betacat.io/#play-1-linux-manual-page&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36256931&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Turn dumb tweets into cuneiform tablets&lt;/stitle>; &lt;id>;https://dumbcuneiform.com/&lt;/id>; &lt;updated>;2023-06-10T22:55:21.225315Z&lt;/updated>; &lt;link href=&quot;https://dumbcuneiform.com/&quot;/>; &lt;author>; &lt;name>;cainxinth&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=cainxinth&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://dumbcuneiform.com/content/polyglot/images/intro-image.jpg&quot; style=&quot;width: 220px; height: 113px;&quot; />;&lt;br />;The article describes a service that creates palm-sized clay tablets inscribed with cuneiform characters to represent short messages, such as love notes or tweets. The tablets are made by hand and take a couple of weeks to create and ship. &lt;a href=&quot;https://hackernews.betacat.io/#turn-dumb-tweets-into-cuneiform-tablets&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36275974&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Ted Kaczynski has died&lt;/stitle>; &lt;id>;https://www.nytimes.com/2023/06/10/us/ted-kaczynski-dead.html&lt;/id>; &lt;updated>;2023-06-10T17:55:21.225699Z&lt;/updated>; &lt;link href=&quot;https://www.nytimes.com/2023/06/10/us/ted-kaczynski-dead.html&quot;/>; &lt;author>; &lt;name>;mfiguiere&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mfiguiere&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static01.nyt.com/images/2023/06/11/obituaries/00Kaczynski/00Kaczynski-articleLarge.jpg?quality=75&amp;auto=webp&amp;disable=upscale&quot; style=&quot;width: 220px; height: 155px;&quot; />;&lt;br />;Theodore J. Kaczynski, known as the Unabomber, has died at the age of 81 in a federal prison medical center in North Carolina. Kaczynski was responsible for a violent bombing spree from 1978 to 1995, killing three people and injuring 23, with the goal of fomenting the collapse of the modern social order. &lt;a href=&quot;https://hackernews.betacat.io/#ted-kaczynski-has-died&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36272409&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Do open source licences cover the Ship of Theseus?&lt;/stitle>; &lt;id>;https://shkspr.mobi/blog/2023/06/do-open-source-licences-cover-the-ship-of-theseus/&lt;/id>; &lt;updated>;2023-06-10T14:55:21.226066Z&lt;/updated>; &lt;link href=&quot;https://shkspr.mobi/blog/2023/06/do-open-source-licences-cover-the-ship-of-theseus/&quot;/>; &lt;author>; &lt;name>;edent&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=edent&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://shkspr.mobi/apple-touch-icon.png&quot; style=&quot;width: 220px; height: 221px;&quot; />;&lt;br />;作者下载了一个带有归属许可的HTML模板，但最终重写了75%的HTML和更改了61%的CSS。他们质疑是否仍需要根据许可条款注明原作者的身份。 &lt;a href=&quot;https://hackernews.betacat.io/#do-open-source-licences-cover-the-ship-of-theseus&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36256325&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Django Views – The Right Way&lt;/stitle>; &lt;id>;https://spookylukey.github.io/django-views-the-right-way/index.html&lt;/id>; &lt;updated>;2023-06-10T19:55:21.226556Z&lt;/updated>; &lt;link href=&quot;https://spookylukey.github.io/django-views-the-right-way/index.html&quot;/>; &lt;author>; &lt;name>;sgt&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=sgt&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;The article is a guide to using Function Based Views (FBVs) in Django, as opposed to Class Based Views (CBVs), which have become the default way to teach and learn Django views.作者旨在提供可转移的知识，让开发人员免于学习不必要的 API。 &lt;a href=&quot;https://hackernews.betacat.io/#django-views-the-right-way&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36273892&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;DeArrow: Crowdsourcing better titles and thumbnails on YouTube&lt;/stitle>; &lt;id>;https://github.com/ajayyy/DeArrow&lt;/id>; &lt;updated>;2023-06-10T19:55:21.226933Z&lt;/updated>; &lt;link href=&quot;https://github.com/ajayyy/DeArrow&quot;/>; &lt;author>; &lt;name>;tech234a&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=tech234a&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/ajayyy/DeArrow/master/public/icons/logo-128.png&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;本文提供了有关如何使用 npm run build 命令生成 Chrome 或 Firefox 扩展的开发或生产版本的说明。构建的扩展可以作为 Chrome 中的解压扩展加载，也可以作为 Firefox 中的临时扩展加载。 &lt;a href=&quot;https://hackernews.betacat.io/#dearrow-crowdsourcing-better-titles-and-thumbnails-on-youtube&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36273890&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Arrested for using Linux and encryption in France [video]&lt;/stitle>; &lt;id>;https://www.youtube.com/watch?v=cyFL7KJGcC0&lt;/id>; &lt;updated>;2023-06-10T22:55:21.227306Z&lt;/updated>; &lt;link href=&quot;https://www.youtube.com/watch?v=cyFL7KJGcC0&quot;/>; &lt;author>; &lt;name>;xqcgrek2&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=xqcgrek2&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;iframe src=&quot;//www.youtube.com/embed/cyFL7KJGcC0&quot; frameborder=&quot;0&quot; allowfullscreen loading=&quot;lazy&quot;>;&lt;/iframe>; &lt;a href=&quot;https://hackernews.betacat.io/#arrested-for-using-linux-and-encryption-in-france-video&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36275795&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;What is Technicolor? (2021)&lt;/stitle>; &lt;id>;https://www.studiobinder.com/blog/what-is-technicolor-definition/&lt;/id>; &lt;updated>;2023-06-10T18:55:21.227684Z&lt;/updated>; &lt;link href=&quot;https://www.studiobinder.com/blog/what-is-technicolor-definition/&quot;/>; &lt;author>; &lt;name>;thunderbong&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=thunderbong&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://s.studiobinder.com/wp-content/uploads/2020/07/What-is-Technicolor-StudioBinder.jpg&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;Technicolor 是用于在电影中制作色彩的一系列流程，该公司在 1916 年至 1932 年期间对其系统进行了修补，以使好莱坞可以使用该流程。 Technicolor 电影以其明亮、大胆、饱和的色彩而闻名。 &lt;a href=&quot;https://hackernews.betacat.io/#what-is-technicolor-2021&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36254776&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Ask HN: Advice on starting a YouTube channel?&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=36253565&lt;/id>; &lt;updated>;2023-06-10T16:55:21.228066Z&lt;/updated>; &lt;link href=&quot;https://news.ycombinator.com/item?id=36253565&quot;/>; &lt;author>; &lt;name>;mr_o47&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mr_o47&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;The article provides advice on starting a successful YouTube channel, including the importance of sticking to a schedule, choosing a niche carefully, and avoiding overuse of shorts.作者用倦怠和多样化的内容分享了自己的经历。 &lt;a href=&quot;https://hackernews.betacat.io/#ask-hn-advice-on-starting-a-youtube-channel&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36253565&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Water Resilience Portfolio Review&lt;/stitle>; &lt;id>;https://onthepublicrecord.org/2020/01/04/water-resilience-portfolio-review/&lt;/id>; &lt;updated>;2023-06-11T00:55:21.228454Z&lt;/updated>; &lt;link href=&quot;https://onthepublicrecord.org/2020/01/04/water-resilience-portfolio-review/&quot;/>; &lt;author>; &lt;name>;luu&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=luu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;After all that, all the listening sessions and all the public input, what the Newsom administration came up with was a program-by-program list of Budget Change Proposal justifications. This is what the departments do every year internally and then submit to Finance, but apparently this year, they got put together into a glossy report and called the Resilience Portfolio. I mean this literally; I recognize the language of the BCPs we submit every year. In some ways, this is good. It means that when it comes time to report on how we are achieving the Resilience Portfolio, we will be able to report lots of progress. I suppose it is also interesting that after all the input, the Newsom administration went with “what our own agencies are currently doing plus new laws”. I like trying to imagine the thinking of the administration. Here&#39;s how I picture it: Early 2019: Lets come up with something new! New, for climate change!是的！ We&#39;ll ask EVERYONE and survey the entire landscape and new ideas will come out and we&#39;ll do them! Mid 2019: We&#39;re holding listening sessions. Christ there&#39;s a lot. And all of it is the same language from the last time they lobbied us on these issues, only now they add the word Resilience everywhere. The Resilience Temperance Flats Resilience Dam! Fall 2019: OMG there&#39;s so much. Some of it might be neat, but we&#39;re not set up to do that. And if we put in that, we have to balance it with something from the other side. I&#39;m not sure we can do any of this. Late Fall 2019: You know what is kinda organized and we might be able to do? This stuff from the agencies. They are going to have to do new stuff anyway, because of new laws. Did you know we do all this?不算太差。 Jan 3, 2020: Resilience Portfolio!, from the State Resilience Water Resilience Resources Resilience Control Resilience Board, the Resilience Department of Resilience Water Resilience Resources, with a tiny bone thrown to DFW because their shit was never really going in there anyway. I suppose it is delightful that the new administration got to take a deep dive into what their agencies do and came away endorsing it. But three things. First, if they had known what the agencies do and respected the agencies, they wouldn&#39;t have had to spend a year to get to “what the agencies do now”. Second, they have no future vision, only “please keep what we&#39;re doing now together until we&#39;re out of office”. Third is the worst. In addition to initially not respecting the agencies&#39; work, they had no respect for the stakeholders&#39; time. People spent thousands of hours putting together their input. Far as I can see, that was all wasted. &lt;a href=&quot;https://hackernews.betacat.io/#water-resilience-portfolio-review&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;The computer graphics industry got started at the university of Utah&lt;/stitle>; &lt;id>;https://spectrum.ieee.org/history-of-computer-graphics-industry&lt;/id>; &lt;updated>;2023-06-10T02:55:21.228835Z&lt;/updated>; &lt;link href=&quot;https://spectrum.ieee.org/history-of-computer-graphics-industry&quot;/>; &lt;author>; &lt;name>;sohkamyung&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=sohkamyung&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://spectrum.ieee.org/media-library/a-large-group-of-older-men-standing-for-a-group-portrait-some-sitting-on-chairs-in-front-and-others-standing-behind-them.jpg?id=34017358&amp;width=1200&amp;height=900&quot; style=&quot;width: 220px; height: 165px;&quot; />;&lt;br />;计算机图形行业的发展在很大程度上归功于 David Evans 和 Ivan E. Sutherland 的开创性工作，他们在 1960 年代和 70 年代在犹他大学进行了开创性的研究。他们的工作帮助推动了这个行业的发展，该行业现在严重依赖计算机图形和可视化技术来制作流行的电影和电视节目。 &lt;a href=&quot;https://hackernews.betacat.io/#the-computer-graphics-industry-got-started-at-the-university-of-utah&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36264744&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;How to password protect a static HTML page with no JavaScript&lt;/stitle>; &lt;id>;https://shkspr.mobi/blog/2023/02/how-to-password-protect-a-static-html-page-with-no-js/&lt;/id>; &lt;updated>;2023-06-11T00:55:21.229206Z&lt;/updated>; &lt;link href=&quot;https://shkspr.mobi/blog/2023/02/how-to-password-protect-a-static-html-page-with-no-js/&quot;/>; &lt;author>; &lt;name>;promiseofbeans&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=promiseofbeans&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://shkspr.mobi/apple-touch-icon.png&quot; style=&quot;width: 220px; height: 221px;&quot; />;&lt;br />;The article discusses a method of password protecting a static HTML page using CSS and webfonts instead of JavaScript. The author suggests using a ROT13 font and font ligatures to further obfuscate the text. The method is not foolproof but provides a way to encrypt a statically served HTML file without using JavaScript. &lt;a href=&quot;https://hackernews.betacat.io/#how-to-password-protect-a-static-html-page-with-no-javascript&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36276710&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;The case for the decentralization of online forums&lt;/stitle>; &lt;id>;https://viksit.com/blog/case-for-decentralization-online-forums&lt;/id>; &lt;updated>;2023-06-10T18:55:21.229604Z&lt;/updated>; &lt;link href=&quot;https://viksit.com/blog/case-for-decentralization-online-forums&quot;/>; &lt;author>; &lt;name>;viksit&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=viksit&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Recent actions by Reddit and Stackoverflow have highlighted the issues with centralized platforms, including compromised user experience and stifled creativity.解决方案在于去中心化，它提供更大的抵御审查和网络攻击的弹性，以及更可持续和以用户为中心的货币化方法。 &lt;a href=&quot;https://hackernews.betacat.io/#the-case-for-the-decentralization-of-online-forums&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36272935&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;How Folklore Goes Digital&lt;/stitle>; &lt;id>;https://www.return.life/p/how-folklore-goes-digital&lt;/id>; &lt;updated>;2023-06-10T19:55:21.229981Z&lt;/updated>; &lt;link href=&quot;https://www.return.life/p/how-folklore-goes-digital&quot;/>; &lt;author>; &lt;name>;related&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=related&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbe2aefef-3c28-4cdb-8785-99deb2b38774_1312x928.png&quot; style=&quot;width: 220px; height: 156px;&quot; />;&lt;br />;文章讨论了都市传说的概念及其与真理和信仰的关系。它探讨了人们对错误信息的情绪反应，以及保持干净和可用的知识共享的重要性。这篇文章还探讨了备忘录在民间传说中的作用，以及它们如何在数字时代转变为传奇。 &lt;a href=&quot;https://hackernews.betacat.io/#how-folklore-goes-digital&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Deep dive: how Big Ambitions hit it big on Steam&lt;/stitle>; &lt;id>;https://newsletter.gamediscover.co/p/deep-dive-how-big-ambitions-hit-it&lt;/id>; &lt;updated>;2023-06-10T20:55:21.230357Z&lt;/updated>; &lt;link href=&quot;https://newsletter.gamediscover.co/p/deep-dive-how-big-ambitions-hit-it&quot;/>; &lt;author>; &lt;name>;not-now&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=not-now&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff49c7f8e-a5fc-44f9-9aa9-818fea43137f_800x448.jpeg&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;Big Ambitions 是一款由 Hovgaard Games 开发的抢先体验企业家模拟游戏，在 Steam 上大受欢迎，在大约 20 天内获得了超过 3,700 条压倒性的好评，并售出了 163,000 套。游戏的深度和复杂性，以及游戏机制的独特融合，促成了它的成功。 &lt;a href=&quot;https://hackernews.betacat.io/#deep-dive-how-big-ambitions-hit-it-big-on-steam&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36267318&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;GCP automatically lowered our quota, caused an incident, and refused to upgrade&lt;/stitle>; &lt;id>;https://twitter.com/JustJake/status/1667478906591666176&lt;/id>; &lt;updated>;2023-06-10T17:55:21.230724Z&lt;/updated>; &lt;link href=&quot;https://twitter.com/JustJake/status/1667478906591666176&quot;/>; &lt;author>; &lt;name>;teej&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=teej&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Something went wrong, but don&#39;t fret — let&#39;s give it another shot. &lt;a href=&quot;https://hackernews.betacat.io/#gcp-automatically-lowered-our-quota-caused-an-incident-and-refused-to-upgrade&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36272747&quot; target=&quot;_blank&quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;