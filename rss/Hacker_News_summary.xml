<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-06-22T00:31:24.865505Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;我是否收到了欺诈性的 DMCA 删除？&lt;/stitle>; &lt;id>;https://incoherency.co.uk/blog/stories/hardbin-fake-takedowns.html&lt;/id>; &lt;更新>;2023-06-21T22:30:15.682491Z&lt;/更新>; &lt;link href=&quot;https://incoherency.co.uk/blog/stories/hardbin-fake-takedowns.html&quot;/>; &lt;作者>; &lt;名称>;jstanley&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=jstanley&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// img.incoherency.co.uk/4452/thumb&quot; style=&quot;宽度：220px；高度：136px；&quot; />;&lt;br />;我今天收到了 3 封 DMCA 删除电子邮件，涵盖了我的 Hardbin.com IPFS 网关上的 7350 个 URL。据称这些 URL 提供侵权书籍副本。奇怪的是，在我有 nginx 日志的这段时间里，这 7350 个 URL 都没有被访问过，而我检查过的 URL 甚至都没有工作。这是否意味着 DMCA 删除通知是欺诈性的？ &lt;a href=&quot;https://hackernews.betacat.io/#did-i-receive-fraudulent-dmca-takedowns&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36425433&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;通过开发模式让 Figma 更好地为开发者服务&lt;/stitle>; &lt;id>;https://www.figma.com/blog/introducing-dev-mode/&lt;/id>; &lt;更新>;2023-06-21T17:30:15.684478Z&lt;/更新>; &lt;link href=&quot;https://www.figma.com/blog/introducing-dev-mode/&quot;/>; &lt;作者>; &lt;名称>;emilsjolander &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=emilsjolander&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cdn.sanity .io/images/599r6htc/localized/3d50ba4aee877e89ed863d515b87408ceb669098-1560x1248.png?w=1560&amp;h=1248&amp;q=75&amp;fit=max&amp;auto=format&quot; style=&quot;宽度：220px；高度：176px；&quot; />;&lt;br />;Figma 引入了开发模式，这是一个旨在满足开发人员需求的新工作区。开发模式为开发人员提供了他们日常使用的工具，使他们能够快速有效地访问设计文件中的信息和资产。 &lt;a href=&quot;https://hackernews.betacat.io/#making-figma-better-for-developers-with-dev-mode&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36420712&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;地图扭曲了我们看待世界的方式&lt;/stitle>; &lt;id>;https://unchartedterritories.tomaspueyo.com/p/maps-tropic-how-we -see-the-world&lt;/id>; &lt;更新>;2023-06-21T17:30:15.686823Z&lt;/更新>; &lt;link href=&quot;https://unchartedterritories.tomaspueyo.com/p/maps- Distortion-how- we-see-the-world&quot;/>; &lt;作者>; &lt;名称>;yarapavan &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=yarapavan&lt;/uri>; &lt;/作者>; &lt;内容类型=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_120,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3。 amazonaws.com%2Fpublic%2Fimages%2F9023d572-d461-47cb-83b3-49585f7238bc_480x480.gif&quot; style=&quot;宽度：220 像素；高度：220 像素；&quot; />;&lt;br />;地图是 3D 球体的 2D 投影，会导致扭曲。墨卡托投影扭曲了我们对世界的感知，因为它以赤道和参考子午线为中心。不同地区和国家看起来比实际情况更大或更小。 &lt;a href=&quot;https://hackernews.betacat.io/#maps- Distortion-how-we-see-the-world&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=36421315&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;为什么选择 Kakoune – 寻求更好的代码编辑器 (2016)&lt;/stitle>; &lt;id>;https://kakoune.org/why-kakoune/why-kakoune .html&lt;/id>; &lt;更新>;2023-06-21T21:30:15.687547Z&lt;/更新>; &lt;link href=&quot;https://kakoune.org/why-kakoune/why-kakoune.html&quot;/>; &lt;作者>; &lt;name>;r3trohack3r&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=r3trohack3r&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https: //kakoune.org/why-kakoune/kakoune_logo.svg&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;投入时间来掌握代码编辑器是值得的，因为代码编辑是编程的重要组成部分。像 Kakoune 这样的模态文本编辑器是最佳选择，因为它们提供了方便的快捷方式、一种文本编辑语言，并使编辑变得更快、更有趣。 &lt;a href=&quot;https://hackernews.betacat.io/#why-kakoune-the-quest-for-a-better-code-editor-2016&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=36424256&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;免费器官&lt;/stitle>; &lt;id>;https://www.organclearinghouse.com/organs-for-sale#/3141-austin -san-francisco&lt;/id>; &lt;更新>;2023-06-21T19:30:15.688047Z&lt;/更新>; &lt;link href=&quot;https://www.organclearinghouse.com/organs-for-sale#/3141-austin -san-francisco&quot;/>; &lt;作者>; &lt;名称>;mhb&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=mhb&lt;/uri>; &lt;/author>; &lt;content type=&quot;html &quot;>;该管风琴是为 1915 年巴拿马泛太平洋博览会的节日大厅建造的。后来搬迁到市政厅附近新建的公民礼堂。 &lt;a href=&quot;https://hackernews.betacat.io/#free-organ&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item? id=36423047&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题类型=&quot;text&quot;>;特拉华州法案 (HB 121) 允许公司在选举中投票&lt;/stitle>; &lt;id>;https://legis.delaware.gov/BillDetail/130205&lt;/id>; &lt;更新>;2023-06-21T19 :30:15.688532Z&lt;/updated>; &lt;link href=&quot;https://legis.delaware.gov/BillDetail/130205&quot;/>; &lt;作者>; &lt;name>;lamontcg&lt;/name>; &lt;uri>;https://news. ycombinator.com/user?id=lamontcg&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>; &lt;a href=&quot;https://hackernews.betacat.io/#delaware-bill-hb-121-to -allow-corporations-to-vote-in-elections&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36423148&quot; target=&quot; _blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;神经网络Net Tank 城市传奇&lt;/stitle>; &lt;id>;https://gwern.net/tank&lt;/id>; &lt;更新>;2023-06-21T21:30:15.689975Z&lt;/更新>; &lt;link href=&quot;https:// gwern.net/tank&quot;/>; &lt;author>; &lt;name>;belter&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=belter&lt;/uri>; &lt;/author>; &lt;content type=&quot; html&quot;>;&lt;img src=&quot;https://gwern.net/static/img/logo/logo-whitebg-large-border.png&quot; style=&quot;width: 220px; height: 249px;&quot; />;&lt;br />;人工智能领域的一个警示故事讲述了研究人员训练神经网络 (NN) 来检测照片中的坦克，却发现神经网络学到了一些无用的东西，比如一天中的时间。这个故事经常被告知要警告算法的局限性和数据收集的重要性，以避免数据集偏差。然而，经过广泛的研究，得出的结论是坦克的故事只是一个都市传说，并没有基于主要来源。&lt;a href=&quot;https://hackernews.betacat.io/#the-neural-net-tank-urban-legend&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36416895&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Coq 中的函数式编程&lt;/stitle>; &lt;id>;https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html&lt;/id>; &lt;更新>;2023- 06-21T22:30:15.690490Z&lt;/更新>; &lt;link href=&quot;https://softwarefoundations.cis.upenn.edu/lf-current/Basics.html&quot;/>; &lt;作者>; &lt;名称>;atan2 &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=atan2&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;函数式编程风格建立在简单的日常数学直觉之上：如果过程或方法没有副作用，那么（忽略效率）我们需要了解的就是它如何将输入映射到输出——也就是说，我们可以将其视为计算数学函数的具体方法。这是“函数式编程”中“函数式”一词的一种含义。程序和简单数学对象之间的直接联系支持形式正确性证明和关于程序行为的合理的非正式推理。 &lt;a href=&quot;https://hackernews.betacat.io/#function-programming-in-coq&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=36425214&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;显示 HN：gpt-engineer – 开发人员修补 AI 编程工具的平台&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id=36422730&lt;/id >; &lt;更新>;2023-06-21T19:30:15.690955Z&lt;/更新>; &lt;link href=&quot;https://news.ycombinator.com/item?id=36422730&quot;/>; &lt;作者>; &lt;名称>;antonoo&lt;/ name>; &lt;uri>;https://news.ycombinator.com/user?id=antonoo&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;GPT 工程师是一个开放平台，供开发人员试验和创建自己的产品自己的代码生成工具箱。该项目仍处于早期阶段，还有改进的空间。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-gpt-engineer-platform-for-devs-to-tinker-with-ai-programming-tools&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36422730&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml :base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;一款应用程序可以将智能手机变成准确检测发烧的温度计&lt;/stitle>; &lt;id>;https://www .washington.edu/news/2023/06/21/an-app-can-transform-smartphones-into-thermometers-that-accurately-detect-fevers/&lt;/id>; &lt;更新>;2023-06-21T22:30： 15.691430Z&lt;/更新>; &lt;link href=&quot;https://www.washington.edu/news/2023/06/21/an-app-can-transform-smartphones-into-thermometers-that-accurately-detect-fevers /&quot;/>; &lt;作者>; &lt;名称>;geox&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=geox&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt; img src =“https://uw-s3-cdn.s3.us-west-2.amazonaws.com/wp-content/uploads/sites/6/2023/06/20163014/FeverPhone_WEB001-750x500.jpg”样式= “宽度：220px； height: 147px;&quot; />;&lt;br />;华盛顿大学的一组研究人员开发了一款名为 FeverPhone 的应用程序，可以将智能手机转变为温度计，而无需额外的硬件。该应用程序使用手机的触摸屏和现有的电池温度传感器估计人们的核心体温。在一项临床试验中，FeverPhone 估计患者的核心体温，平均误差约为 0.41 华氏度。&lt;a href=&quot;https://hackernews.betacat.io/#an-app-can-将智能手机转换为温度计-that-accurately-detect-fevers&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36425006&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot; >;哈佛不诚实专家被指控不诚实&lt;/stitle>; &lt;id>;https://www.ft.com/content/a8c07365-f85d-47a0-98a4-b6f71da697ef&lt;/id>; &lt;updated>;2023-06-21T21:30： 15.691880Z&lt;/更新>; &lt;link href=&quot;https://www.ft.com/content/a8c07365-f85d-47a0-98a4-b6f71da697ef&quot;/>; &lt;作者>; &lt;名称>;hansmeierbaum &lt;/名称>; &lt;uri>;https ://news.ycombinator.com/user?id=hansmeierbaum&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;哈佛不诚实专家被指控不诚实&lt;a href=&quot;https://hackernews.betacat.io /#harvard-dishonesty-expert-accused-of-dishonesty&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36424090&quot; target= &quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;对象使用 ANSI-C 进行面向型编程 (1993) [pdf]&lt;/stitle>; &lt;id>;https://www.mclibre.org/descargar/docs/libros/ooc-ats.pdf&lt;/id>; &lt;更新>;2023- 06-21T18:30:15.692327Z&lt;/更新>; &lt;link href=&quot;https://www.mclibre.org/descargar/docs/libros/ooc-ats.pdf&quot;/>; &lt;作者>; &lt;名称>;Tomte&lt;/ name>; &lt;uri>;https://news.ycombinator.com/user?id=Tomte&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;本书不会赞扬面向对象编程或谴责面向对象编程老办法。我们只是要使用 ANSI-C 来发现面向对象编程是如何完成的、它的技术是什么、为什么它们帮助我们解决更大的问题，以及我们如何利用通用性和编程来更早地发现错误。 &lt;a href=&quot;https://hackernews.betacat.io/#object-orient-programming-with-ansi-c-1993-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36422116&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我的孩子 (n=2) 如何获得绝对音高&lt;/stitle>; &lt;id>;https://furiouslyrotatingshapes.substack.com/p/how-my -children-n2-acquired-absolute&lt;/id>; &lt;更新>;2023-06-21T15:30:15.692795Z&lt;/更新>; &lt;link href=&quot;https://furiouslyrotatingshapes.substack.com/p/how-my- Children-n2-acquired-absolute&quot;/>; &lt;作者>; &lt;名称>;bluecalm &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=bluecalm&lt;/uri>; &lt;/作者>; &lt;内容类型=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3。 amazonaws.com%2Fpublic%2Fimages%2Ff7750c66-6f81-4c67-a7f4-965a3cddef60_2080x736.png&quot; style=&quot;宽度：220px；高度：78px；&quot; />;&lt;br />;我的两个儿子都有绝对音高（AP），这意味着他们可以在没有任何参考音符的情况下产生和识别音乐音高。我的大儿子拥有 AP 的能力已经转化为轻松的音乐课程以及即兴创作和创作音乐的能力。 &lt;a href=&quot;https://hackernews.betacat.io/#how-my-children-n-2-acquired-absolute-pitch&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=36419389&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;句柄是更好的指针（2018）&lt;/stitle>; &lt;id>;https://floooh.github.io/2018/06/17/handles- vs-pointers.html&lt;/id>; &lt;更新>;2023-06-21T15:30:15.693266Z&lt;/更新>; &lt;link href=&quot;https://floooh.github.io/2018/06/17/handles-vs -pointers.html&quot;/>; &lt;作者>; &lt;名称>;ibobev&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ibobev&lt;/uri>; &lt;/author>; &lt;content type=&quot;html &quot;>;本文讨论了使用“索引句柄”作为 C 和 C++ 动态内存管理中的原始指针和智能指针的替代品。它解释了如何通过集中内存管理、将相同类型的项目分组到数组中以及使用“索引句柄”而不是指针来防止与内存相关的问题，例如内存损坏、内存碎片和内存泄漏。 &lt;a href=&quot;https://hackernews.betacat.io/#handles-are-the-better-pointers-2018&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36419739&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;MyNOR – 小型计算机。没有CPU，没有ALU，一个或非门就足够了&lt;/stitle>; &lt;id>;http://www.mynor.org/&lt;/id>; &lt;updated>;2023-06-21T18:30:15.694181Z&lt;/updated>; &lt;link href=&quot;http://www.mynor.org/&quot;/>; &lt;作者>; &lt;名称>;ColinWright&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=ColinWright&lt;/uri >; &lt;/author>; &lt;content type=&quot;html&quot;>;MyNOR 项目页面。 MyNOR 是一款具有分立 CMOS 逻辑 CPU 的 8 位单板计算机，仅使用一个或非门而不是 ALU 来进行所有计算。 &lt;a href=&quot;https://hackernews.betacat.io/#mynor-the-yet-minor-computer-no-cpu-no-alu-one-nor-gate-is-enough&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36416325&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt; Entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;意向修订处方药清单的通知：维生素 D (2020)&lt;/stitle>; &lt;id >;https://www.canada.ca/en/health-canada/services/drugs-health-products/drug-products/prescription-drug-list/notices-changes/notice-intent-vitamin-d.html&lt;/ id>; &lt;更新>;2023-06-21T21:30:15.694624Z&lt;/更新>; &lt;link href=&quot;https://www.canada.ca/en/health-canada/services/drugs-health-products/drug- products/prescription-drug-list/notices-changes/notice-intent-vitamin-d.html&quot;/>; &lt;author>; &lt;name>;walterbell&lt;/name>; &lt;uri>;https://news.ycombinator.com/user? id=walterbell&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;维生素 D 的处方药清单 (PDL) 限定词将进行修订，以允许含量不超过 62.5 微克或 2,500 国际单位的产品处于非处方状态(IU)/口服剂型。修订与维生素 D 相关的 PDL 的提案已通过 2019 年 5 月 22 日在加拿大卫生部网站上发布的咨询通知进行传达。&lt;a href=&quot;https://hackernews.betacat.io/#notice-of-intent -to-amend-the-prescription-drug-list-vitamin-d-2020&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id =36424069&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type= &quot;text&quot;>;《高效 C 阅读日志：专业 C 编程入门》&lt;/stitle>; &lt;id>;https://yongjie.codes/reading-logs/ effective-c/&lt;/id>; &lt;updated>;2023-06- 21T21:30:15.695060Z&lt;/updated>; &lt;link href=&quot;https://yongjie.codes/reading-logs/ effective-c/&quot;/>; &lt;author>; &lt;name>;luu&lt;/name>; &lt;uri>;https: //news.ycombinator.com/user?id=luu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;一本适合好奇者的优秀书籍：这些书对好奇者来说更多的是令人困惑，而不是阐明，以及好奇的学习者可以期待几个小时的尝试（并且惨遭失败）来理解其中包含的散文，只有在简短的 Google 搜索和访问 cppreference.com（以及，上帝保佑，StackOverflow）之后才能完全理解该主题（以及更多内容）。解释也不是很清楚，比如序列点的定义是副作用完成的时刻；与 cppreference.com 上的解释方式进行比较：=如果子表达式 E1 和 E2 之间存在序列点，则 E1 的值计算和副作用都会在 E2 的每个值计算和副作用之前排序= (并提供了sequence-before的单独定义）。 C 的几个原则之一是信任程序员，允许程序员做需要做的事情。 C 的不同实现可以有不同的行为。而且由于 C 中的某些行为是未定义的，因此仅通过编写简单的测试程序来检查这些行为是不可能理解 C 语言的。独立环境可能不提供操作系统，通常用于嵌入式编程。程序启动时调用的函数的名称和类型是实现定义的。 （例如，int main(void) {...}）C 标准文档的附录 J 中列举了五种可移植性问题：即 C 标准未指定的程序行为，并且可能在实现之间提供不同的结果，但在实现中具有一致的、记录的行为。例如，函数参数存储布局，在同一程序内的函数调用之间可能会有所不同。即，C 标准未定义的行为； “使用不可移植或错误的程序构造或错误数据时的行为，标准对此没有强加任何要求”即，在许多系统中广泛使用但不能移植到所有实现的扩展对象是存储在其中的存储你可以代表价值观； “执行环境中的数据存储区域，其内容可以表示值，……当被引用时，对象可以被解释为具有特定类型”指针可以被认为是指向内存中某个位置的地址，其中对象或函数被存储。存储持续时间是对象的生命周期。有四种可用的存储持续时间：自动、静态、线程和分配。在文件范围内声明的对象具有静态存储持续时间。这些对象的生命周期是程序的整个执行过程。还可以使用存储类说明符 static 将块作用域内的变量声明为具有静态存储持续时间。注意：范围和生命周期是完全不同的概念。范围适用于标识符，而生存期适用于对象。标识符的范围是可以通过其名称访问标识符所表示的对象的代码区域。对象的生命周期是指该对象存在的时间段。对象类型具有对齐要求，该要求对该类型的对象可以分配的地址施加限制。一般来说，C 程序员不需要关心对齐要求，因为编译器会为其各种类型选择合适的对齐方式。传统上，这是通过使用链接器命令、使用 malloc 过度分配内存然后向上舍入用户地址或涉及其他非标准设施的类似操作来完成的。每个编译器实现都会将 char 定义为与其他两个类型具有相同的对齐方式、大小、范围、表示形式和行为，但 char 仍然是与其他两个类型不同的类型。 C还提供了wchar_t类型来表示非英文字符所需的更大的字符集。使用上面时可以省略int这个词（即代替short int myShort = 10;） 无符号整数类型：unsigned char、unsigned Short int、unsigned int、unsigned long int、unsigned long long int。程序员可以使用 &lt;stdint.h>; 或 &lt;inttypes.h>; 中的定义指定实际宽度，例如 uint32_t。当用作函数返回类型时，表示该函数没有返回值。定义下标 ([]) 运算符和加法 (+) 运算符，以便 str[i] 与 *(str + i) 相同。因此 str[i] = 10 变为 。如果一元 &amp; 运算符的操作数是 [] 运算符的结果，则结果就像删除 &amp; 运算符并将 [] 运算符更改为 + 运算符一样。例如，&amp;str[10] 与 str + 10 相同。联合类型与结构类似，只是成员对象使用的内存重叠。联合可以同时包含一种类型的对象，并在不同时间包含不同类型的对象，但不能同时包含这两种对象，并且主要用于节省内存。标签不是类型名称，不能用于声明变量。例如，要使用上面的 s 标签来声明变量，必须这样做：联合和枚举的名称也是标签而不是类型。因此，名称不能单独用于声明变量：结构体、联合体和枚举的标记与普通标识符定义在不同的命名空间中，并且不会相互冲突。用 const 限定符声明的对象不可修改：即不可赋值，但可以具有常量初始值设定项 如果 const 指针指向实际上未使用 const 定义的对象，则可以丢弃指针中的 const（倒数第二个）下面的行）：上面列出的对象中的值可能会在编译器不知情的情况下发生更改；例如，即使没有 C 程序的交互，实时时钟的值也会改变。易失性确保每次应该在程序中读取该值时都会实际读取该值（否则编译器可能会优化某些读取）例如，以下代码确保读取端口的值并将其分配回端口（而不是它是一个无操作，因为它是对 self 的赋值）：与 Java 不同，C 中的 volatile 限定类型不应该用于线程之间的同步。编译器将假设通过带有限制限定指针的指针访问的对象不会被其他指针访问，从而允许更多优化。例如：声明整数类型时，除非int是唯一的关键字，否则可以将其删除。例如，long long int 与 long long 相同。使用无符号整数类型时，请记住避免使用 &lt;limits.h>; 库进行环绕（如有必要）。使用补码系统，我们可以表示与正值相比多一个负值。例如，8 位有符号整数可以表示 [-128, 127] 范围内的值。这个结果是一个有趣的边缘情况，其中 abs(-128) 不是相同位宽的表示。浮点通常使用 (a) 符号位、(b) 指数和 (c) 有效数（也称为尾数）来表示。为了避免需要单独编码指数中的负值，应用了偏移量。例如，要对 8 位指数的零值进行编码，我们可以存储值 127。指数 -127（其中每个位都是 0）和 +128（其中每个位都是 1）是为特殊数字保留的。调整尾数，使第一个数字始终为 1，这在编码方案中是隐含的。这样一个使用 1 位符号位、8 位指数位、23 位有效位的浮点数实际上可以表示 24 位精度。使用 1 位作为符号位、11 位作为指数位、52 位作为有效位的 double 可以表示 53 位精度。非常小以至于即使指数的最小值也不足以表示的非零浮点数称为次正规（也称为非正规）浮点数。在这种情况下，指数的所有位都为零，并且有效数的隐含前导一位现在是隐含的。 &lt;a href=&quot;https://hackernews.betacat.io/#reading-log-for- effective-c-an-introduction-to-professional-c-programming&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=36417075&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;给 LLM 一个 &lt;Backspace>; 令牌&lt;/stitle>; &lt;id>;https://arxiv.org/abs/2306.05426&lt;/ id>; &lt;更新>;2023-06-21T22:30:15.697107Z&lt;/更新>; &lt;link href=&quot;https://arxiv.org/abs/2306.05426&quot;/>; &lt;作者>; &lt;名称>;bilsbie&lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=bilsbie&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.arxiv.org/static/浏览/0.3.4/images/arxiv-logo-fb.png&quot; style=&quot;宽度：220px；高度：129px；&quot; />;&lt;br />;自回归模型可以生成高质量的序列，但在生成过程中可能会出现复合误差。为了解决这个问题，我们提出了 SequenceMatch，这是一种模仿学习框架，可以最大限度地减少生成序列和数据集之间的差异。 SequenceMatch 将回溯与退格操作结合起来，以减少复合错误。实证结果表明，SequenceMatch 训练可以改善语言模型的文本生成。 &lt;a href=&quot;https://hackernews.betacat.io/#giving-llms-a-backspace-token&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36425375&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;RLHF 工作原理&lt;/stitle>; &lt;id>;https://www.interconnects.ai/p/how-rlhf-works&lt;/id>; &lt;更新>;2023-06-21T14 :30:15.697576Z&lt;/updated>; &lt;link href=&quot;https://www.interconnects.ai/p/how-rlhf-works&quot;/>; &lt;作者>; &lt;name>;natolambert&lt;/name>; &lt;uri>;https: //news.ycombinator.com/user?id=natolambert&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://substackcdn.com/image/fetch/w_120,c_limit, f_auto，q_auto：好，fl_progressive：陡峭/https％3A％2F％2Fsubstack-post-media.s3.amazonaws.com％2Fpublic％2Fimages％2Ff9be14d6-d7cc-4977-a29b-acee14680d5d_1024x1024.png“风格=“宽度：220px ；高度：220px；&quot; />;&lt;br />;人类反馈强化学习 (RLHF) 在满足两个条件时起作用：1) 需要有一个信号表明普通监督学习不起作用，例如成对偏好数据，以及 2) RLHF 在复杂的情况下表现出色优化需要随时间逐渐变化的景观。 RLHF 不是关于选择正确答案，而是关于偏好建模和减少有害或不正确的陈述。 &lt;a href=&quot;https://hackernews.betacat.io/#how-rlhf-works&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=36418807&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;脚趾袜盒&lt;/stitle>; &lt;id>;https://herman.bearblog.dev/a-case-for-toe-socks/&lt;/id>; &lt;更新>;2023-06- 21T15：30：15.698061Z &lt;/更新>; &lt;link href =“https://herman.bearblog.dev/a-case-for-toe-socks/”/>; &lt;作者>; &lt;名称>;kevincox &lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=kevincox&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://bear-images.sfo2.cdn。 digitaloceanspaces.com/herman-1687338535-0.jpg&quot; style=&quot;宽度：220px；高度：193px；&quot; />;&lt;br />;五趾袜比普通袜子更好，原因有几个。它们可以让您的脚趾展开并自由移动，从而提高平衡性和稳定性。它们还能防止脚趾间出汗和真菌感染，不会滑落，并防止出现水泡。此外，它们还可以作为对话的开始，值得尝试。 &lt;a href=&quot;https://hackernews.betacat.io/#a-case-for-toe-socks&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=36416938&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Go 1.21&lt;/stitle>; &lt;id>;https://go.dev/blog/go1.21rc&lt;/id>; &lt;更新>;2023-06-21T20:30:15.698954Z &lt;/更新>; &lt;link href=&quot;https://go.dev/blog/go1.21rc&quot;/>; &lt;作者>; &lt;名称>;pk2200&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user ?id=pk2200&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Go 1.21 第一个候选版本 (RC) 现已在下载页面提供！ Go 1.21 充满了新功能和改进。 &lt;a href=&quot;https://hackernews.betacat.io/#go-1-21&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=36423622&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;每个程序员都应该了解内存知识 (2007) [pdf]&lt;/stitle>; &lt;id>;https://people.freebsd.org/~lstewart/articles/cpumemory.pdf&lt;/id>; &lt;更新>;2023-06-21T16:30:15.699389Z&lt;/更新>; &lt;link href=&quot;https://people.freebsd.org/~lstewart/articles/cpumemory.pdf&quot;/>; &lt;作者>; &lt;名称>;quackulus&lt; /name>; &lt;uri>;https://news.ycombinator.com/user?id=qackulus&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;随着 CPU 内核变得更快、数量更多，限制因素对于大多数程序来说，现在并将在一段时间内都是内存访问。硬件设计人员提出了更加复杂的内存处理和加速技术（例如 CPU 缓存），但如果没有程序员的帮助，这些技术就无法以最佳方式工作。 &lt;a href=&quot;https://hackernews.betacat.io/#what-every-programmer-should-know-about-memory-2007-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=36420502&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;有些是针对 C [pdf]&lt;/stitle>; &lt;id>;https://www.humprog.org/~stephen/research/papers /kell17some-preprint.pdf&lt;/id>; &lt;更新>;2023-06-21T17:30:15.699829Z&lt;/更新>; &lt;link href=&quot;https://www.humprog.org/~stephen/research/papers/kell17some -preprint.pdf&quot;/>; &lt;作者>; &lt;名称>;craigkerstiens&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=craigkerstiens&lt;/uri>; &lt;/author>; &lt;content type=&quot;html &quot;>;C 语言经常因其不安全、未定义行为和性能动机而受到批评。然而，本文认为这些方面并不是必不可少的，C 的优势在于其通信设计，这使其与托管语言区分开来。 C 语言的持久流行可以归因于它在系统构建中的使用以及它促进系统不同部分之间通信的能力。 &lt;a href=&quot;https://hackernews.betacat.io/#some-were-meant-for-c-pdf&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=36421473&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;云播在落基山干旱中流行&lt;/stitle>; &lt;id>;https://www.hjnews.com/tremonton/cloud-seeding-捕捉-on-amid- rocky-mountain-drought/article_b0e08aac-e2bf-11ed-8583-632389f0bdf3.html&lt;/id>; &lt;更新>;2023-06-21T18:30:15.700317Z&lt;/更新>; &lt;link href=&quot;https://www.hjnews .com/tremonton/cloud-seeding-捕捉-on-amid-rocky-mountain-drought/article_b0e08aac-e2bf-11ed-8583-632389f0bdf3.html&quot;/>; &lt;作者>; &lt;名称>;hhs&lt;/名称>; &lt;uri>;https ://news.ycombinator.com/user?id=hhs&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://bloximages.chicago2.vip.townnews.com/hjnews .com/content/tncms/assets/v3/editorial/f/59/f59bce04-e2bf-11ed-80b1-b38adec226b1/6446b323ed759.image.jpg?resize=750%2C500&quot; style=&quot;width: 220px;高度：147px;&quot; />;&lt;br />;在落基山干旱中播种云&lt;a href=&quot;https://hackernews.betacat.io/#cloud-seeding-having-on-amid-rocky-mountain-drought &quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36421874&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/内容>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;自我和数学[视频]&lt;/stitle>; &lt;id>;https ://www.youtube.com/watch?v=z7GVHB2wiyg&lt;/id>; &lt;更新>;2023-06-21T10:30:15.700788Z&lt;/更新>; &lt;link href=&quot;https://www.youtube.com/ watch?v=z7GVHB2wiyg&quot;/>; &lt;author>; &lt;name>;andersource&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=andersource&lt;/uri>; &lt;/author>; &lt;content type=&quot; html&quot;>;&lt;iframe src=&quot;//www.youtube.com/embed/z7GVHB2wiyg&quot;frameborder=&quot;0&quot;allowfullscreen loading=&quot;lazy&quot;>;&lt;/iframe>; &lt;a href=&quot;https://hackernews.betacat.io /#ego-and-math-video&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=36416490&quot; target=&quot;_blank&quot;>; [评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;