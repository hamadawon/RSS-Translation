<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2024-07-29T16:01:37.150783Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;我的 setf 心理模型是错误的&lt;/stitle>; &lt;id>;https://simonobson.org/2024/07/27/my-mental-model-of-setf-was -错误/&lt;/id>; &lt;更新>;2024-07-29T13:01:25.424097Z&lt;/更新>; &lt;link href=&quot;https://simonobson.org/2024/07/27/my-mental-model-of -setf-was-wrong/&quot;/>; &lt;作者>; &lt;名称>;nemoniac&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=nemoniac&lt;/uri>; &lt;/作者>; &lt;内容类型=&quot;html&quot;>;Setf 是一个使用通用函数来更新位置的宏，而不是用于位置的特殊形式，它的第一个参数是一个返回要更新位置的定位器表达式。 setf 宏合成函数名称符号并使用该名称调用通用函数，将新值和定位器的其余部分作为参数传递，从而允许灵活且结构化的代码更新。 &lt;a href=&quot;https://hackernews.betacat.io/#my-mental-model-of-setf-was-wrong&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41093719&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;可移动树 CRDT 和 Loro 的实现&lt;/stitle>; &lt;id>;https://loro.dev/blog/movable-tree&lt;/id>; &lt;updated>;2024- 07-29T13:01:25.425909Z&lt;/更新>; &lt;link href=&quot;https://loro.dev/blog/movable-tree&quot;/>; &lt;作者>; &lt;名称>;czx111331 &lt;/名称>; &lt;uri>;https:// /news.ycombinator.com/user?id=czx111331&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://loro.dev/_next/static/media/movable-tree -cover.f2c64ff7.png&quot; style=&quot;宽度：220px；高度：126px；&quot; />;&lt;br />;本文讨论了实现可移动树 CRDT（用于管理分布式系统中的层次关系）的挑战，并提出了两种可移动树的创新算法。 Loro作为一款协作应用程序，集成了这些算法，可以实现实时协作和无缝历史版本检查，使其适合各种应用场景。 &lt;a href=&quot;https://hackernews.betacat.io/#movable-tree-crdts-and-loro-s-implementation&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41099901&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Yark：具有离线 UI 的 YouTube 存档器&lt;/stitle>; &lt;id>;https://github.com/Owez/yark&lt;/id>; &lt;更新>;2024-07 -29T15:01:25.426437Z&lt;/updated>; &lt;link href=&quot;https://github.com/Owez/yark&quot;/>; &lt;作者>; &lt;name>;klaussilveira&lt;/name>; &lt;uri>;https://news. ycombinator.com/user?id=klaussilveira&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/Owez/yark/1.2-support/examples/图片/cli_dark.png&quot; style=&quot;宽度：220px 高度：94px；&quot; />;&lt;br />;Yark 是一款帮助您下载视频和元数据、创建具有丰富历史报告和注释功能的离线存档的工具。存档格式简单且基于目录，核心元数据文件和缩略图/视频数据位于单独的目录中。 &lt;a href=&quot;https://hackernews.betacat.io/#yark-youtube-archiver-with-offline-ui&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=41100820&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;启动 HN: Roame (YC S23) – 针对信用卡积分的航班搜索引擎&lt;/stitle>; &lt;id>;https://news.ycombinator.com/item?id =41100094&lt;/id>; &lt;更新>;2024-07-29T13:01:25.426925Z&lt;/更新>; &lt;link href=&quot;https://news.ycombinator.com/item?id=41100094&quot;/>; &lt;作者>; &lt; name>;zman0225&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=zman0225&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Roame 是一个帮助用户的航班搜索引擎使用积分和里程而非现金查找和兑换商务舱航班。该工具通过实时搜索多达 16 个航空公司忠诚度计划并显示结果（包括航班信息、积分成本和兑换说明）来简化流程。 &lt;a href=&quot;https://hackernews.betacat.io/#launch-hn-roame-yc-s23-flight-search-engine-for-your-credit-card-points&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41100094&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml :base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Show HN：Tea-tasting，一个用于 A/B 测试统计分析的 Python 包&lt;/stitle>; &lt;id>;https://e10v.me/tea-tasting-analysis-of-experiments/&lt;/id>; &lt;更新>;2024-07-29T13:01:25.427345Z&lt;/更新>; &lt;link href=&quot;https:// /e10v.me/tea-tasting-analysis-of-experiments/&quot;/>; &lt;作者>; &lt;名称>;e10v_me&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=e10v_me&lt;/uri >; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://e10v.me/tea-tasting-analysis-of-experiments/tea-tasting.png&quot; style=&quot;width: 220px; height : 136 像素;&quot; />;&lt;br />;Tea-tasting是一款统计分析工具，提供了多种分析实验的方法和途径，包括Student&#39;s t-test、Bootstrap、CUPED方差缩减等，并支持多种数据后端。它提供了方便的 API、优化的计算效率和详细的文档，使其成为分析实验和 A/B 测试的有用工具。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-tea-tasting-a-python-package-for-the-statistical-analysis-of-ab-tests&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41099028&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;虚拟阿波罗制导计算机&lt;/stitle>; &lt;id>;https://github.com/virtualagc/ virtualagc&lt;/id>; &lt;更新>;2024-07-29T13:01:25.427756Z&lt;/更新>; &lt;link href=&quot;https://github.com/virtualagc/virtualagc&quot;/>; &lt;作者>; &lt;名称>;Duke_Pixie&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=Duke_Pixie&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com /904b6403362c89b2766f1b308ab659ef47c7713038e123902fbbe453add3bef3/virtualagc/virtualagc&quot; style=&quot;宽度: 220px 高度: 110px;&quot; />;&lt;br />;阿波罗制导计算机（AGC）是阿波罗航天器中使用的复杂计算机系统，用于在月球任务期间导航和控制航天器。 Virtual AGC项目是AGC的开源模拟器，允许用户在现代计算机上运行原始Apollo软件并研究或修改代码。 &lt;a href=&quot;https://hackernews.betacat.io/#virtual-apollo-guidance-computer&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=41094044&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;SVG 妥协三角&lt;/stitle>; &lt;id>;https://me.micahrl.com/blog/svg-triangle-of-compromise/&lt;/id>; &lt;更新>;2024-07 -29T04：01：25.428573Z &lt;/更新>; &lt;link href =“https://me.micahrl.com/blog/svg-triangle-of-compromise/”/>; &lt;作者>; &lt;名称>; mrled &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=mrled&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://me.micahrl.com/images /profile.png&quot; style=&quot;宽度: 220px; 高度: 220px;&quot; />;&lt;br />;本文讨论了使用 SVG 的优点和局限性，包括缓存、样式和悬停效果。它还探索了引用和设计 SVG 样式的替代方法，例如使用 iframe、对象标签和内联嵌入。 &lt;a href=&quot;https://hackernews.betacat.io/#svg-triangle-of-compromise&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=41070709&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;如何构建高度可调试的 C++ 二进制文件&lt;/stitle>; &lt;id>;https://dhashe.com/how-to-build-highly-debuggable-c-binaries.html&lt;/id >; &lt;更新>;2024-07-29T12:01:25.428974Z&lt;/更新>; &lt;link href=&quot;https://dhashe.com/how-to-build-highly-debuggable-c-binaries.html&quot;/>; &lt;作者>; &lt;name>;synergy20&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=synergy20&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;本文提供了有关如何操作的建议配置 C++ 工具链以生成高度可调试的二进制文件，包括使用清理程序、启用标准库的调试模式以及添加帧指针，以改善调试体验。它还涵盖了各种调试技术，例如使用交互式调试、printf 式调试以及使用 Python 自定义调试器... &lt;a href=&quot;https://hackernews.betacat.io/#how-to-build- height-debuggable-c-binaries&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41074703&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;雕刻超级任天堂视频系统&lt; /stitle>; &lt;id>;https://fabiensanglard.net/snes_video/index.html&lt;/id>; &lt;更新>;2024-07-29T06:01:25.429375Z&lt;/更新>; &lt;link href=&quot;https://fabiensanglard .net/snes_video/index.html&quot;/>; &lt;作者>; &lt;名称>;guiambros&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=guiambros&lt;/uri>; &lt;/作者>; &lt;内容类型 =“html”>;&lt;img src =“https://fabiensanglard.net/snes_video/tv.svg”样式 =“宽度：220 像素；高度：134 像素；” />;&lt;br />;作者通过研究1989年现有的技术，包括电视机和CRT，对超级任天堂娱乐系统（SNES）的视频系统进行了探索，设计了满足游戏机要求的视频系统。作者讨论了任天堂工程师做出的设计选择，包括选择每帧 262 行、每行 256 个可见点以及... &lt;a href=&quot;https://hackernews.betacat.io/#雕刻超级任天堂视频系统&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41098141&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;ps aux 写入在 bash 中，无需分叉&lt;/stitle>; &lt;id>;https://github.com/izabera/ps&lt;/id>; &lt;updated>;2024-07-29T02:01:25.429783Z&lt;/updated>; &lt;link href=&quot;https: //github.com/izabera/ps&quot;/>; &lt;author>; &lt;name>;signa11&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=signa11&lt;/uri>; &lt;/author>; &lt;内容类型=“html”>; &lt;img src =“https://opengraph.githubassets.com/9faf6f5ef12d7300bb112b0316e1f33f1298572fd204baa68e8d03e9bcb69173/izabera/ps”样式=“宽度：220px；高度：110px；” />;&lt;br />;如果您通过 ssh 连接到一台机器，您正处于可信赖的 bash shell 中，但不幸的是您无法生成任何新进程，因为实际上所有其他 pid 都已被占用。你做什么工作？如果这就是您所面临的问题，那么这可能就是适合您的工具！现在您可以假装您可以使用可用的 ps aux。 &lt;a href=&quot;https://hackernews.betacat.io/#ps-aux-writing-in-bash-without-forking&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41097241&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;tolower() 与 AVX-512&lt;/stitle>; &lt;id>;https://dotat.at/@/2024-07-28-tolower-avx512.html &lt;/id>; &lt;更新>;2024-07-28T21:01:25.430201Z&lt;/更新>; &lt;link href=&quot;https://dotat.at/@/2024-07-28-tolower-avx512.html&quot;/>; &lt;author>; &lt;name>;fanf2&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=fanf2&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;用户探索使用AVX-512-BW 指令用于快速字符串处理，特别是短字符串，并编写了一个可以一次处理 64 个字节的 tolower() 函数。用户对多个功能进行了基准测试，发现 AVX-512-BW 实现始终接近最快，性能平稳且没有性能低谷。 &lt;a href=&quot;https://hackernews.betacat.io/#tolower-with-avx-512&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=41095790&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;哥伦比亚的未遂事件：为什么我们应该总是期待太空中的意外&lt;/stitle>; &lt;id>;https://www.theregister.com/2024/07/26/space_shuttle_columbia_near_miss/&lt;/ id>; &lt;更新>;2024-07-29T06:01:25.430985Z&lt;/更新>; &lt;link href=&quot;https://www.theregister.com/2024/07/26/space_shuttle_columbia_near_miss/&quot;/>; &lt;作者>; &lt;名称>;LorenDB&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=LorenDB&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://regmedia .co.uk/2024/07/25/sts_93.jpg?x=648&amp;y=511&amp;infer_y=1&quot; style=&quot;宽度：220px 高度：174px；&quot; />;&lt;br />;哥伦比亚号航天飞机于 1999 年发射了钱德拉 X 射线天文台，但由于一些缺陷，包括松动的销钉和磨损的电线，几乎以灾难告终。尽管存在这些问题，任务还是成功了，天文台也部署了，但这一事件凸显了为航天器复杂故障做好准备的重要性。 &lt;a href=&quot;https://hackernews.betacat.io/#columbia-s-near-miss-why-we-should-always-expect-the-unexpected-in-space&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41077753&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml :base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：我构建了一个开源工具来减少 on-call 的糟糕程度&lt;/stitle>; &lt;id >;https://github.com/opslane/opslane&lt;/id>; &lt;更新>;2024-07-28T17:01:25.431390Z&lt;/更新>; &lt;link href=&quot;https://github.com/opslane/opslane&quot; />; &lt;author>; &lt;name>;aray07&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=aray07&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =&quot;https://raw.githubusercontent.com/opslane/opslane/main/assets/opslane-arch.png&quot; style=&quot;宽度：220px；高度：133px；&quot; />;&lt;br />;Opslane 使用 LLM 将警报分类为可操作警报或噪音警报，并提供用于处理 Slack 通道中警报的上下文信息。它还提供分析和报告数据，以帮助团队管理和消除噪音警报，并采用支持多种集成的模块化架构。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-i-built-an-open-source-tool-to-make-on-call-suck-less&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41086620&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;同步多线程的工作原理&lt;/stitle>; &lt;id>;https://blog.codingconfessions .com/p/simultaneous-multithreading&lt;/id>; &lt;更新>;2024-07-28T16:01:25.431788Z&lt;/updated>; &lt;link href=&quot;https://blog.codingconfessions.com/p/simultaneous-multithreading&quot; />; &lt;author>; &lt;name>;rbanffy&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=rbanffy&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =&quot;https://images.unsplash.com/photo-1465447142348-e9952c393450?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wzMDAzMzh8MHwxfHNlYXJjaHw1fHxmb3JrZWQlMjByb2FkfGVufDB8fH x8MTcyMTgxMDM4N3ww&amp;ixlib=rb-4.0.3&amp;q=80&amp;w=1080&quot; style=&quot;宽度：220px 高度：165px； ;” />;&lt;br />;同步多线程（SMT）是一种允许处理器同时处理来自两个不同线程的指令的技术，提高了CPU利用率和资源使用率，但它也存在竞争共享资源等权衡和潜在的安全风险。 SMT 的实现涉及复制某些部分并在 ... &lt;a href=&quot;https://hackernews.betacat.io/#how-simultaneous-multithreading-works-under-the-hood&quot; 目标之间共享或划分其他部分=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41093916&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Pallene：Lua 的静态编译配套语言&lt;/stitle>; &lt;id>; https://github.com/pallene-lang/pallene/blob/master/doc/manual.md&lt;/id>; &lt;更新>;2024-07-29T05:01:25.432188Z&lt;/更新>; &lt;link href=&quot;https ://github.com/pallene-lang/pallene/blob/master/doc/manual.md&quot;/>; &lt;作者>; &lt;名称>;wsc981&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user ?id=wsc981&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/21c464735b584cc022081b60457e06cd882119202dbd1d123ab867b451779d0e/pallene-lang/pallene&quot; style=&quot;width: 220px;高度：110px；” />;&lt;br />;Pallene 是 Lua 的静态类型配套语言，允许类型注释并与 Lua 兼容，具有类型推断、数组、表、函数和记录等功能。该语言具有严格的语法，旨在与 Lua 解释器的特定发布版本一起使用，具有自动强制、隐式转换和 Pallene 等功能。 betacat.io/#pallene-a-statically-compiled-companion-language-for-lua&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item ?id=41097842&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;标题type=&quot;text&quot;>;由从业者主导的法学硕士公开课程&lt;/stitle>; &lt;id>;https://hamel.dev/blog/posts/course/&lt;/id>; &lt;updated>;2024-07-29T15:01 ：25.432575Z&lt;/updated>; &lt;link href=&quot;https://hamel.dev/blog/posts/course/&quot;/>; &lt;作者>; &lt;name>;tosh&lt;/name>; &lt;uri>;https://news.ycombinator .com/user?id=tosh&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://hamel.dev/blog/posts/course/course.png&quot; style=&quot;宽度：220 像素；高度：124 像素；” />;&lt;br />;Mastering LLM 是一个由行业资深人士讲授的研讨会和讲座系列，主题包括评估、检索增强生成和微调等，专为具有一些 LLM 经验的技术 IC 设计。该课程提供了法学硕士的全面概述，包括现实生活经验、技巧和技术挑战，以及活跃的 Discord 社区和慷慨的计算学分。 &lt;a href=&quot;https://hackernews.betacat.io/#an-open-course-on-llms-led-by-practitioners&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=41100951&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;OCaml 中的高级有界多态性 (2021)&lt;/stitle>; &lt;id>;https://okmij.org/ftp/ML/higher-kind- poly.html&lt;/id>; &lt;更新>;2024-07-28T22:01:25.432968Z&lt;/更新>; &lt;link href=&quot;https://okmij.org/ftp/ML/higher-kind-poly.html&quot;/ >; &lt;author>; &lt;name>;tinyspacewizard&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=tinyspacewizard&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;更高级的多态性OCaml 不直接支持对类型和类型构造函数进行抽象，但可以通过各种变通方法来实现，例如使用函子、初始代数或存在类型对类型构造函数进行抽象。这些解决方法可用于实现更高种类的多态函数，例如折叠和求和，可应用于... &lt;a href=&quot;https://hackernews.betacat.io/#higher-kinded-bounded-polymorphism -in-ocaml-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41096187&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;SD卡磨损均衡和转换层（2014 ）&lt;/stitle>; &lt;id>;https://msreekan.com/2014/01/15/sdcard/&lt;/id>; &lt;更新>;2024-07-28T20:01:25.433758Z&lt;/更新>; &lt;link href=&quot; https://msreekan.com/2014/01/15/sdcard/&quot;/>; &lt;作者>; &lt;名称>;goodburb&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=goodburb&lt;/ uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://msreekan.com/wp-content/uploads/2014/01/sdcard.png?w=650&quot; style=&quot;width: 220 像素；高度：165 像素；” />;&lt;br />;SD 卡使用闪存，通过转换层抽象复杂性，将虚拟地址映射到物理地址，并管理磨损均衡和垃圾收集。该卡的固件针对 SPI 和 SD 总线模式实现了不同的软件堆栈，并通过启动代码检查引脚 1 来识别接口并跳转到相应的软件堆栈。 &lt;a href=&quot;https://hackernews.betacat.io/#sdcard-wear-leveling-and-translation-layers-2014&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41095429&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;行星毁灭技术：ChronoCam (2013)&lt;/stitle>; &lt;id>;https://www.forrestthewoods.com/blog/tech_of_planetary_annihilation_chrono_cam/&lt;/id>; &lt;更新>;2024-07-29T02:01:25.434147Z&lt;/更新>; &lt;link href=&quot;https://www.forrestthewoods.com/blog/tech_of_planetary_annihilation_chrono_cam/&quot;/>; &lt;作者>; &lt;名称>;resatori&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=resatori&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.forrestthewoods.com/blog /tech_of_planetary_annihilation_chrono_cam/assets/img/header.jpeg&quot; style=&quot;宽度：220px 高度：165px；&quot; />;&lt;br />;Planetary Annihilation 是一款实时策略游戏，它使用客户端-服务器架构和新颖的曲线系统来启用 ChronoCam 等功能，让玩家能够及时跳回并从任意点重玩游戏。曲线系统将游戏对象数据存储为时间线，从而实现高效的数据传输和压缩，并允许可变播放速率、搜索等功能...... &lt;a href=&quot;https://hackernews.betacat.io/#the- tech-of-planetary-annihilation-chronocam-2013&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41097228&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN:使用 Three.js 制作的足球/足球传球可视化工具&lt;/stitle>; &lt;id>;https://statsbomb-3d-viz.vercel.app/&lt;/id>; &lt;updated>;2024-07-28T21:01:25.434565Z&lt; /updated>; &lt;link href=&quot;https://statsbomb-3d-viz.vercel.app/&quot;/>; &lt;作者>; &lt;name>;carlos-menezes&lt;/name>; &lt;uri>;https://news.ycombinator.com /user?id=carlos-menezes&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;将原始 URL 从其存储库粘贴到 StatsBomb 事件数据文件。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-a-football-soccer-pass-visualizer-made-with- Three-js&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=41095839&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;LeanDojo：使用法学硕士进行精益定理证明&lt;/stitle>; &lt;id>;https://leandojo.org/&lt;/id>; &lt;更新>;2024-07-28T23:01:25.434959Z&lt;/更新>; &lt;link href=&quot;https://leandojo.org/&quot;/>; &lt;作者>; &lt;名称>;aseg&lt;/名称>; &lt;uri>;https:// /news.ycombinator.com/user?id=aseg&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://leandojo.org/images/LeanDojo.jpg&quot; style=&quot;宽度：220 像素；高度：115 像素；” />;&lt;br />;LeanDojo 从 GitHub 存储库中提取数据，包括文件依赖项、AST、证明状态和前提，为前提选择提供有价值的信息。它使用具有挑战性的数据分割来防止高估，要求模型泛化到训练期间未见过的新前提。 &lt;a href=&quot;https://hackernews.betacat.io/#leandojo-theorem-proving-in-lean-using-llms&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=41096486&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;如何调试电池设计&lt;/stitle>; &lt;id>;https://github.com/ionworks/how-to-debug-your-battery&lt;/id >; &lt;更新>;2024-07-28T16:01:25.435357Z&lt;/更新>; &lt;link href=&quot;https://github.com/ionworks/how-to-debug-your-battery&quot;/>; &lt;作者>; &lt;名称>;tomtranter&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=tomtranter&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw .githubusercontent.com/ionworks/how-to-debug-your-battery/main/figures/spider.png&quot; style=&quot;width: 220px; height: 208px;&quot; />;&lt;br />;作为一家电动汽车公司的工程师，我的任务是设计一款能够提供 400 英里续航里程而不会过热的电池，同时还要考虑安全性、使用寿命、重量和成本等因素。为了调试问题，我可以使用 PyBaMM 等仿真工具对不同电池设计的行为进行建模，并优化阳极成分和颗粒尺寸等参数，以... &lt;a href=&quot;https://hackernews.betacat.io/#how -to-debug-your-battery-design&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41090658&quot; target=&quot;_blank&quot; >;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;奇怪而美妙DNS LOC 记录的世界&lt;/stitle>; &lt;id>;https://blog.cloudflare.com/the-weird-and-wonderful-world-of-dns-loc-records&lt;/id>; &lt;更新>;2024-07- 29T12:01:25.435753Z&lt;/updated>; &lt;link href=&quot;https://blog.cloudflare.com/the-weird-and-wonderful-world-of-dns-loc-records&quot;/>; &lt;作者>; &lt;名称>;avipars&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=avipars&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://blog .cloudflare.com/content/images/480px-Trinity_Site_Obelisk_National_Historic_Landmark.jpg&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;CloudFlare 的 RRDNS 权威 DNS 服务器缺少用于指定物理位置的 LOC 记录的解析器，直到开发人员编写了解析器并修复了该问题。RFC 1876 中描述了 LOC 记录格式并具有二进制格式，可解析并转换为固定大小的二进制格式，值范围从 1 厘米到大于木星的直径。 -weird-and-wonderful-world-of-dns-loc-records&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41099567 &quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text &quot;>;重新审视非理性饥饿法官效应（2023）&lt;/stitle>; &lt;id>;https://www.cambridge.org/core/journals/judgment-and-decision-making/article/irrational-hungry-judge-effect-重新访问模拟揭示效果的幅度被高估/61CE825D4DC137675BB9CAD04571AE58&lt;/id>; &lt;更新>;2024-07-28T16:01:25.436148Z&lt;/更新>; &lt;link href=&quot;https ://www.cambridge.org/core/journals/judgment-and-decision-making/article/irrational-hungry-judge-effect-revisited-simulations-reveal-that-the-magnitude-of-the-effect-is -overestimated/61CE825D4DC137675BB9CAD04571AE58&quot;/>; &lt;作者>; &lt;名称>;fzliu &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=fzliu&lt;/uri>; &lt;/author>; &lt;content type=&quot;html &quot;>;&lt;img src=&quot;https://static.cambridge.org/covers/JDM_0_0_0/judgment-and-decision-making.jpg&quot; style=&quot;宽度：220px; height: 311px;&quot; />;&lt;br />;文章重新审视了“非理性饥饿法官效应”，即法官在比赛结束时的决定变得不那么有利，并发现合理的时间管理解释可以解释大部分分析表明，最初的发现可能被高估了，需要进一步的研究来理清序列顺序、心理……的影响。&lt;a href=&quot;https://hackernews.betacat.io/#the- irrational-hungry-judge-effect-revisited-2023&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41091803&quot; target=&quot;_blank &quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN:我制作了一个工具，可以在答案发生变化时接收警报&lt;/stitle>; &lt;id>;https://www.alertfor.com/&lt;/id>; &lt;updated>;2024-07-28T16:01:25.436922Z&lt;/updated>; &lt;link href=&quot;https://www.alertfor.com/&quot;/>; &lt;作者>; &lt;名称>;saran945&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=saran945&lt;/uri>; &lt; /author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.thee.ai/static/images/web/rocket-laptop.svg&quot; style=&quot;width: 220px; height: 260px;&quot; />;&lt;br />;Alertfor 使用 AQTA 跟踪用户问题的答案，提供不断变化的信息的持续更新。该过程可以提供准确、及时的答案，无需手动检查。&lt;a href=&quot;https ://hackernews.betacat.io/#show-hn-i-made-a-tool-to-receive-alerts-when-answers-change&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=41093161&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：CeLLama – 具有本地 LLM 的单细胞注释&lt;/stitle>; &lt;id>;https://github.com/CelVoxes/ceLLama&lt;/ id>; &lt;更新>;2024-07-28T16:01:25.437325Z&lt;/更新>; &lt;link href=&quot;https://github.com/CelVoxes/ceLLama&quot;/>; &lt;作者>; &lt;名称>;celltalk&lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=celltalk&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/CelVoxes/ ceLLama/main/ceLLama_files/cellama.png&quot; style=&quot;width: 220px; height: 220px;&quot; />;&lt;br />;该脚本使用 Seurat 和 ceLLama 库来分析 10X PBMC 数据集，执行质量控制、标准化和聚类，然后使用 ceLLama 对聚类进行注释。该脚本还生成报告并可视化使用 DimPlot 和 theme_void() 的结果 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-cellama-single-cell-annotation-with-local-llms&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=41092862&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/饲料>;