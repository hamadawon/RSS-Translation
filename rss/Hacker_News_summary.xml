<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2024-01-16T18:06:28.442475Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;TinyML：超低功耗机器学习&lt;/stitle>; &lt;id>;https://www.ikkaro.net/what-tinyml-is/&lt;/id>; &lt;更新>;2024 -01-16T16:05:10.651752Z&lt;/更新>; &lt;link href=&quot;https://www.ikkaro.net/what-tinyml-is/&quot;/>; &lt;作者>; &lt;名称>;Gedxx&lt;/名称>; &lt;uri >;https://news.ycombinator.com/user?id=Gedxx&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.ikkaro.net/wp-content /uploads/2019/06/logo-ikkaro-grey.svg&quot; style=&quot;宽度：220px；高度：184px；&quot; />;&lt;br />;TinyML，即Tiny Machine Learning，是指在资源有限、功耗低的微控制器中使用机器学习。它涉及压缩大型模型以供微控制器使用。它在物联网、工业、无障碍等各个领域都有应用。 &lt;a href=&quot;https://hackernews.betacat.io/#tinyml-ultra-low-power-machine-learning&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=39014866&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;人工智能对知识工作者生产力和质量的现场实验证据&lt;/stitle>; &lt;id>;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4573321 &lt;/id>; &lt;更新>;2024-01-16T17:05:10.653835Z&lt;/更新>; &lt;link href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4573321&quot;/>; &lt;作者>; &lt;name>;CharlesW&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=CharlesW&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https: //papers.ssrn.com/Organizations/OrgBrandings/304078_15864.gif&quot; style=&quot;width: 220px; height: 127px;&quot; />;&lt;br />;该研究探讨了人工智能对现实、复杂和知识密集型任务的性能影响。使用人工智能的顾问的工作效率显着提高，并产生了更高质量的结果。然而，对于人工智能能力之外的任务，使用人工智能的顾问不太可能提供正确的解决方案。 &lt;a href=&quot;https://hackernews.betacat.io/#field-experimental-evidence-of-ai-on-knowledge-worker-productivity-and-quality&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=39014521&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Speedbump – 用于模拟可变网络延迟的 TCP 代理&lt;/stitle>; &lt;id>;https://github.com/kffl/ speedbump&lt;/id>; &lt;更新>;2024-01-16T13:05:10.654892Z&lt;/更新>; &lt;link href=&quot;https://github.com/kffl/speedbump&quot;/>; &lt;作者>; &lt;名称>;sph&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=sph&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com /b47186da4819e3a6bca8b3b381f88c3403828d2e7254f31b1e26bbbe4d2889f5/kffl/speedbump&quot; style=&quot;宽度：220px；高度：110px；&quot; />;&lt;br />;用于模拟可变且可预测的网络延迟的 TCP 代理 :globe_with_meridians::hourglass_flowing_sand: - GitHub - kffl/speedbump：用于模拟可变且可预测的网络延迟的 TCP 代理 :globe_with_meridians::hourglass_flowing_sand: &lt;a href=&quot; https://hackernews.betacat.io/#speedbump-a-tcp-proxy-to-simulate-variable-network-latency&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// /news.ycombinator.com/item?id=39012697&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io /feed.xml&quot;>; &lt;title type=&quot;text&quot;>;欺诈理论&lt;/stitle>; &lt;id>;https://www.thediff.co/archive/a-theory-of-grift/&lt;/id>; &lt;更新>;2024-01-16T16:05:10.655412Z&lt;/更新>; &lt;link href=&quot;https://www.thediff.co/archive/a-theory-of-grift/&quot;/>; &lt;作者>; &lt;名称>;停泊处&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=mooreds&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www. thediff.co/content/images/2022/12/non-covid-19-headshot.PNG&quot; style=&quot;宽度：220px；高度：255px；&quot; />;&lt;br />;由于供需因素的共同作用，世界上的骗子越来越多。使人们成为好骗子的特征过去有合法的应用，但现在有更多的机会利用人们。然而，这种情况并不稳定。 &lt;a href=&quot;https://hackernews.betacat.io/#a-theory-of-grift&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=39014737&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;通过 WebAssembly 在浏览器中使用 ZBar 条形码扫描套件&lt;/stitle>; &lt;id>;https://barkeywolf.consulting/posts/barcode-scanner-web assembly/#meet-zbar&lt;/id >; &lt;更新>;2024-01-16T14:05:10.655902Z&lt;/更新>; &lt;link href=&quot;https://barkeywolf.consulting/posts/barcode-scanner-web assembly/#meet-zbar&quot;/>; &lt;作者>; &lt;名称>;akbarnama&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=akbarnama&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// barkeywolf.consulting/posts/barcode-scanner-web assembly/images/screenshot.jpg&quot; style=&quot;宽度：220px；高度：146px；&quot; />;&lt;br />;我想为一个涉及库存管理的研究项目制作一个跨平台条形码扫描仪。在查看了几个 Javascript 库后，我发现了 ZBar，一个广泛用于条形码扫描的 C 库。我决定将 ZBar 编译为 WebAssembly，最终得到了一个漂亮的浏览器内条形码扫描仪。 &lt;a href=&quot;https://hackernews.betacat.io/#using-the-zbar-barcode-scanning-suite-in-the-browser-with-web assembly&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a >; &lt;a href=&quot;https://news.ycombinator.com/item?id=39013229&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot; https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;疯狂科学家俱乐部（书籍系列）&lt;/stitle>; &lt;id>;http://www.madscientistsclub.com/books。 html&lt;/id>; &lt;更新>;2024-01-16T16:05:10.657373Z&lt;/更新>; &lt;link href=&quot;http://www.madscientistsclub.com/books.html&quot;/>; &lt;作者>; &lt;名称>;JKCalhoun &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=JKCalhoun&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;http://www.madscientistsclub .com/egg.jpg&quot; style=&quot;宽度：220px；高度：111px；&quot; />;&lt;br />;《疯狂科学家俱乐部》是我父亲写的系列丛书，由十二个故事和两篇短篇小说组成。前七个故事收录在 1965 年出版的《疯狂科学家俱乐部》一书中，而后四个故事则是为 1968 年出版的《疯狂科学家俱乐部新历险记》而写。该系列讲述了疯狂科学家俱乐部的冒险故事在猛犸瀑布。 &lt;a href=&quot;https://hackernews.betacat.io/#the-mad-scientist-s-club-book-series&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=39014426&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Google 变得更糟了吗？搜索中 SEO 垃圾邮件的纵向调查 [pdf]&lt;/stitle>; &lt;id>;https://downloads.webis.de/publications/papers/bevendorff_2024a.pdf&lt;/id>; &lt;updated>;2024-01-16T17:05： 10.657848Z&lt;/updated>; &lt;link href=&quot;https://downloads.webis.de/publications/papers/bevendorff_2024a.pdf&quot;/>; &lt;作者>; &lt;name>;DanielleMolloy&lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=DanielleMolloy&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;网络搜索引擎正面临低质量内容和搜索引擎优化 (SEO) 垃圾邮件的问题，这正在影响搜索结果的质量。本文通过分析产品评论页面的 SEO 特性以及 SEO 和搜索引擎之间持续的竞争，调查了 Google 的恶化程度。研究发现，&lt;a href=&quot;https://hackernews.betacat.io/#is-google-getting-worse-a-longitudinal-investigation-of-seo-spam-in-search-pdf&quot; target=&quot; _blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39013497&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/ Entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Postgres 的 BSON 扩展&lt;/stitle>; &lt;id>;https:// github.com/buzzm/postgresbson&lt;/id>; &lt;更新>;2024-01-16T13:05:10.658373Z&lt;/更新>; &lt;link href=&quot;https://github.com/buzzm/postgresbson&quot;/>; &lt;作者>; &lt;name>;buzzm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=buzzm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https:// /opengraph.githubassets.com/51403dca9625a5d7e9ffe0a0fb8a3b77609af60863352db26ce35f09b906c473/buzzm/postgresbson&quot; style=&quot;宽度：220px；高度：110px；&quot; />;&lt;br />;buzzm/postgresbson 此提交不属于此存储库上的任何分支，并且可能属于存储库外部的分支。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-bson-extension-for-postgres&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=39000905&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Std：Clamp 生成的装配效率低于 std:min(max,std:max(min,v))&lt;/stitle>; &lt;id>;https://1f6042.blogspot .com/2024/01/stdclamp-still-generates-less-efficient.html&lt;/id>; &lt;更新>;2024-01-16T11:05:10.658856Z&lt;/更新>; &lt;link href=&quot;https://1f6042. blogspot.com/2024/01/stdclamp-still-generates-less-efficient.html&quot;/>; &lt;author>; &lt;name>;x1f604&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id= x1f604&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;std::clamp 生成的程序集效率仍然低于 std::min(max, std::max(min, v)) 即使在最新版本的GCC (13.2) 和 Clang (17.0.1)。 &lt;a href=&quot;https://hackernews.betacat.io/#std-clamp-generates-less-efficient-assemble-than-std-min-max-std-max-min-v&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39011850&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Ruby (3.3) on Rails (1.0)&lt;/stitle>; &lt;id>;https://nashby .github.io/2024/01/15/ruby-3-on-rails-1/&lt;/id>; &lt;更新>;2024-01-16T12:05:10.659367Z&lt;/更新>; &lt;link href=&quot;https:// /nashby.github.io/2024/01/15/ruby-3-on-rails-1/&quot;/>; &lt;作者>; &lt;名称>;thunderbong&lt;/名称>; &lt;uri>;https://news.ycombinator.com/ user?id=thunderbong&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://github-product-user-asset-6210df.s3.amazonaws.com/200500/296873934- 1b81569a-5265-4e37-8d33-596c1c130f4b.png?X-Amz-算法=AWS4-HMAC-SHA256&amp;X-Amz-凭证=AKIAVCODYLSA53PQK4ZA%2F20240116%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-日期=20240116T155003Z&amp;X-Amz- Expires=300&amp;X-Amz-Signature=3f16a1bc2dd227b49166ce5318bb0a6847c3435b018a53caec27b3338c2af825&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=358621496&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;Rails 8.0 最近在 Github 上进行了分支，作者想看看是否可以在最新的 Ruby 版本上运行 Rails 1.0。他们对代码库进行了一些修改以更新语法并替换已弃用的方法，最终让应用程序生成并显示欢迎屏幕。 &lt;a href=&quot;https://hackernews.betacat.io/#ruby-3-3-on-rails-1-0&quot; target= &quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39012235&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt; /entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;大纲：自托管、实时、Markdown 兼容知识库&lt;/stitle>; &lt;id >;https://github.com/outline/outline&lt;/id>; &lt;更新>;2024-01-16T12:05:10.660345Z&lt;/更新>; &lt;link href=&quot;https://github.com/outline/outline&quot; />; &lt;作者>; &lt;名称>;msk-lywenn&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=msk-lywenn&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot; >;&lt;img src=&quot;https://opengraph.githubassets.com/2dfa04f375b6ed662a4b47ab5bb32d60899a85a323e11510bf02703bf7b1a82f/outline/outline&quot; style=&quot;width: 220px; height: 110px;&quot; />;&lt;br />;成长型团队最快的知识库。美观、实时协作、功能丰富且兼容 Markdown。- GitHub - outline/outline: 成长型团队最快的知识库。美观、实时协作、功能丰富且兼容 Markdown。&lt;a href=&quot;https://hackernews.betacat.io/#outline-self-hostable-realtime-markdown-company-knowledge-base&quot; target=&quot;_blank&quot;>;[summary]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39012054&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Unity3D 中的 PID 控制器&lt;/stitle>; &lt;id>;https://vazgriz.com/621/pid-controllers/ &lt;/id>; &lt;更新>;2024-01-16T11:05:10.660829Z&lt;/更新>; &lt;link href=&quot;https://vazgriz.com/621/pid-controllers/&quot;/>; &lt;作者>; &lt;名称>;signa11 &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=signa11&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://vazgriz.com /wp-content/uploads/2021/12/pid_controller1.png&quot; style=&quot;width: 220px; height: 124px;&quot; />;&lt;br />;PID控制器是一种用于自动化的控制回路。它可以通过配置控制器的输出来处理不断变化的目标值和不断变化的外部条件。&lt;a href=&quot;https://hackernews .betacat.io/#pid-controllers-in-unity3d&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39011630&quot; target= &quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;打开-CISA已知可利用漏洞的源检测器&lt;/stitle>; &lt;id>;https://github.com/Ostorlab/KEV&lt;/id>; &lt;updated>;2024-01-16T08:05:10.661310Z&lt;/updated>; &lt;link href =&quot;https://github.com/Ostorlab/KEV&quot;/>; &lt;作者>; &lt;名称>;alaeddine001&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=alaeddine001&lt;/uri>; &lt; /author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/85c22916c30ea4c4f9032d9675d2cd931d9faff0d2ac4d386f18b685f039a268/Ostorlab/KEV&quot; style=&quot;width: 220px; height: 110px;&quot; />;&lt;br />;Ostorlab KEV：检测最远程已知可利用漏洞的一个命令。源自 CISA KEV、Google 的 Tsunami、Ostorlab 的 Asteroid 和 Bug 赏金计划。 - GitHub - Ostorlab/KEV：Ostorlab KEV：一个命令即可检测最远程已知的可利用漏洞。源自 CISA KEV、Google 的 Tsunami、Ostorlab 的 Asteroid 和 Bug Bounty 计划。&lt;a href=&quot;https://hackernews.betacat.io/#open-source- detector-of- cisa-s-known-exploitable-vulnerability&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39010454&quot; target=&quot;_blank&quot;>; [comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;NetBSD/amd64 访客现在可以在 18 毫秒内启动&lt;/stitle>; &lt;id>;https://old.reddit.com/r/BSD/comments/197vfmq/a_netbsdamd64_guest_can_now_boot_in_40ms_details/&lt;/id>; &lt;更新>;2024-01-16T17:05:10.661793Z&lt; /updated>; &lt;link href=&quot;https://old.reddit.com/r/BSD/comments/197vfmq/a_netbsdamd64_guest_can_now_boot_in_40ms_details/&quot;/>; &lt;author>; &lt;name>;bleusink &lt;/name>; &lt;uri>;https://news .ycombinator.com/user?id=bleusink&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://preview.redd.it/fva671v8qqcc1.png?width=715&amp;auto=webp&amp;s =7c8e0e903eb9d8b32f3aa9bcd169de9121893652”样式=“宽度：220px; height: 233px;&quot; />;&lt;br />;NetBSD/amd64 现在可以在 PVH 模式下启动，使用 qemu 的 -kernel 标志或支持 PVH 的 AWS Firecracker 版本直接进入内核。NetBSD 还支持内存映射支持的设备，例如 ld( 4) 或 vioif(4)。&lt;a href=&quot;https://hackernews.betacat.io/#a-netbsd-amd64-guest-can-now-boot-in-18ms&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39015036&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml :base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Lichee Console 4A – RISC-V 迷你笔记本电脑：回顾、基准测试和早期问题&lt;/stitle>; &lt;id>; https://3.14.by/en/read/RISC-V-Sipeed-Lichee-Console-4A-Alibaba-T-Head-TH1520-review&lt;/id>; &lt;更新>;2024-01-16T06:05:10.662295Z &lt;/更新>; &lt;link href=&quot;https://3.14.by/en/read/RISC-V-Sipeed-Lichee-Console-4A-Alibaba-T-Head-TH1520-review&quot;/>; &lt;作者>; &lt;姓名>;BarsMonster&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=BarsMonster&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://s .14.by/lv0.jpg&quot; style=&quot;宽度: 220px;高度：156px;&quot; />;&lt;br />;Lichee Console 4A 是一款微型 RISC-V 迷你笔记本电脑，具有坚固的结构和高品质的键盘。它运行在四核 RISC-V SoC 上，最大配置为 16GB RAM 和 128GB eMMC。电池续航时间约为 2.5 小时，有一些软件问题需要改进。&lt;a href=&quot;https://hackernews.betacat.io/#lichee-console-4a-risc-v-mini- laptop-review-benchmarks-and-early-issues&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39009745&quot; target=&quot;_blank &quot;>;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Filecoin 基金会成功在太空中部署 IPFS&lt;/stitle>; &lt;id>;https://fil.org/blog/filecoin-foundation-successively-deploys-interplanetary-file-system-ipfs-in-space/&lt;/id>; &lt;updated>;2024- 01-16T15:05:10.662797Z&lt;/更新>; &lt;link href=&quot;https://fil.org/blog/filecoin-foundation-successively-deploys-interplanetary-file-system-ipfs-in-space/&quot;/>; &lt;作者>; &lt;名称>;diggan&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=diggan&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot; https://fil.org/assets/images/multi-persons.png&quot; style=&quot;width: 220px; height: 204px;&quot; />;&lt;br />;Filecoin 基金会成功在太空部署了星际文件系统 (IPFS)，展示了 IPFS 如何改善长距离通信并在充满挑战的环境中提供弹性。该任务包括将文件从地球发送到轨道并返回使用专为太空通信设计的 IPFS 协议的实现。 &lt;a href=&quot;https://hackernews.betacat.io/#filecoin-foundation-successively-deploys-ipfs-in-space&quot; target=&quot;_blank&quot;>; [摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39013412&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;条目 xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;无密码：另一种地狱？&lt;/stitle>; &lt;id>;https://jcarlosroldan。 com/post/315/passwordless-a- Different-kind-of-hell&lt;/id>; &lt;更新>;2024-01-16T14:05:10.663286Z&lt;/更新>; &lt;link href=&quot;https://jcarlosroldan.com /post/315/passwordless-a- Different-kind-of-hell&quot;/>; &lt;author>; &lt;name>;juancroldan&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=juancroldan&lt;/ uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://jcarlosroldan.com/static/172.png&quot; style=&quot;width: 220px; height: 126px;&quot; />;&lt;br />;对服务进行身份验证变得更加安全，但却以牺牲用户体验为代价。本文探讨了身份验证方法的演变，从古老的密码到现代的复杂性，并对它们的用户体验和安全性进行了评级&lt;a href=&quot;https://hackernews.betacat.io/#passwordless-a- Different-kind-of-hell&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https: //news.ycombinator.com/item?id=39013036&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat. io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;威尼斯特勤局&lt;/stitle>; &lt;id>;https://www.thomas-huehn.com/2024/01/venices-secret-service/&lt;/id >; &lt;更新>;2024-01-16T03:05:10.663761Z&lt;/更新>; &lt;link href=&quot;https://www.thomas-huehn.com/2024/01/venices-secret-service/&quot;/>; &lt;作者>; &lt;name>;Tomte&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=Tomte&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;Ioanna Iordanou 揭示威尼斯特勤局有组织的智慧存在于文艺复兴时期的威尼斯，而不仅仅是现代国家的发明。国家安全机构十人委员会在威尼斯的特勤部门中发挥着至关重要的作用，利用管理实践和保密措施来管理这座城市并塑造内部政治。 &lt;a href=&quot;https://hackernews.betacat.io/#venice-s-secret-service&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=38998055&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;探索对象文件格式&lt;/stitle>; &lt;id>;https://maskray.me/blog/2024-01-14-exploring-object-file-formats&lt;/id>; &lt;updated>; 2024-01-16T09:05:10.664228Z&lt;/updated>; &lt;link href=&quot;https://maskray.me/blog/2024-01-14-exploring-object-file-formats&quot;/>; &lt;作者>; &lt;名称>;ingve&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ingve&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;我的 LLVM 项目之旅从深刻的开始深入了解 lld 和二进制实用程序的世界。我们花费了无数的时间来解开目标文件格式的复杂性并塑造 LLVM 的相关组件。 &lt;a href=&quot;https://hackernews.betacat.io/#exploring-object-file-formats&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=38998914&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;Niklaus Wirth，或简单的重要性&lt;/stitle>; &lt;id>;https://cacm.acm.org/blogs/blog-cacm/279178-niklaus-wirth-or-the -importance-of-being-simple/fulltext&lt;/id>; &lt;更新>;2024-01-15T19:05:10.664699Z&lt;/更新>; &lt;link href=&quot;https://cacm.acm.org/blogs/blog- cacm/279178-niklaus-wirth-or-the-importance-of-being-simple/fulltext&quot;/>; &lt;作者>; &lt;名称>;madmax108&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user? id=madmax108&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cacm.acm.org/system/assets/0002/4144/062916_Bertrand-Meyer-250.large。 jpg?1476779509&amp;1467203315&quot; style=&quot;宽度: 220px; 高度: 220px;&quot; />;&lt;br />;著名计算机科学家 Niklaus Wirth 意外去世。作者回顾了他与沃斯的个人关系以及他对计算机科学领域的影响。 &lt;a href=&quot;https://hackernews.betacat.io/#niklaus-wirth-or-the-importance-of-being-simple&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=39004526&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;大部分网络都是机器翻译的：多路并行的见解&lt;/stitle>; &lt;id>;https://arxiv.org/abs/2401.05749&lt; /id>; &lt;更新>;2024-01-16T05:05:10.666187Z&lt;/更新>; &lt;link href=&quot;https://arxiv.org/abs/2401.05749&quot;/>; &lt;作者>; &lt;名称>;yorwba&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=yorwba&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://arxiv.org/static/browse /0.3.4/images/arxiv-logo-fb.png&quot; style=&quot;宽度：220px；高度：129px；&quot; />;&lt;br />;网络上的内容通常被翻译成多种语言，这些翻译的质量较低，表明它们是使用机器翻译 (MT) 创建的。机器生成的内容在低资源语言的翻译中占主导地位，并构成这些语言的网络内容的很大一部分。 &lt;a href=&quot;https://hackernews.betacat.io/#much-of-the-web-is-machine-translated-insights-from-multi-way-parallelism&quot; target=&quot;_blank&quot;>;[摘要]&lt; /a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38989832&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base =&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Indiebackers – 支持独立项目并获得奖励&lt;/stitle>; &lt;id>;https://indiebackers.dev /&lt;/id>; &lt;更新>;2024-01-16T09:05:10.666676Z&lt;/更新>; &lt;link href=&quot;https://indiebackers.dev/&quot;/>; &lt;作者>; &lt;名称>;fruktmix&lt;/名称>; &lt; uri>;https://news.ycombinator.com/user?id=fruktmix&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://raw.githubusercontent.com/socketop/ icon/master/icon.png&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;探索独立支持者社区中的最新想法，并发现您渴望看到成为现实的项目。创建安全、自毁的链接，确保您的数据保持私密性，并在 12 小时内自动过期。一款无废话的应用程序，可帮助您跟踪锻炼进度，主要关注家庭锻炼&lt;a href=&quot;https://hackernews.betacat.io/#show-hn-indiebackers-back-indie-projects-and-earn -奖励&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39010838&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>; &lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;86-DOS 重温&lt;/stitle>; &lt;id>;http ://www.os2museum.com/wp/86-dos-revisited/&lt;/id>; &lt;更新>;2024-01-16T07:05:10.667145Z&lt;/更新>; &lt;link href=&quot;http://www.os2museum .com/wp/86-dos-revisited/&quot;/>; &lt;author>; &lt;name>;ingve&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=ingve&lt;/uri>; &lt;/author >; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;http://www.os2museum.com/wp/wp-content/uploads/2024/01/86-DOS_v0.34_221_-_81-02-20-640x640。 jpg&quot; 样式=&quot;宽度：220 像素；高度：220 像素；&quot; />;&lt;br />;西雅图计算机产品 86-DOS 的几个非常旧版本的磁盘映像意外出现，包括以前未见过的 86-DOS 版本 0.11 和 0.34。 0.34 磁盘上有一个手写标签，日期为 81/02/20，表明磁盘上的 86-DOS 文件不晚于 1981 年 2 月下旬。 &lt;a href=&quot;https://hackernews.betacat.io/ #86-dos-revisited&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=39010257&quot; target=&quot;_blank&quot;>;[评论] &lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;优化代码时，进行测量&lt;/stitle >; &lt;id>;https://www.solipsys.co.uk/new/WhenOptimisingCodeMeasure.html?xa15hn&lt;/id>; &lt;更新>;2024-01-16T08:05:10.667599Z&lt;/更新>; &lt;link href=&quot;https ://www.solipsys.co.uk/new/WhenOptimisingCodeMeasure.html?xa15hn&quot;/>; &lt;作者>; &lt;名称>;ColinWright&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=ColinWright &lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://www.solipsys.co.uk/images/Mastodon_Mascot.png&quot; style=&quot;宽度：220px；高度：241px； ” />;&lt;br />;本文讨论了使用因式分解的 Fermat 平方差法来优化代码。它提出了对初始实施的几项改进，并强调了衡量这些优化影响的重要性。 &lt;a href=&quot;https://hackernews.betacat.io/#when-optimising-code-measure&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=38999837&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;/feed>;