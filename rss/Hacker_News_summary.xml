<feed xmlns="http://www.w3.org/2005/Atom"><title type="text">黑客新闻摘要&lt;/stitle>; &lt;id>;https://hackernews.betacat.io/feed.xml&lt;/id>; &lt;updated>;2023-12-31T15:54:11.143802Z&lt;/updated>; &lt;link href=&quot;{ &#39;https://hackernews.betacat.io&#39;}&quot;/>; &lt;link href=&quot;https://hackernews.betacat.io/feed.xml&quot; rel=&quot;self&quot;/>; &lt;作者>; &lt;名称>;polyrabbit&lt;/名称>; &lt;uri>;https://github.com/polyrabbit/&lt;/uri>; &lt;/author>; &lt;generator>;Werkzeug&lt;/generator>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;比较 Google、Bing、Marginalia、Kagi、Mwmbl 和 ChatGPT&lt;/stitle>; &lt;id>;https://danluu.com/seo-spam/&lt;/id>; &lt;更新>; 2023-12-31T02：53：57.793765Z &lt;/更新>; &lt;link href =“https://danluu.com/seo-spam/”/>; &lt;作者>; &lt;名称>; 882542F3884314B &lt;/名称>; &lt;uri>; https： //news.ycombinator.com/user?id=882542F3884314B&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>; &lt;a href=&quot;https://hackernews.betacat.io/#compare-google-bing -marginalia-kagi-mwmbl-and-chatgpt&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38821248&quot; target=&quot;_blank&quot; >;[comments]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;1690 年代的花生是重生&lt;/stitle>; &lt;id>;https://nationalpeanutboard.org/news/a-1690s-peanut-is-reborn/&lt;/id>; &lt;更新>;2023-12-31T11:53:57.795656Z&lt;/更新>; &lt; link href=&quot;https://nationalpeanutboard.org/news/a-1690s-peanut-is-reborn/&quot;/>; &lt;作者>; &lt;名称>;系泊物&lt;/名称>; &lt;uri>;https://news.ycombinator.com /user?id=mooreds&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://cdn.sanity.io/images/54y5ztcs/product/eb5a9a9dc0b7af69ae531a021629edf7995a107c-550x550.jpg?w =650&amp;q=90&quot; style=&quot;宽度:220px;高度：220px;&quot; />;&lt;br />;被认为已经灭绝的卡罗莱纳非洲跑花生已被重新发现，并由农民种植。这种花生于 1690 年代被带到美国殖民地，体积更小、更甜、更美味。比我们今天吃的花生密度更大。它具有文化和历史意义，被厨师和工匠用于各种烹饪创作。&lt;a href=&quot;https://hackernews.betacat.io/#a-1690s-peanut-is -reborn&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38823304&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>; &lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;预测谬误&lt;/stitle>; &lt;id>;https: //www.alexmurrell.co.uk/articles/the-forecasting-fallacy&lt;/id>; &lt;更新>;2023-12-31T12:53:57.796047Z&lt;/更新>; &lt;link href=&quot;https://www.alexmurrell .co.uk/articles/the-forecasting-fallacy&quot;/>; &lt;作者>; &lt;名称>;rognjen&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=rognjen&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://images.squarespace-cdn.com/content/5e13762b05aeab4478a071d5/f9e12d9a-d143-4bf0-a259-40ebe1b0f75b/Website_SocialImage.jpg?format=1500w&amp;content-type =图像％2Fjpeg“风格=”宽度：220px; height: 125px;&quot; />;&lt;br />;文章讨论了预测的缺陷以及各个领域预测的不良记录。它强调预测往往是披着科学外衣的幻想，并强调需要专注于建设未来而不是试图预测它。 &lt;a href=&quot;https://hackernews.betacat.io/#the-forecasting-fallacy&quot; target=&quot;_blank&quot;>;[summary]&lt;/a>; &lt;a href=&quot;https:// /news.ycombinator.com/item?id=38823542&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io /feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我为我的客厅电脑分叉了 SteamOS&lt;/stitle>; &lt;id>;https://iliana.fyi/blog/build-your-own-steamos-updates/&lt; /id>; &lt;更新>;2023-12-31T10:53:57.796450Z&lt;/更新>; &lt;link href=&quot;https://iliana.fyi/blog/build-your-own-steamos-updates/&quot;/>; &lt;作者>; &lt;name>;muterad_murilax&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=muterad_murilax&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;SteamOS 3（“Holo”）是一个基于 Arch 的 Linux 发行版，专为 Valve Software 的便携式 PC 游戏设备 Steam Deck 构建。它为最终用户提供原子更新和定制选项。 &lt;a href=&quot;https://hackernews.betacat.io/#i-forked-steamos-for-my-living-room-pc&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=38823101&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Emacs-copilot：Emacs 的大型语言模型代码完成&lt;/stitle>; &lt;id>;https://github.com/jart/emacs-copilot&lt;/ id>; &lt;更新>;2023-12-31T06:53:57.796824Z&lt;/更新>; &lt;link href=&quot;https://github.com/jart/emacs-copilot&quot;/>; &lt;作者>; &lt;名称>;yla92 &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=yla92&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://opengraph.githubassets.com/ b003f074684caa9d5b2db8c54af05967ce6ff04ecd09322ec2ca67a5ecc545f9/jart/emacs-copilot&quot; style=&quot;宽度：220px；高度：110px；&quot; />;&lt;br />;Emacs Copilot 是一个允许在 Emacs 缓冲区内完成代码的工具。它使用本地运行的语言模型 (LLM) 根据您的编辑历史记录生成代码建议。法学硕士与语言无关，可以根据您的编程语言进行定制。 &lt;a href=&quot;https://hackernews.betacat.io/#emacs-copilot-large-language-model-code-completion-for-emacs&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38822164&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;电子邮件地址不是帐户的良好“永久”标识符&lt;/stitle>; &lt;id>;https://utcc.utoronto.ca/~cks/ space/blog/tech/EmailAddressesBadPermanentIDs&lt;/id>; &lt;更新>;2023-12-31T13:53:57.797170Z&lt;/更新>; &lt;link href=&quot;https://utcc.utoronto.ca/~cks/space/blog/ tech/EmailAddressesBadPermanentIDs&quot;/>; &lt;作者>; &lt;名称>;throw0101b &lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=throw0101b&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot; >;您无权访问此服务器上的 /~cks/space/blog/tech/EmailAddressesBadPermanentIDs。 &lt;a href=&quot;https://hackernews.betacat.io/#email-addresses-are-not-good-permanent-identifiers-for-accounts&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38823817&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Linux 中的非特权进程注入技术&lt;/stitle>; &lt;id>;https://joev.dev/posts/unprivileged-process-injection-techniques- in-linux&lt;/id>; &lt;更新>;2023-12-31T09:53:57.797567Z&lt;/更新>; &lt;link href=&quot;https://joev.dev/posts/unprivileged-process-injection-techniques-in-linux &quot;/>; &lt;author>; &lt;name>;joe_v&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=joe_v&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://joev.dev/suffering-full.png&quot; style=&quot;宽度：220px；高度：173px；&quot; />;&lt;br />;本文讨论了 Linux 上的进程注入技术，并提出了使用 /proc/[pid]/mem 的更简单的实现。它解释了如何使用标准文件系统系统调用来操纵远程进程内存，并提供了利用这些技术的工具示例。 &lt;a href=&quot;https://hackernews.betacat.io/#unprivileged-process-injection-techniques-in-linux&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=38801183&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;LuaX：带有 JSX 的 Lua 方言&lt;/stitle>; &lt;id>;https://bvisness.me/luax/&lt;/id>; &lt;更新>;2023-12-31T06： 53:57.797938Z&lt;/updated>; &lt;link href=&quot;https://bvisness.me/luax/&quot;/>; &lt;作者>; &lt;name>;goranmoomin&lt;/name>; &lt;uri>;https://news.ycombinator.com/ user?id=goranmoomin&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;LuaX 是一种带有 JSX 的 Lua 方言，允许您在真正的编程语言中编写 HTML。它提供了一个能够理解 HTML 并允许在代码中添加有趣逻辑的系统。 &lt;a href=&quot;https://hackernews.betacat.io/#luax-a-lua-dialect-with-jsx&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=38813677&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;即时消息传递：协议是“公用的”，让我们认真对待它们&lt;/stitle>; &lt;id>;https://www.process-one.net/blog/instant-messaging -protocols-are-commons-lets-take-them-seriously/&lt;/id>; &lt;更新>;2023-12-31T13:53:57.798305Z&lt;/更新>; &lt;link href=&quot;https://www.process-one .net/blog/instant-messaging-protocols-are-commons-lets-take-them-seriously/&quot;/>; &lt;author>; &lt;name>;系泊设备&lt;/name>; &lt;uri>;https://news.ycombinator.com/ user?id=mooreds&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://static.process-one.net/bootstrap/img/art/p1.jpg&quot; style= “宽度：220 像素；高度：124 像素；” />;&lt;br />;第一个即时通讯服务出现三十年后，我们仍然没有达到即时通讯平台可以像电子邮件一样自由地相互通信的阶段。 1999 年，互联网工程任务组 (IETF) 为此创建了 Jabber/XMPP 协议并对其进行了标准化。此后，专有消息服务不断借助互联网巨头的力量来主导市场。 &lt;a href=&quot;https://hackernews.betacat.io/#instant-messaging-protocols-are-commons-let-s-take-them-seriously&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=38823819&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;不使用 Git 提交&lt;/stitle>; &lt;id>;https://matheustavares.gitlab.io/posts/committing-without-git&lt;/ id>; &lt;更新>;2023-12-31T06:53:57.798677Z&lt;/更新>; &lt;link href=&quot;https://matheustavares.gitlab.io/posts/committing-without-git&quot;/>; &lt;作者>; &lt;名称>; matheust&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=matheust&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://matheustavares. gitlab.io/assets/committing-without-git/git-objects.png&quot; style=&quot;width: 220px; height: 140px;&quot; />;&lt;br />;我们的目标是创建一个包含两次提交的分支：第一次添加单个 README 文件，第二次稍微更改此文件。所有这一切都无需运行 git。如果您点击这篇文章，我很可能不需要说服您为什么有人想要这样做……因为这很有趣！ :) 而且，它应该有助于理解 git 中的一些主要数据结构，即“git 对象”。 &lt;a href=&quot;https://hackernews.betacat.io/#committing-without-git&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=38814492&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;网络上 SQL 的未来 (2021)&lt;/stitle>; &lt;id>;https://jlong​​ster.com/future-sql-web&lt;/id>; &lt;更新>;2023-12-31T12： 53:57.799688Z&lt;/updated>; &lt;link href=&quot;https://jlong​​ster.com/future-sql-web&quot;/>; &lt;作者>; &lt;name>;thunderbong&lt;/name>; &lt;uri>;https://news.ycombinator .com/user?id=thunderbong&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;absurd-sql 是 Web 上 SQLite 的持久后端，可在 Web 应用程序中进行高效存储和写入。它解决了 IndexedDB 的限制和性能问题，提供了更强大的数据处理方式。该项目使用 sql.js 和文件系统层以小块的形式读写数据，使其比索引更快、更可靠 &lt;a href=&quot;https://hackernews.betacat.io/#a-future-for-sql -on-the-web-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38823445&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;帕斯卡在福斯 (1983) &lt;/stitle>; &lt;id>;http://tangentstorm.github.io/winfield-pascal-83.html&lt;/id>; &lt;更新>;2023-12-31T05:53:57.800029Z&lt;/更新>; &lt;link href=&quot; http://tangentstorm.github.io/winfield-pascal-83.html&quot;/>; &lt;作者>; &lt;名称>;sph&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=sph&lt; /uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;这是描述 Forth 的一组类似 Pascal 扩展的两篇文章中的第一篇。目的是为 Forth 程序员提供使用类似 Pascal 的语法编写任务部分的选项。将 Forth 扩展到 Pascal 是一项有趣的练习，也是对 Forth 功能和灵活性的测试。 &lt;a href=&quot;https://hackernews.betacat.io/#pascal-in-forth-1983&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator. com/item?id=38822094&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot; >; &lt;title type=&quot;text&quot;>;显示 HN：Common Lisp Vim 编译器插件&lt;/stitle>; &lt;id>;https://git.sr.ht/~skin/roswell-sbcl.vim&lt;/id>; &lt;更新>;2023-12-31T08:53:57.800382Z&lt;/updated>; &lt;link href=&quot;https://git.sr.ht/~skin/roswell-sbcl.vim&quot;/>; &lt;作者>; &lt;名称>;djha-skin &lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=djha-skin&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;此存储库包含 (n)vim 的编译器配置将 Roswell 与 SBCL 或单独使用 SBCL 时的快速修复列表。编译器假定当前工作目录中有一个 *.asd 文件，或者存储库根目录中有一个 *.ros 文件作为入口点。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-common-lisp-vim-compiler-plug-in&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot; https://news.ycombinator.com/item?id=38820391&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews. betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;瑞典太阳能系统&lt;/stitle>; &lt;id>;https://en.wikipedia.org/wiki/Sweden_Solar_System&lt;/id>; &lt;更新>;2023-12 -31T12:53:57.800715Z&lt;/updated>; &lt;link href=&quot;https://en.wikipedia.org/wiki/Sweden_Solar_System&quot;/>; &lt;作者>; &lt;name>;titaniumtown&lt;/name>; &lt;uri>;https:// news.ycombinator.com/user?id=titaniumtown&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/ 31/Ericsson_Globe_Stockholm.jpg/300px-Ericsson_Globe_Stockholm.jpg&quot; style=&quot;宽度：220px；高度：220px；&quot; />;&lt;br />;瑞典太阳系是世界上最大的永久比例太阳系模型。太阳队的代表是斯德哥尔摩的 Avicii 体育场，这是世界第二大半球形建筑。 &lt;a href=&quot;https://hackernews.betacat.io/#sweden-solar-system&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=38823482&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;询问客户想要什么是行不通的&lt;/stitle>; &lt;id>;https://techbooks.substack.com/p/why-asking-your-customers-what-they&lt;/id >; &lt;更新>;2023-12-31T02:53:57.801052Z&lt;/更新>; &lt;link href=&quot;https://techbooks.substack.com/p/why-asking-your-customers-what-they&quot;/>; &lt;作者>; &lt;name>;AntonZ234&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=AntonZ234&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https ://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d760e73-b299 -4ab9-912b-3e6d7f5a113f_1792x1024.png&quot; style=&quot;宽度：220px；高度：126px；&quot; />;&lt;br />;本文讨论了“待完成的工作”的概念以及它如何帮助公司了解客户真正想要什么。它强调了仅依赖客户反馈的局限性，并强调了确定客户试图完成的基本工作的重要性。 &lt;a href=&quot;https://hackernews.betacat.io/#asking-your-customers-what-they-want-doesn-t-work&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38814152&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;要求不可能：严格的数据库基准测试&lt;/stitle>; &lt;id>;https://erthalion.info/2023/12/29/statistics-and -benchmarking/&lt;/id>; &lt;更新>;2023-12-31T05:53:57.801396Z&lt;/更新>; &lt;link href=&quot;https://erthalion.info/2023/12/29/statistics-and-benchmarking/&quot; />; &lt;author>; &lt;name>;erthalion&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=erthalion&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src =&quot;https://erthalion.info/public/img/stats/lorenz.png&quot; style=&quot;宽度：220px；高度：122px；&quot; />;&lt;br />;由于数据库固有的二元性以及需要结合特定领域的专业知识和一般分析专业知识的需要，数据库中的基准测试和性能评估容易出错且复杂。理解数据库系统的性能需要全面的心智模型以及公共知识和特定知识的结合。不考虑模糊影响和未知的未知因素可能会导致基准测试不当&lt;a href=&quot;https://hackernews.betacat.io/#demand-the-impossible-rigorous-database-benchmarking&quot; target=&quot;_blank&quot;>;[summary] &lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38809160&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml: base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;将事物切换到 Ikiwiki&lt;/stitle>; &lt;id>;https://bt.ht/posts/Switching_Things_Over_to_ikiwiki/ &lt;/id>; &lt;更新>;2023-12-31T06:53:57.801735Z&lt;/更新>; &lt;link href=&quot;https://bt.ht/posts/Switching_Things_Over_to_ikiwiki/&quot;/>; &lt;作者>; &lt;名称>;bradley_taunt&lt;/ name>; &lt;uri>;https://news.ycombinator.com/user?id=bradley_taunt&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;我的个人网站现在建立在 ikiwiki 之上，而不是 barf。我转向 ikiwiki 是因为它易于使用、灵活，并且能够以多种方式发布页面和帖子。该网站现在支持内置搜索表单和评论系统。 &lt;a href=&quot;https://hackernews.betacat.io/#switching-things-over-to-ikiwiki&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38814990&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;为 Web 构建 ColdFusion&lt;/stitle>; &lt;id>;https://thehistoryoftheweb.com/building-coldfusion-for-the-web/&lt;/id>; &lt;updated>;2023- 12-31T11:53:57.802745Z&lt;/updated>; &lt;link href=&quot;https://thehistoryoftheweb.com/building-coldfusion-for-the-web/&quot;/>; &lt;作者>; &lt;name>;paulgb&lt;/name>; &lt; uri>;https://news.ycombinator.com/user?id=paulgb&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://thehistoryoftheweb.com/wp-json/社交图像生成器/v1/image/15834&quot; style=&quot;宽度：220px；高度：116px；&quot; />;&lt;br />;ColdFusion 于 1995 年开发，是一种专门用于构建网站的编程语言。它旨在通过使用类似于 HTML 但具有更高级功能的标签来降低用户的进入门槛。多年来，ColdFusion 发展成为一个具有内置工具和实用程序的完整网站开发环境。尽管所有权和技术发生了变化，ColdFusion 仍然继续发布新版本，尽管其受欢迎程度有所下降。 &lt;a href=&quot;https://hackernews.betacat.io/#building-coldfusion-for-the-web&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38821224&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;使用 FFmpeg 模拟非 CRT 显示器：平板显示器 (2021)&lt;/stitle>; &lt;id>;https://int10h.org/blog/2021/03/simulated-non- crt-monitors-ffmpeg-flat-panels/&lt;/id>; &lt;更新>;2023-12-31T02:53:57.803073Z&lt;/更新>; &lt;link href=&quot;https://int10h.org/blog/2021/03/ simulate-non-crt-monitors-ffmpeg-flat-panels/&quot;/>; &lt;作者>; &lt;名称>;susam&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id=susam&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://int10h.org/blog/img/ffmpeg-crt/fp01-plasma-cgashow.tn.png&quot; style=&quot;width: 220px;高度：165px；” />;&lt;br />;如果您不喜欢缓慢地模拟 CRT 显示器，那么现在您也可以缓慢地模拟各种类型的旧平板显示器！所有这些都使用相同的 FFmpeg 脚本 - 仍命名为 FFcrt，遵循扩大项目范围的古老传统，使其名称不再反映其功能！ &lt;a href=&quot;https://hackernews.betacat.io/#simulated-non-crt-monitors-with-ffmpeg-flat-panel-displays-2021&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt; a href=&quot;https://news.ycombinator.com/item?id=38821166&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https: //hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Smalltalk 背后的设计原则 (1981)&lt;/stitle>; &lt;id>;https://www.cs.virginia.edu/~evans/ cs655/readings/smalltalk.html&lt;/id>; &lt;更新>;2023-12-31T03:53:57.803405Z&lt;/更新>; &lt;link href=&quot;https://www.cs.virginia.edu/~evans/cs655/ Readings/smalltalk.html&quot;/>; &lt;作者>; &lt;名称>;rodrigosetti&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=rodrigosetti&lt;/uri>; &lt;/author>; &lt;content type=&quot; html&quot;>;&lt;img src=&quot;https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk_files/dpbs_figure1.gif&quot; style=&quot;宽度：220px；高度：130px；&quot; />;&lt;br />;Smalltalk 项目旨在为每个人的创造力提供计算机支持。它专注于充当人体模型和计算硬件之间的接口的编程语言，以及将人类通信系统与计算机通信系统相匹配的用户界面。 Smalltalk背后的设计原则包括个人掌握、良好的设计、语言与人类思维和交流的兼容性、面向对象的&lt;a href=&quot;https://hackernews.betacat.io/#design-principles-behind-smalltalk-1981&quot;目标=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38821506&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;显示 HN：Spindle，Wordle 和 PHP 魔方的结合体&lt;/stitle>; &lt;id>;https://playspindle.com/&lt;/id>; &lt;更新>;2023-12-31T02:53:57.803741Z&lt;/更新>; &lt;link href=&quot;https://playspindle.com/&quot; />; &lt;author>; &lt;name>;abbm&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=abbm&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;目的是重新排列网格，以便拼写出目标单词（水平或垂直）。 &lt;a href=&quot;https://hackernews.betacat.io/#show-hn-spindle-a-cross- Between-wordle-and-a-rubik-s-cube-made-in-php&quot; target=&quot;_blank &quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38821187&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry >; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;我对低代码持怀疑态度&lt;/stitle>; &lt;id>;https:// nick.scialli.me/blog/why-im-skeptical-of-low-code/&lt;/id>; &lt;更新>;2023-12-30T21:53:57.804079Z&lt;/更新>; &lt;link href=&quot;https:// nick.scialli.me/blog/why-im-skeptical-of-low-code/&quot;/>; &lt;作者>; &lt;名称>;jamghee&lt;/名称>; &lt;uri>;https://news.ycombinator.com/user?id =jamghee&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;低代码解决方案通常无法满足公司的自定义功能要求，从而导致需要进行大量自定义。这导致了解用于自定义代码的定制语言的开发人员数量很少。升级到低代码平台可能会破坏自定义实现，并且底层数据库结构可能会变得混乱。以怀疑的态度对待低代码工具并考虑它们的局限性非常重要。 &lt;a href=&quot;https://hackernews.betacat.io/#im-skeptical-of-low-code&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news. ycombinator.com/item?id=38816135&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed. xml&quot;>; &lt;title type=&quot;text&quot;>;Ugrep – 更强大、快速、用户友好、兼容的 grep&lt;/stitle>; &lt;id>;https://ugrep.com/&lt;/id>; &lt;更新>;2023-12 -30T21：53：57.804456Z &lt;/更新>; &lt;link href =“https://ugrep.com/”/>; &lt;作者>; &lt;名称>; smartmic &lt;/名称>; &lt;uri>; https://news.ycombinator.com /user?id=smartmic&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://ugrep.com/ug.png&quot; style=&quot;width: 220px; height: 149px; ” />;&lt;br />;Ugrep 是一个强大且快速的 grep 工具，提供了新的选项和功能。它可以搜索目录、嵌套档案和压缩文件中的文件，并支持各种搜索模式和模式。 Ugrep 与 GNU grep 兼容，可以从命令行或 TUI 中使用。 &lt;a href=&quot;https://hackernews.betacat.io/#ugrep-a-more-powerful-fast-user-Friendly-兼容-grep&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href =&quot;https://news.ycombinator.com/item?id=38819262&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https:// hackernews.betacat.io/feed.xml&quot;>; &lt;title type=&quot;text&quot;>;压缩冒险&lt;/stitle>; &lt;id>;https://jamesg.blog/2023/12/29/compression-adventures/&lt;/id >; &lt;更新>;2023-12-31T01:53:57.804791Z&lt;/更新>; &lt;link href=&quot;https://jamesg.blog/2023/12/29/compression-adventures/&quot;/>; &lt;作者>; &lt;名称>; Zerojames&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=zerojames&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;今年早些时候，作者了解到了 Hutter 奖，压缩 1 GB 维基百科数据文件的竞赛。他们探索了各种方法，包括字典编码、量化和整数压缩。他们还尝试了不同的方式来存储压缩数据，例如使用字节。作者在这个项目上工作得很开心，并且学到了很多关于压缩的知识。 &lt;a href=&quot;https://hackernews.betacat.io/#adventures-with-compression&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/ item?id=38813700&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/feed.xml&quot;>; &lt; title type=&quot;text&quot;>;高性能计算的艺术&lt;/stitle>; &lt;id>;https://theartofhpc.com/&lt;/id>; &lt;updated>;2023-12-30T15:53:57.805119Z&lt;/updated>; &lt; link href=&quot;https://theartofhpc.com/&quot;/>; &lt;作者>; &lt;名称>;rramadass&lt;/name>; &lt;uri>;https://news.ycombinator.com/user?id=rramadass&lt;/uri>; &lt;/作者>; &lt;content type=&quot;html&quot;>;&lt;img src=&quot;https://theartofhpc.com/ewExternalFiles/frontcover-small.jpg&quot; style=&quot;width: 220px; height: 287px;&quot; />;&lt;br />;本书全面介绍了科学计算和高性能计算（HPC）。它涵盖了计算机体系结构、并行编程和现代编程语言等主题。作者 Victor Eijkhout 是德克萨斯州高级计算中心的研究科学家。 &lt;a href=&quot;https://hackernews.betacat.io/#the-art-of-high-performance-computing&quot; target=&quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https:// news.ycombinator.com/item?id=38815334&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt;/entry>; &lt;entry xml:base=&quot;https://hackernews.betacat.io/ feed.xml&quot;>; &lt;title type=&quot;text&quot;>;Misty 编程语言&lt;/stitle>; &lt;id>;https://www.crockford.com/misty/&lt;/id>; &lt;更新>;2023-12-31T03:53: 57.805457Z&lt;/更新>; &lt;link href=&quot;https://www.crockford.com/misty/&quot;/>; &lt;作者>; &lt;名称>;Matrixik &lt;/名称>; &lt;uri>;https://news.ycombinator.com/ user?id=Matrixik&lt;/uri>; &lt;/author>; &lt;content type=&quot;html&quot;>;公共领域 2023 Douglas Crockford &lt;a href=&quot;https://hackernews.betacat.io/#misty-programming-language&quot; target= &quot;_blank&quot;>;[摘要]&lt;/a>; &lt;a href=&quot;https://news.ycombinator.com/item?id=38820305&quot; target=&quot;_blank&quot;>;[评论]&lt;/a>;&lt;/content>; &lt; /条目>; &lt;/提要>;